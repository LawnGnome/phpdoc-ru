<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 317663 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->
 <chapter xml:id="faq.passwords" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Безопасное хэширование паролей</title>
  <titleabbrev>Хэширование паролей</titleabbrev>
  
  <para>
   В этом разделе разъясняются причины, стоящие за хэшированием паролей в целях
   безопасности, а также эффективные методы хэширования.
  </para>
  
  <qandaset>
   <qandaentry xml:id="faq.passwords.hashing">
    <question>
     <para>
      Почему я должен хэшировать пароли пользователей в моем приложении?
     </para>
    </question>
    <answer>
     <para>
      Хэширование паролей является одним из самых базовых соображенй безопасности,
      которые необходимо сделать, при разработке приложения, принимающего пароли
      от пользователей. Без хэширования, пароли, хранящиеся в базе вашего приложения,
      могут быть украдены, например, если ваша база данных была скомпрометирована,
      а затем немедленно могут быть применены для компрометации не только вашего
      приложения, но и аккаунтов ваших пользователей на других сервисах, если
      они не используют уникальных паролей.
     </para>
     <para>
      Применяя хэширующий алгоритм к пользовательским паролям перед сохранением
      их в своей базе данных, вы делаете невозможным разгадывание оригинального
      пароля для атакующего вашу базу данных, в то же время сохраняя возможность
      сравнения полученного хэша с оригинальным паролем.
     </para>
     <para>
      Важно заметить, однако, что хэширование паролей защищает их только
      от компрометирования в вашем хранилище, но не обязательно от вмешательства
      вредоносного кода в вашем приложении.
     </para>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.fasthash">
    <question>
     <para>
      Почему популярные хэширующие функции, такие как <function>md5</function> и
      <function>sha1</function> не подходят для паролей?
     </para>
    </question>
    <answer>
     <para>
      Такие хэширующие алгоритмы как MD5, SHA1 и SHA256 были спроектированы
      очень быстрыми и эффективными. При наличии современных технологий и
      оборудования, стало довольно просто выяснить результат этих алгоритмов методом
      "грубой силы" для определения оригинальных вводимых данных.
     </para>
     <para>
      Из-за той скорости, с которой современные компьютеры могут "обратить"
      эти хэширующие алгоритмы, многие профессионалы компьютерной безопасности
      строго не рекомендуют использовать их для хэширования паролей.
     </para>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.bestpractice">
    <question>
     <para>
      Если популярные хэширующие функции не подходят, как же я тогда должен
      хэшировать свои пароли?
     </para>
    </question>
    <answer>
     <para>
      При хэшировании паролей существует два важных соображения: это стоимость
      вычисления и соль. Чем выше стоимость вычисления хэширующего алгоритма,
      тем больше времени требуется для взлома его вывода методом "грубой силы".
     </para>
     <para>
      В поставке PHP существует две функции, которые осуществляют хэширование
      с помощью указанного алгоритма.
     </para>
     <para>
      Первой такой функцией является <function>crypt</function>, в которой
      встроена поддержка нескольких хэширующих алгоритмов. Использование этой
      функции гарантирует наличие выбранного вами алгоритма, т.к. PHP содержит
      встроенную реализацию каждого поддерживаемого алгоритма, в случае отсутствия
      данного алгоритма в вашей операционной системе.
     </para>
     <para>
      Второй хэширующей функцией является <function>hash</function>, которая поддерживает
      намного больше алгоритмов и их вариаций, чем <function>crypt</function>, но
      не поддерживает некоторые алгоритмы, доступные в <function>crypt</function>.
      Расширение Hash включено в поставку PHP, но может быть отключено при компиляции,
      поэтому его наличие не гарантируется, в отличие от функции
      <function>crypt</function>, входящей в ядро PHP.
     </para>
     <para>
      Рекомендуемым к использованию алгоритмом является Blowfish, так как он
      имеет намного более высокую стоимость вычисления, чем MD5 или SHA1, являясь
      в то же время масштабируемым.
     </para>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.salt">
    <question>
     <para>
      Что такое соль?
     </para>
    </question>
    <answer>
     <para>
      Криптографическая соль представляет собой данные, которые применяются в
      процессе хэширования для предотвращения возможности разгадать оригинальный ввод
      с помощью поиска результата хэширования в списке заранее вычисленных пар
      ввод-хэш, известном также как "радужная" таблица.
     </para>
     <para>
      Более простыми словами, соль - это кусочек дополнительных данных, которые
      делают ваши хэши намного более устойчивыми к взлому. Существует много
      онлайн-сервисов, предоставляющих обширные списки заранее вычисленных хэшей
      вместе с их оригинальным вводом. Использование соли делает поиск результирующего
      хэша в таком списке маловероятным или даже невозможным.
     </para>
    </answer>
   </qandaentry>
  </qandaset>
  
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
