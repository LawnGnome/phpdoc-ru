<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: n/a Maintainer: shein Status: old -->
<!-- $Revision$ -->
 <chapter xml:id="language.exceptions" xmlns="http://docbook.org/ns/docbook">
  <title>Исключения</title>

  <para>
   Модель исключений (exceptions) в PHP 5 проще, чем в других языках программирования
   Исключение можно сгенерировать (как говорят, "выбросить") при помощи оператора 
   <literal>throw</literal>, и можно перехватить (или, как говорят, "поймать")
   оператором <literal>catch</literal>. Код выбрасывающий исключение, должен
   быть окружен блоком <literal>try</literal>, для того чтобы можно было
   перехватить исключение. Каждый блок <literal>try</literal>
   должен иметь как минимум один соответствующий блок <literal>catch</literal>. 
   Так же можно использовать несколько блоков <literal>catch</literal>,
   перехватывающих различные классы исключений.
   Нормальное выполнение (когда не генерируется исключений в блоках 
   <literal>try</literal> или когда класс выброшенного исключения не
   совпадает с классами, объявленными в соответствующих блоках
   <literal>catch</literal>) будет продолжено за последним  блоком
   <literal>catch</literal>. Исключения так же могут быть сгенерированны (или
   перегерерированы - т.е. выброшены снова) оператором <literal>throw</literal> 
   внутри блока <literal>catch</literal>.
  </para>
  <para>
   При генерации исключения, код следующий ниже оператора
   <literal>throw</literal> исполнен не будет, а PHP предпримет попытку найти
   первый блок <literal>catch</literal>, перехватывающий исключение данного
   класса. Если исключение не будет перехвачено, PHP выдаст сообщение об
   ошибке: "<literal>Uncaught Exception ...</literal>" (Неперехваченное
   исключение), если конечно не был определен обработчик ошибок при помощи
   функции <function>set_exception_handler</function>.
  </para>
   <example>
    <title>Выброс исключений</title>
    <programlisting role="php">
<![CDATA[
<?php
function inverse($x) {
    if (!$x) {
        throw new Exception('Деление на ноль.');
    }
    else return 1/$x;
}

try {
    echo inverse(5) . "\n";
    echo inverse(0) . "\n";
} catch (Exception $e) {
    echo 'Выброшено исключение: ',  $e->getMessage(), "\n";
}

// Продолжение выполнения
echo 'Hello World';
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0.2
Выброшено исключение: Деление на ноль.
Hello World
]]>
    </screen>
   </example>

  <sect1 xml:id="language.exceptions.extending">
   <title>Наследование исключений</title>
   <para>
    Определенный пользователем класс исключения должен быть определен, как
    класс расширяющий (наследующий) встроенный класс Exception. Ниже приведены методы и
    свойства класса  Exception, доступные дочерним классам.
   </para>
   <example>
    <title>Встроеный класс Exception</title>
    <programlisting role="php">
<![CDATA[
<?php
class Exception
{
    protected $message = 'Unknown exception';   // сообшение
    protected $code = 0;                        // Код исключения,
    определяемый пользователем
    protected $file;                            // файл в котором было
    выброшено исключение
    protected $line;                            // строка в которой было
    выброшено исключение

    function __construct($message = null, $code = 0);

    final function getMessage();                // Возвращает сообшение
    исключения 
    final function getCode();                   // Код исключения
    final function getFile();                   // Файл, где выброшено
    исключение
    final function getLine();                   // Строка, выбросившая исключени
    final function getTrace();                  // Массив backtrace()
    final function getTraceAsString();          // Обратная трассировка как
    строка

    /* Overrideable - т.е. то, что можно переопределить */
    function __toString();                       // должен вернуть
    форматированную строку, для отображения
}
?>
]]>
    </programlisting>
   </example>
   <para>
    Если класс, наследуемый от Exception переопределяет <link
    linkend="language.oop5.decon">конструктор</link>, необходимо вызвать в 
    конструкторе <link linkend="language.oop5.paamayim-nekudotayim"
    >parent::__construct()</link>, чтобы быть уверенным, что все дынные
    будут доступны. Метод <link linkend="language.oop5.magic">__toString()</link>
    может быть переопределен, что бы обеспечить нужный вывод, когда объект
    преобразуется в строку.
   </para>
   <example>
    <title>Наследование класса Exception</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Определим свой класс исключения
 */
class MyException extends Exception
{
    // Переопределим исключение так, что параметр message станет обязательным
    public function __construct($message, $code = 0) {
        // какой-то код 
    
        parent::__construct($message, $code);
    }

    // Переопределим строковое представление объекта.
    public function __toString() {
        return __CLASS__ . ": [{$this->code}]: {$this->message}\n";
    }

    public function customFunction() {
        echo "Мы можем определять новые методы в наследуемом классе\n";
    }
}


/**
 * Создадим класс для тестирования исключения
 */
class TestException
{
    public $var;

    const THROW_NONE    = 0;
    const THROW_CUSTOM  = 1;
    const THROW_DEFAULT = 2;

    function __construct($avalue = self::THROW_NONE) {

        switch ($avalue) {
            case self::THROW_CUSTOM:
                // Бросаем собственное исключение
                throw new MyException('1 - неправильный параметр', 5);
                break;

            case self::THROW_DEFAULT:
                // Бросаем встроеное исключение
                throw new Exception('2 - недопустимый параметр', 6);
                break;

            default: 
                // Никаких исключений, объект будет создан.
                $this->var = $avalue;
                break;
        }
    }
}


// Example 1
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (MyException $e) {      // Will be caught
    echo "Поймано собственное, переопределенное исключение\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // Будет пропущено.
    echo "Поймано встроенное исключение\n", $e;
}

// Отсюда будет продолжено выполнение программы
var_dump($o);
echo "\n\n";


// Example 2
try {
    $o = new TestException(TestException::THROW_DEFAULT);
} catch (MyException $e) {      // Тип исключения не совпадет
    echo "Поймано переопределенное исключение\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // Будет перехвачено
    echo "Перехвачено встроенное исключение\n", $e;
}

// Отсюда будет продолжено выполнение программы
var_dump($o);
echo "\n\n";


// Example 3
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (Exception $e) {        // Будет перехвачено.
    echo "Поймано встроенное исключение\n", $e;
}

// Продолжение исполнения программы
var_dump($o);
echo "\n\n";


// Example 4
try {
    $o = new TestException();
} catch (Exception $e) {        // Будет пропущено, т.к. исключение не выкидывается
    echo "Поймано встроенное исключение\n", $e;
}

// Продолжение выполнения программы
var_dump($o);
echo "\n\n";
?>
]]>
    </programlisting>
   </example>
  </sect1>

 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
