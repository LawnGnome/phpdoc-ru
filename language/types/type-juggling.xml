<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 297557 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->
<sect1 xml:id="language.types.type-juggling">
 <title>Манипуляции с типами</title>

 <simpara>
  PHP не требует (и не поддерживает) явного типа при определении переменной;
  тип переменной определяется по контексту, в котором она используется.
  То есть, если вы присвоите значение типа <type>string</type>
  переменной <varname>$var</varname>, то <varname>$var</varname> станет строкой.
  Если вы затем присвоите <varname>$var</varname> целочисленное значение, она станет целым числом.
 </simpara>

 <para>
  Примером автоматического преобразования типа является оператор
  сложения '+'. Если какой-либо из операндов является <type>float</type>,
  то все операнды интерпретируются как <type>float</type>,
  и результатом также будет <type>float</type>. В
  противном случае операнды будут интерпретироваться как целые числа
  и результат также будет целочисленным. Обратите внимание, что это
  <emphasis>НЕ</emphasis> меняет типы самих операндов;
  меняется только то, как они вычисляются и сам тип выражения.
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
$foo = "0";  // $foo это строка (ASCII 48)
$foo += 2;   // $foo теперь целое число (2)
$foo = $foo + 1.3;  // $foo теперь число с плавающей точкой (3.3)
$foo = 5 + "10 Little Piggies"; // $foo это целое число (15)
$foo = 5 + "10 Small Pigs";     // $foo это целое число (15)
?>
]]>
<!-- bad example, no real operator (must be used with variable, modifies it too)
$foo++;      // $foo is the string "1" (ASCII 49)

TODO: explain ++/- - behaviour with strings

examples:

++'001' = '002'
++'abc' = 'abd'
++'xyz' = 'xza'
++'9.9' = '9.0'
++'-3'  = '-4'
- -'9'   = 8 (integer!)
- -'5.5' = '5.5'
- -'-9'  = -10 (integer)
- -'09'  = 8 (integer)
- -'abc' = 'abc'

-->
  </programlisting>
 </informalexample>

 <simpara>
   Если последние два примера вам непонятны, смотрите <link
   linkend="language.types.string.conversion">Преобразование строк
   в числа</link>.
 </simpara>

 <simpara>
   Если вы хотите, чтобы переменная принудительно вычислялась как
   определенный тип, смотрите раздел <link linkend="language.types.typecasting">приведение
   типов</link>. Если вы хотите изменить тип переменной, смотрите
   <function>settype</function>.
 </simpara>

 <para>
   Если вы хотите протестировать любой из примеров, приведенных в
   данном разделе, вы можете использовать функцию
   <function>var_dump</function>.
 </para>

 <note>
  <para>
   Поведение автоматического преобразования в массив в настоящий
   момент не определено.
  </para>

  <para>
   К тому же, так как PHP поддерживает индексирование в строках аналогично
   смещениям элементов массивов, следующий пример будет верен для всех версий PHP:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$a    = 'car'; // $a - это строка
$a[0] = 'b';   // $a все еще строка
echo $a;       // bar
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Более подробно смотрите в разделе <link linkend="language.types.string.substr">Доступ к символу
   в строке</link>.
  </para>
 </note>

 <sect2 xml:id="language.types.typecasting">
  <title>Приведение типов</title>

  <para>
     Приведение типов в PHP работает так же, как и в C: имя требуемого
     типа записывается в круглых скобках перед приводимой переменной.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = 10;   // $foo это целое число
$bar = (boolean) $foo;   // $bar это булев тип
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Допускаются следующие приведения типов:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>(int), (integer) - приведение к <type>integer</type></simpara>
   </listitem>
   <listitem>
    <simpara>(bool), (boolean) - приведение к <type>boolean</type></simpara>
   </listitem>
   <listitem>
    <simpara>(float), (double), (real) - приведение к <type>float</type></simpara>
   </listitem>
   <listitem>
    <simpara>(string) - приведение к <type>string</type></simpara>
   </listitem>
   <!-- FIXME PHP_6
   <listitem>
    <simpara>(binary) - cast to binary <type>string</type> (PHP 6)</simpara>
   </listitem>
   -->
   <listitem>
    <simpara>(array) - приведение к <type>array</type></simpara>
   </listitem>
   <listitem>
    <simpara>(object) - приведение к <type>object</type></simpara>
   </listitem>
   <listitem>
    <simpara>(unset) - приведение к <type>NULL</type> (PHP 5)</simpara>
   </listitem>
  </itemizedlist>

  <para>
   Приведение типа (binary) и поддержка префикса b были добавлены в PHP 5.2.1
  </para>

  <para>
     Обратите внимание, что внутри скобок допускаются пробелы и
     символы табуляции, поэтому следующие примеры равносильны по своему
     действию:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = (int) $bar;
$foo = ( int ) $bar;
?>
]]>
   </programlisting>

   <para>
    Приведение строковых литералов и переменных к бинарным строкам:
   </para>

   <programlisting role="php">
<![CDATA[
<?php
$binary = (binary) $string;
$binary = b"binary string";
?>
]]>
   </programlisting>
  </informalexample>

  <note>
   <para>
    Вместо использования приведения переменной к <type>string</type>, можно также заключить
    ее в двойные кавычки.
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$foo = 10;            // $foo - это целое число
$str = "$foo";        // $str - это строка
$fst = (string) $foo; // $fst - это тоже строка

// Это напечатает "они одинаковы"
if ($fst === $str) {
    echo "они одинаковы";
}
?>
]]>
    </programlisting>
   </informalexample>
  </note>
   
  <para>
   Может быть не совсем ясно, что именно происходит при приведении между типами.
   Для дополнительной информации смотрите разделы:
  </para>
  
  <itemizedlist>
   <listitem>
    <simpara>
     <link linkend="language.types.boolean.casting">Преобразование в булев тип</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.integer.casting">Преобразование в целое число</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.float.casting">Преобразование в число с плавающей точкой</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.string.casting">Преобразование в строку</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.array.casting">Преобразование в массив</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.object.casting">Преобразование в объект</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.resource.casting">Преобразование в ресурс</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.null.casting">Преобразование в NULL</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="types.comparisons">Таблицы сравнения типов</link>
    </simpara>
   </listitem>
  </itemizedlist>

 </sect2>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
