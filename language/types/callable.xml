<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 338094 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->
<sect1 xml:id="language.types.callable">
 <title>Функции обратного вызова (callback-функции)</title>

 <para>
  Callback-функции могут быть отмечены в коде подсказкой <type>callable</type>,
  появившейся в версии PHP 5.4.
  В этой документации для тех же целей используется <type>callback</type>.
 </para>

 <para>
  Некоторые функции, такие как <function>call_user_func</function> или
  <function>usort</function>, принимают определенные пользователем
  callback-функции в качестве параметра. Callback-функции могут быть как простыми
  функциями, так и методами объектов, включая статические методы классов.
 </para>

 <sect2 xml:id="language.types.callable.passing">
  <title>Передача</title>

  <para>
   В PHP функции передаются по имени в виде строки. Можно использовать любые встроенные,
   либо созданные пользователем функции, за исключением конструкций языка, таких как:
   <function>array</function>, <function>echo</function>,
   <function>empty</function>, <function>eval</function>,
   <function>exit</function>, <function>isset</function>,
   <function>list</function>, <function>print</function> или
   <function>unset</function>.
  </para>

  <para>
   Метод созданного объекта (<type>object</type>) передается как массив, содержащий
   объект по индексу 0 и имя метода по индексу 1. Доступ к приватным и защищенным 
   методам разрешен изнутри класса.
  </para>

  <para>
   Статические методы класса также могут быть вызваны без создания экземпляра
   объекта класса, путем передачи имени класса, вместо объекта, в элементе массива с
   индексом 0.
   С PHP 5.2.3, также можно передавать <literal>'ClassName::methodName'</literal>.
  </para>

  <para>
   Помимо обычных пользовательских функций, в качестве callback-функции, можно передавать
   <link linkend="functions.anonymous">анонимные функции</link>.
  </para>

  <para>
   <example>
    <title>
     Пример callback-функции
    </title>
    <programlisting role="php">
<![CDATA[
<?php

// Пример callback-функции
function my_callback_function() {
    echo 'hello world!';
}

// Пример callback-метода
class MyClass {
    static function myCallbackMethod() {
        echo 'Hello World!';
    }
}

// Type 1: Простой callback
call_user_func('my_callback_function');

// Type 2: Вызов статического метода класса
call_user_func(array('MyClass', 'myCallbackMethod'));

// Type 3: Вызов метода класса
$obj = new MyClass();
call_user_func(array($obj, 'myCallbackMethod'));

// Type 4: Вызов статического метода класса (С PHP 5.2.3)
call_user_func('MyClass::myCallbackMethod');

// Type 5: Вызов относительного статического метода (С PHP 5.3.0)
class A {
    public static function who() {
        echo "A\n";
    }
}

class B extends A {
    public static function who() {
        echo "B\n";
    }
}

call_user_func(array('B', 'parent::who')); // A

// Type 6: Объекты реализующие __invoke могут быть использованы как callback (С PHP 5.3)
class C {
    public function __invoke($name) {
        echo 'Hello ', $name, "\n";
    }
}

$c = new C();
call_user_func($c, 'PHP!');
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>
     Пример callback-функции с использованием замыкания
    </title>
   <programlisting role="php">
<![CDATA[
<?php
// Наше замыкание
$double = function($a) {
    return $a * 2;
};

// Диапазон чисел
$numbers = range(1, 5);

// Использование замыкания в качестве callback-функции
// для удвоения каждого элемента в нашем диапазоне
$new_numbers = array_map($double, $numbers);

print implode(' ', $new_numbers);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
2 4 6 8 10
]]>
    </screen>
   </example>
  </para>

  <note>
   <simpara>
    В PHP 4, необходимо использовать ссылку для создания callback-функции
    указывающей на существующий объект, а не его копию. Подробности смотрите в
    <link linkend="language.references">References Explained</link>.
   </simpara>
  </note>

  &note.func-callback-exceptions;
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->