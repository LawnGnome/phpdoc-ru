<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 305581 Maintainer: shein Status: ready -->
<!-- Reviewed: yes -->
<!-- $Revision$ -->
<sect1 xml:id="language.types.float">
 <title>Числа с плавающей точкой</title>

 <para>
  Числа с плавающей точкой (также известные как "float", "double", или "real")
  могут быть определены следующими синтаксисами:
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
$a = 1.234; 
$b = 1.2e3; 
$c = 7E-10;
?>
]]>
  </programlisting>
 </informalexample>

 <para>
  Формально:
 </para>

 <informalexample>
  <programlisting>
<![CDATA[
LNUM          [0-9]+
DNUM          ([0-9]*[\.]{LNUM}) | ({LNUM}[\.][0-9]*)
EXPONENT_DNUM [+-]?(({LNUM} | {DNUM}) [eE][+-]? {LNUM})
]]>
  </programlisting>
 </informalexample>

 <para>
  Размер числа с плавающей точкой зависит от платформы, хотя максимум, как правило
  составляет ~1.8e308 с точностью около 14 десятичных цифр (64-битный IEEE формат).
 </para>

 <warning xml:id="warn.float-precision">
  <title>Точность чисел с плавающей точкой</title>

  <para>
   Числа с плавающей точкой имеют ограниченную точность. Хотя это
   зависит от операционной системы, в PHP обычно используется формат
   двойной точности IEEE 754, дающий максимальную относительную ошибку
   округления порядка 1.11e-16.
   Неэлементарные арифметические операции могут давать большие ошибки,
   и, разумеется, необходимо принимать во внимание разрастание ошибок
   при совместном использовании нескольких операции.
  </para>

  <para>
   Кроме того, рациональные числа, которые могут быть точно представлены
   в виде чисел с плавающей точкой с основанием 10, например,
   <literal>0.1</literal> или <literal>0.7</literal>, не имеют
   точного внутреннего представления в качестве чисел с плавающей точкой
   с основанием 2, вне зависимости от размера мантиссы.
   Поэтому они и не могут быть преобразованы в их внутреннюю двоичную форму
   без небольшой потери точности. Это может привести к неожиданным результатам:
   например, <literal>floor((0.1+0.7)*10)</literal> скорее всего вернет
   <literal>7</literal> вместо ожидаемого <literal>8</literal>, так как
   результат внутреннего представления будет чем-то вроде
   <literal>7.9999999999999991118...</literal>.
  </para>

  <para>
   Так что никогда не доверяйте точности чисел с плавающей точкой до последней цифры,
   и никогда не проверяйте их на равенство.
   Если вам действительно необходима высокая точность, используйте
   <link linkend="ref.bc">математические функции произвольной точности</link> и
   <link linkend="ref.gmp">gmp</link>-функции.
  </para>
 </warning>

 <sect2 xml:id="language.types.float.casting">
  <title>Преобразование в число с плавающей точкой</title>
  
  <para>
   Информацию о преобразовании строк в числа с плавающей точкой смотрите в разделе
   <link linkend="language.types.string.conversion">Преобразование строк в числа</link>.
   Для значений других типов преобразование будет сначала осуществлено в
   в <type>integer</type> и затем в число с плавающей точкой.
   Дополнительную информацию смотрите в разделе
   <link linkend="language.types.integer.casting">Преобразование к целому</link>.
   Начиная с версии PHP 5, при преобразовании объекта к числу с плавающей точкой
   выводится замечание об ошибке.
  </para>

 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
