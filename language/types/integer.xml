<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 299538 Maintainer: conf Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->

<sect1 xml:id="language.types.integer">
 <title>Целые числа</title>
 
 <simpara>
  <type>Integer</type> это число из множества Z = {..., -2, -1, 0, 1, 2, ...}.
 </simpara>
  
 <para>
  Смотрите также:
 </para>

 <itemizedlist>
  <listitem>
   <simpara>
    <link linkend="ref.gmp">Целые числа произвольной длины / GMP</link>
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <link linkend="language.types.float">Числа с плавающей точкой</link>
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <link linkend="ref.bc">Числа произвольной точности / BCMath</link>
   </simpara>
  </listitem>
 </itemizedlist>

 <sect2 xml:id="language.types.integer.syntax">
  <title>Синтаксис</title>

  <simpara>
   Целые числа могут быть указаны в десятичной (основание 10), шестнадцатеричной
   (основание 16), или восьмеричной (основание 8) системе счисления, с необязательным предшествующим знаком (- or +).
  </simpara>

  <para>
   Для записи в восьмеричной системе счисления, предварите число <literal>0</literal> (нулем).
   Для записи в шестнадцатеричной системе счисления, необходимо поставить перед числом <literal>0x</literal>.
  </para>

  <example>
   <title>Целые литералы</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1234; // десятичное число
$a = -123; // отрицательное число
$a = 0123; // восьмеричное число (эквивалентно 83 в десятичной системе)
$a = 0x1A; // шестнадцатеричное число (эквивалентно 26 в десятичной системе)
?>
]]>
   </programlisting>
  </example>

  <para>
   Формально, структуру целых литералов можно записать так:
  </para>
 
  <informalexample>
   <programlisting>
<![CDATA[
десятичные        : [1-9][0-9]*
                  | 0

шестнадцатеричные : 0[xX][0-9a-fA-F]+

восьмеричные      : 0[0-7]+

целые             : [+-]?десятичные
                  | [+-]?шестнадцатеричные
                  | [+-]?восьмеричные
]]>
   </programlisting>
  </informalexample>

  <para>
   Размер <type>integer</type> зависит от платформы, хотя, как правило,
   максимальное значение примерно равно 2 миллиардам (это 32-битное знаковое).
   64-битные платформы обычно имеют максимальное значение около 9E18. PHP
   не поддерживает беззнаковые целые. С версии PHP 4.4.0 и PHP 5.0.5 размер
   <type>integer</type> может быть определен с помощью константы <constant>PHP_INT_SIZE</constant>, а
   его максимальное значение - с помощью константы <constant>PHP_INT_MAX</constant>.
  </para>

  <warning>
   <para>
    Если в восьмеричном <type>integer</type> будет обнаружена неверная цифра (например, 8 или 9),
    оставшаяся числа будет проигнорирована.
   </para>

   <example>
    <title>Странности с восьмеричными числами</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(01090); // 010 octal = 8 decimal
?>
]]>
    </programlisting>
   </example>
  </warning>
 </sect2>

 <sect2 xml:id="language.types.integer.overflow">
  <title>Переполнение целых чисел</title>

  <para>
   Если PHP обнаружил, что число превышает размер <type>integer</type>,
   он будет интерпретировать его в качестве <type>float</type>. Аналогично,
   если результат операции лежит за границами типа, он будет преобразован в <type>float</type>.
  </para>

  <example>
   <title>Переполнение целых на 32-битных системах</title>
   <programlisting role="php">
<![CDATA[
<?php
$large_number = 2147483647;
var_dump($large_number);                     // int(2147483647)

$large_number = 2147483648;
var_dump($large_number);                     // float(2147483648)

$million = 1000000;
$large_number =  50000 * $million;
var_dump($large_number);                     // float(50000000000)
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Переполнение целых на 64-битных системах</title>
   <programlisting role="php">
<![CDATA[
<?php
$large_number = 9223372036854775807;
var_dump($large_number);                     // int(9223372036854775807)

$large_number = 9223372036854775808;
var_dump($large_number);                     // float(9.2233720368548E+18)

$million = 1000000;
$large_number =  50000000000000 * $million;
var_dump($large_number);                     // float(5.0E+19)
?>
]]>
   </programlisting>
  </example>
  
  <para>
   В PHP не существует оператора деления целых чисел.
   Результатом <literal>1/2</literal> будет <type>float</type> <literal>0.5</literal>.
   Если привести значение к <type>integer</type>, оно будет округлено вниз.
   Для большего контроля над округлением используйте функцию <function>round</function>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(25/7);         // float(3.5714285714286) 
var_dump((int) (25/7)); // int(3)
var_dump(round(25/7));  // float(4) 
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.types.integer.casting">
  <title>Преобразование в целое</title>

  <simpara>
   Для явного преобразования в <type>integer</type>, используйте приведение
   <literal>(int)</literal> или <literal>(integer)</literal>. Однако,
   в большинстве случаев, в приведении типа нет необходимости, так как значение
   будет автоматически преобразовано, если оператор, функция или управляющая структура
   требует аргумент типа <type>integer</type>. Значение также может быть преобразовано в
   <type>integer</type> с помощью функции <function>intval</function>.
  </simpara>

  <simpara>
   Смотрите также: <link linkend="language.types.type-juggling">Манипуляции с типами</link>.
  </simpara>
   
  <sect3 xml:id="language.types.integer.casting.from-boolean">
   <title>Из <link linkend="language.types.boolean">булевого</link> типа</title>

   <simpara>
    &false; преобразуется в <literal>0</literal> (ноль), а &true; - в
    <literal>1</literal> (единицу).
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-float">
   <title>
    Из <link linkend="language.types.float">чисел с плавающей точкой</link>
   </title> 

   <simpara>
    При преобразовании из <type>float</type> в <type>integer</type>, число будет округлено
    <emphasis>в сторону нуля</emphasis>.
   </simpara>
    
   <para>
    Если число с плавающей точкой превышает размеры <type>integer</type> (обычно
    <literal>+/- 2.15e+9 = 2^31</literal> на 32-битных системах и
    <literal>+/- 9.22e+18 = 2^63</literal> на 64-битных системах), результат будет неопределенным,
    так как <type>float</type> не имеет достаточной точности, чтобы вернуть верный результат.
    В этом случае не будет выведено ни предупреждения, ни даже замечания!
   </para>
    
   <warning>
    <para>
     Никогда не приводите неизвестную дробь к <type>integer</type>, так как это
     иногда может дать неожиданные результаты.
    </para>

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo (int) ( (0.1+0.7) * 10 ); // выводит 7!
?>
]]>
     </programlisting>
    </informalexample>
    
    <para>
     Смотрите более подробно: <link linkend="warn.float-precision">предупреждение о точности чисел
     с плавающей точкой</link>.
    </para>
   </warning>
  </sect3>
   
  <sect3 xml:id="language.types.integer.casting.from-string">
   <title>Из строк</title>

   <simpara>
    Смотрите <link linkend="language.types.string.conversion">Преобразование строк в числа</link>
   </simpara>
  </sect3>
   
  <sect3 xml:id="language.types.integer.casting.from-other">
   <title>Из других типов</title>

   <caution>
    <simpara>
     Для других типов поведение преобразования в <type>integer</type> не определено.
     <emphasis>Не полагайтесь</emphasis> на любое наблюдаемое поведение,
     так как оно может измениться без предупреждения.
    </simpara>
   </caution>
  </sect3>

 </sect2>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
