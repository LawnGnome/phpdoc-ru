<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.3 Maintainer: tronic Status: ready -->
<!-- $Revision: 1.4 $ -->
 <sect1 xml:id="language.oop5.iterations" xmlns="http://docbook.org/ns/docbook">
  <title>Итераторы объектов</title>
  <para>
   PHP 5 предоставляет механизм итераторов для получения
   списка всех свойств какого-либо объекта, например, для
   использования совместно с оператором <xref 
   linkend="control-structures.foreach" />. По умолчанию,
   в итерации будут участвовать все свойства, объявленные
   как public.
  </para>

  <example>
   <title>Итерация простого объекта</title>
   <programlisting role="php">
<![CDATA[
<?php

class MyClass {
  public $var1 = 'value 1';
  public $var2 = 'value 2';
  public $var3 = 'value 3';

  protected $protected = 'protected';
  private   $private   = 'private';

}

$class = new MyClass();

foreach($class as $key => $value) {
  print "$key => $value\n";
}
]]>
   </programlisting>
   <para>
     Результат:
   </para>
   <screen role="php">
<![CDATA[
var1 => value 1
var2 => value 2
var3 => value 3
]]>
   </screen>

  </example>

 <para>
  Как показывает результат, <xref linkend="control-structures.foreach" />
  проитерировал все принадлежащие объекту public-свойства.
  Кроме того, программист может <varname>включить (implement)</varname>
  в свой класс один из внутренних <xref linkend="language.oop5.interfaces" /> PHP 5,
  именуемый <varname>Iterator</varname>. Это позволит программисту самому определить,
  каким именно образом будет осуществляться итерация объекта.
 </para>

  <example>
   <title>Объект Iteration, включающий интерфейс Iterator</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyIterator implements Iterator {

  private $var = array();

  public function __construct($array) {
    if (is_array($array) ) {
      $this->var = $array;
    }
  }

  public function rewind() {
    echo "перемотка в начало\n";
    reset($this->var);
  }

  public function current() {
    $var = current($this->var);
    echo "текущий: $var\n";
    return $var;
  }

  public function key() {
    $var = key($this->var);
    echo "ключ: $var\n";
    return $var;
  }

  public function next() {
    $var = next($this->var);
    echo "следующий: $var\n";
    return $var;
  }

  public function valid() {
    $var = $this->current() !== false;
    echo "верный: {$var}\n";
    return $var;
  }

}

$values = array(1,2,3);
$it = new MyIterator($values);

foreach ($it as $a => $b) {
  print "$a: $b\n";
}
]]>
   </programlisting>
   <para>
     Результатом выполнения этого кода станет:
   </para>
   <screen role="php">
<![CDATA[
перемотка в начало
текущий: 1
верный: 1
текущий: 1
ключ: 0
0: 1
следующий: 2
текущий: 2
верный: 1
текущий: 2
ключ: 1
1: 2
следующий: 3
текущий: 3
верный: 1
текущий: 3
ключ: 2
2: 3
следующий:
текущий:
верный:
]]>
   </screen>

  </example>

  <para>
   Программист также может объявить класс так, чтобы ему
   не пришлось описывать все методы, перечисленные в интерфейсе
   <varname>Iterator</varname>, включая интерфейс PHP 5 <varname>IteratorAggregate</varname>.
  </para>

  <example>
   <title>Объект Iteration, включающий интерфейс IteratorAggregate</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyCollection implements IteratorAggregate {
  private $items = array();
  private $count = 0;

  /* Required definition of interface IteratorAggregate */
  public function getIterator() {
    return new MyIterator($this->items);
  }

  public function add($value) {
    $this->items[$this->count++] = $value;
  }

}

$coll = new MyCollection();
$coll->add('value 1');
$coll->add('value 2');
$coll->add('value 3');

foreach ($coll as $key => $val) {
  echo "key/value: [$key -> $val]\n\n";
}

?>
</pre>
]]>
   </programlisting>
   <para>
     Результат:
   </para>
   <screen role="php">
<![CDATA[
rewinding
current: value 1
valid: 1
current: value 1
key: 0
key/value: [0 -> value 1]

next: value 2
current: value 2
valid: 1
current: value 2
key: 1
key/value: [1 -> value 2]

next: value 3
current: value 3
valid: 1
current: value 3
key: 2
key/value: [2 -> value 3]

next:
current:
valid:
]]>
   </screen>

  </example>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
