<?xml version="1.0" encoding="utf-8" ?>
<!-- EN-Revision: 313136 Maintainer: irker Status: ready -->
<!-- $Revision$ -->
<!-- Reviewed: yes -->
<sect1 xml:id="language.oop5.patterns" xmlns="http://docbook.org/ns/docbook">
 <title>Шаблоны проектирования</title>
 <para>
  Шаблоны - это способ описания оптимальных методов и хороших
  дизайнов проектирования. Они предоставляют универсальные пути
  решения общих проблем программирования.
 </para>

 <sect2 xml:id="language.oop5.patterns.factory">
  <title>Фабрика (Factory)</title>
  <para>
   Шаблон Фабрика позволяет создавать объекты во время работы программы.
   Этот шаблон называется Фабрикой потому, что он отвечает за
   производство объекта. Параметризированная фабрика принимает в
   качестве аргумента имя класса, объект которого создается.
  </para>
  <example>
   <title>Параметризированный фабричный метод</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    // Параметризированный фабричный метод
    public static function factory($type)
    {
        if (include_once 'Drivers/' . $type . '.php') {
            $classname = 'Driver_' . $type;
            return new $classname;
        } else {
            throw new Exception('Драйвер не найден');
        }
    }
}
?>
]]>
   </programlisting>
   <para>
    Определение этого метода в классе позволяет драйверам быть
    загруженными "на лету". В случае, если класс <literal>Example</literal>
    был бы классом абстрактного доступа к базе данных, то загрузка
    драйвера <literal>MySQL</literal> и <literal>SQLite</literal>
    может быть выполнена следующим образом:
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// Загрузка драйвера MySQL
$mysql = Example::factory('MySQL');

// Загрузка драйвера SQLite
$sqlite = Example::factory('SQLite');
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.patterns.singleton">
  <title>Синглтон (Singleton)</title>
  <para>
   Шаблон проектирования Синглтон применяется в тех ситуациях,
   когда нужно получить единственный экземпляр класса. Синглтон является
   одним из четырех("Gang of Four") основных создающих шаблонов.
  </para>
  <para>Синглтон обычно применяется в классах для баз данных, логирования, контроллеров(Front
   Controller) и объектах, определяющих запросы и ответы(Request и Response).
  </para>

  <example>
   <title xml:id="language.oop5.patterns.singleton.examples.basic">Пример Синглтона</title>
   <programlisting role="php"><![CDATA[
<?php
class Example
{
    private static $instance;
    private $count = 0;

    private function __construct()
    {
    }

    public static function singleton()
    {
        if (!isset(self::$instance)) {
            echo 'Создание нового экземпляра.';
            $className = __CLASS__;
            self::$instance = new $className;
        }
        return self::$instance;
    }

    public function increment()
    {
        return $this->count++;
    }

    public function __clone()
    {
        trigger_error('Клонирование запрещено.', E_USER_ERROR);
    }

    public function __wakeup()
    {
        trigger_error('Десериализация запрещена.', E_USER_ERROR);
}

?>
]]>
   </programlisting>
   <para>Пример ниже иллюстрирует использование Синглтона</para>
   <programlisting role="php"><![CDATA[
<?php
$singleton = Example::singleton(); // выведет "Создание нового экземпляра."
echo $singleton->increment(); // 0
echo $singleton->increment(); // 1

$singleton = Example::singleton(); // вернет тот же самый экземпляр
echo $singleton->increment(); // 2
echo $singleton->increment(); // 3

// все строки ниже вызывают неисправимую ошибку
$singleton2 = new Example;
$singleton3 = clone $singleton;
$singleton4 = unserialize(serialize($singleton));
?>
]]>
   </programlisting>
  </example>
  <warning xml:id="warn.singleton.controversy">
   <para>
    Паттерн Синглтон является одним из наиболее противоречивых паттернов. Критики утверждают, что
    Синглтоны вводят глобальные состояния при их применении и тесно связывают Синглтон
    и использующие его классы. Это приводит к скрытой зависимости и неожиданным побочным эффектам,
    что в свою очередь приводит к коду, который сложнее тестировать и поддерживать.
   </para>
   <para>
    Критики также утверждают, что не имеет смысла использовать Синглтон в архитектурах "ничего общего" (Shared Nothing Architecture), таких
 как PHP, где объекты являются уникальными в пределах запроса и никак иначе. Проще и аккуратнее
    создавать структуры взаимосвязанных объектов с помощью шаблонов Строителей(Builders) и Фабрики(Factory) за один раз
 в начале запроса.
   </para>
   <para>
    Синглтоны также нарушают некоторые из "Жестких" принципов ООП проектирования и Закон Деметры.
    Синглтоны нельзя сериализовывать. Они не могут быть подклассами (до PHP 5.3) и не будут собираться
 сборщиком мусора из-за того, что экземпляр хранится в статическом атрибуте Синглтона.
   </para>
  </warning>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
