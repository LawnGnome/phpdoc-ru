<?xml version="1.0" encoding="utf-8" ?>
<!-- EN-Revision: n/a Maintainer: shein Status: old -->
<!-- $Revision$ -->
<sect1 xml:id="language.oop5.patterns" xmlns="http://docbook.org/ns/docbook">
 <title>Шаблоны проектирования</title>
 <para>
  Шаблоны - это способ описания оптимальных методов и хороших
  дизайнов проектирования. Они предоставляют универсальные пути
  решения общих проблем программирования.
 </para>

 <sect2 xml:id="language.oop5.patterns.factory">
  <title>Фабрика (Factory)</title>
  <para>
   Шаблон Фабрика позволяет создавать объекты во время работы программы.
   Этот шаблон называется Фабрикой потому, что он отвечает за
   производство объекта. Параметризированная фабрика принимает в 
   качестве аргумента имя класса, объект которого создается.
  </para>
  <example>
   <title>Параметризированный фабричный метод</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    // Параметризированный фабричный метод
    public static function factory($type)
    {
        if (include_once 'Drivers/' . $type . '.php') {
            $classname = 'Driver_' . $type;
            return new $classname;
        } else {
            throw new Exception ('Драйвер не найден');
        }
    }
}
?>
]]>
   </programlisting>
   <para>
    Определение этого метода в классе позволяет драйверам быть
    загруженными "на лету". В случае, если класс <literal>Example</literal>
    был бы классом абстрактного доступа к базе данных, то загрузка
    драйвера <literal>MySQL</literal> и <literal>SQLite</literal>
    может быть выполнена следующим образом:
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// Загрузка драйвера MySQL
$mysql = Example::factory('MySQL');

// Загрузка драйвера SQLite
$sqlite = Example::factory('SQLite');
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.patterns.singleton">
  <title>Синглтон (Singleton)</title>
  <para>
   Шаблон проектирования Синглтон применяется в тех ситуациях,
   когда нужно получить единственный экземпляр класса.
   Большинство примеров, связанных с этим - это взаимодействие с
   базой данных. Реализация этого шаблона позволяют
   программисту создать единственный экземпляр класса, к которому
   будут иметь доступ остальные объекты.
  </para>
  <example>
   <title>Функция Синглтон</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    // Содержит экземпляр класса
    private static $instance;
    
    // Закрытый конструктор; предотвращает прямой доступ к
    // созданию объекта
    private function __construct() 
    {
        echo 'Я конструктор';
    }

    // Метод синглтон
    public static function singleton() 
    {
        if (!isset(self::$instance)) {
            $c = __CLASS__;
            self::$instance = new $c;
        }

        return self::$instance;
    }
    
    // Метод для примера
    public function bark()
    {
        echo 'Гав!';
    }

    // Предотвращает клонирование экземпляра класса
    public function __clone()
    {
        trigger_error('Клонирование запрещено.', E_USER_ERROR);
    }

}

?>
]]>
   </programlisting>
   <para>
    Позволяет вернуть единственный экземпляр класса
    <literal>Example</literal>
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// Такой вариант завершится неудачей, так как конструктор
// объявлен как private
$test = new Example;

// Это всегда возвращает единственный экземпляр класса
$test = Example::singleton();
$test->bark();

// Это вызовет ошибку E_USER_ERROR.
$test_clone = clone $test;

?>
]]>
   </programlisting>
  </example>
 </sect2>

</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
