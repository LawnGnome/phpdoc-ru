<?xml version="1.0" encoding="utf-8" ?>
<!-- EN-Revision: n/a Maintainer: shein Status: old -->
<!-- $Revision$ -->
 <sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
  <title>Область видимости</title>
  <para>
   Область видимости свойства или метода может быть определена путем
   использования следующих ключевых слов в объявлении: public, protected
   или private. Доступ к свойствам и методам классам, объявленным как public
   (общедоступный), может происходить из любого места. Модификатор protected
   (защищенный) позволяет иметь доступ наследуемым и родительским классам
   (а, также классу, в котором определен сам член класса). Модификатор
   private (закрытый) ограничивает область видимости так, что только класс,
   где объявлен сам элемент, имеет к нему доступ.
  </para>
  <sect2 xml:id="language.oop5.visiblity-members">
   <title>Область видимости свойств</title>
   <para>
   Свойства класса должны быть определены через модификаторы public, private,
   или protected.
   </para>
   <para>
    <example>
     <title>Объявление свойства класса</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Определение MyClass
 */
class MyClass
{
    public $public = 'Общий';
    protected $protected = 'Защищенный';
    private $private = 'Закрытый';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj = new MyClass();
echo $obj->public; // Работает
echo $obj->protected; // Неисправимая ошибка
echo $obj->private; // Неисправимая ошибка
$obj->printHello(); // Выводит Общий, Защищенный и Закрытый


/**
 * Определение MyClass2
 */
class MyClass2 extends MyClass
{
    // Мы можем переопределить public и protected методы, но не private
    protected $protected = 'Защищенный2';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj2 = new MyClass2();
echo $obj2->public; // Работает
echo $obj2->private; // Неопределен
echo $obj2->protected; // Неисправимая ошибка
$obj2->printHello(); // Выводит Общий, Защищенный2 и Закрытый

?> 
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <simpara>
     Метод объявления переменной через ключевое слово <emphasis>var</emphasis>,
     принятый в PHP 4, до сих пор поддерживается в целях совместимости (как
     синоним ключевого слова public). В версиях PHP 5 ниже 5.1.3 такое
     использование выводит предупреждение <constant>E_STRICT</constant>.
    </simpara>
   </note>
  </sect2>
  <sect2 xml:id="language.oop5.visiblity-methods">
   <title>Область видимости метода</title>
   <para>
    Методы класса должны быть определены через модификаторы public, private,
    или protected. Методы, где определение модификатора отсутствует,
    определяются как public.
   </para>
   <para>
    <example>
     <title>Объявление метода</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Определение MyClass
 */
class MyClass
{
    // Объявление общедоступного конструктора
    public function __construct() { }

    // Объявление общедоступного метода
    public function MyPublic() { }

    // Объявление защищенного метода
    protected function MyProtected() { }

    // Объявление закрытого метода
    private function MyPrivate() { }

    // Это общедоступный метод
    function Foo()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate();
    }
}

$myclass = new MyClass;
$myclass->MyPublic(); // Работает
$myclass->MyProtected(); // Неисправимая ошибка
$myclass->MyPrivate(); // Неисправимая ошибка
$myclass->Foo(); // Работает общий, защищенный и закрытый


/**
 * Определение MyClass2
 */
class MyClass2 extends MyClass
{
    // Это общедоступный метод
    function Foo2()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate(); // Неисправимая ошибка
    }
}

$myclass2 = new MyClass2;
$myclass2->MyPublic(); // Работает
$myclass2->Foo2(); // Работает общий и защищенный, закрытый не работает

class Bar 
{
    public function test() {
        $this->testPrivate();
        $this->testPublic();
    }

    public function testPublic() {
        echo "Bar::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Bar::testPrivate\n";
    }
}

class Foo extends Bar 
{
    public function testPublic() {
        echo "Foo::testPublic\n";
    }
    
    private function testPrivate() {
        echo "Foo::testPrivate\n";
    }
}

$myFoo = new foo();
$myFoo->test(); // Bar::testPrivate 
                // Foo::testPublic
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
