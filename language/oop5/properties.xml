<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 339448 Maintainer: irker Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->
<sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
 <title>Свойства</title>

 <para>
  Переменные, которые являются членами класса, называются "свойства".
  Также их называют, используя другие термины,
  такие как "аттрибуты" или "поля", но в рамках этой документации,
  мы будем называть их свойствами.
  Они определяются с помощью ключевых слов <literal>public</literal>,
  <literal>protected</literal>, или <literal>private</literal>, следуя правилам
  правильного описания переменных. Это описание может содержать инициализацию, но
  инициализация должна применяться для константных значений - то есть, переменные должны быть
  вычислены во время компиляции и не должны зависеть
  от информации программы во время выполнения для их вычисления.
 </para>
 <para>
  Смотри <xref linkend="language.oop5.visibility" /> для получения
  информации о применении
  <literal>public</literal>, <literal>protected</literal>,
  и <literal>private</literal>.
 </para>
 <note>
  <para>
   Для того, чтобы поддерживать обратную совместимость с PHP 4, PHP 5
   по-прежнему позволяет использовать ключевое слово <literal>var</literal> при
   определении свойств вместо (или в дополнении к)
   <literal>public</literal>, <literal>protected</literal>,
   или <literal>private</literal>. Однако, <literal>var</literal> больше не требуется.
   В версиях PHP с 5.0 по 5.1.3, использование
   <literal>var</literal> считалось устаревшим
   вызывало <constant>E_STRICT</constant> предупреждение, но с PHP
   5.1.3 больше не считается устаревшим и не выдает предупреждения.
  </para>
  <para>
   Если, для определения свойства, вы используете <literal>var</literal> вместо
   одного из: <literal>public</literal>, <literal>protected</literal>,
   или <literal>private</literal>, тогда PHP 5 будет определять свойство
   как <literal>public</literal>.
  </para>
 </note>
 <para>
  В пределах методов класса доступ к нестатическим свойствам может быть
  получен с помощью <literal>-&gt;</literal> (объектного оператора):
  <varname>$this-&gt;property</varname> (где <literal>property</literal> - имя свойства).
  Доступ к статическим свойствам может быть получен с помощью <literal>::</literal>
  (двойного двоеточия): <varname>self::$property</varname>. Подробнее о различиях
  между статическими и нестатическими свойствами смотрите в разделе
  "<link linkend="language.oop5.static">Ключевое слово Static</link>"
  для получения большей информации.
 </para>
 <para>
  Псевдо-переменная <varname>$this</varname> доступна внутри
  любого метода класса, когда этот метод вызывается в пределах объекта.
  <varname>$this</varname> - это ссылка на вызываемый объект
  (обычно, объект, которому принадлежит метод, но
  возможно и другого объекта, если метод вызван
  <link linkend="language.oop5.static">статически</link> из контекста второго
  объекта).
 </para>

 <para>
  <example>
   <title>Определение свойств</title>
   <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   // Корректное определение свойства начиная с PHP 5.6.0:
   public $var1 = 'hello ' . 'world';
   // Корректное определение свойства начиная с PHP 5.3.0:
   public $var2 = <<<EOD
hello world
EOD;
   // Корректное определение свойства начиная с PHP 5.6.0:
   public $var3 = 1+2;
   // Некорректное определение свойств:
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // правильное определение свойств:
   public $var6 = myConstant;
   public $var7 = array(true, false);

   // Корректное определение свойства начиная с PHP 5.3.0:
   public $var8 = <<<'EOD'
hello world
EOD;
}
?>
]]>
   </programlisting>
  </example>
 </para>

 <note>
  <para>
   Существуют несколько интересных функций для обработки классов и объектов. Вы
   можете их увидеть тут
   <link linkend="ref.classobj">Class/Object Functions</link>.
  </para>
 </note>

 <para>
  Начиная с PHP 5.3.0
   <link linkend="language.types.string.syntax.heredoc">heredocs</link> и
  <link linkend="language.types.string.syntax.nowdoc">nowdocs</link>
  могут быть использованы в любом статическом контексте данных, включая
  определение свойств.
  <example>
   <title>Пример использования nowdoc для инициализации свойств</title>
   <programlisting role="php">
<![CDATA[
<?php
class foo {
   // As of PHP 5.3.0
   public $bar = <<<'EOT'
bar
EOT;
   public $baz = <<<EOT
baz
EOT;
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <note>
  <para>
   Поддержка Nowdoc и Heredoc была добавлена в PHP 5.3.0.
  </para>
 </note>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
