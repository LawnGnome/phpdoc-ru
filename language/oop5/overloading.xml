<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 320521 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->
 <sect1 xml:id="language.oop5.overloading" xmlns="http://docbook.org/ns/docbook">
  <title>Перегрузка</title>
  
  <para>
   Перегрузка в PHP означает возможность динамически <quote>создавать</quote>
   свойства и методы. Эти динамические сущности обрабатываются с
   помощью "волшебных" методов, которые можно создать в классе для
   различных видов действий.
  </para>
 
  <para>
   Методы перегрузки вызываются при взаимодействии с теми свойствами
   или методами, которые не были объявлены или не <link 
   linkend="language.oop5.visibility">видны</link> в текущей области
   видимости. Далее в этом разделе мы будем использовать термины
   <quote>недоступные свойства</quote> или <quote>недоступные методы</quote> 
   для отражения этой комбинации объявления и области видимости.
  </para>

  <para>
   Все методы перегрузки должны быть объявлены как <literal>public</literal>.
  </para>

  <note>
   <para>
    Ни один аргумент не может быть передан
    <link linkend="functions.arguments.by-reference">по ссылке
    </link> в эти "волшебные" методы.
   </para>
  </note>

  <note>
   <para>
    Интерпретация <quote>перегрузки</quote> в PHP отличается
    от остальных объектно-ориентированных языков. Традиционно
    перегрузка означает возможность иметь множество одноименных методов
    с разным количеством или различными типами аргументов.
   </para>
  </note>


  <sect2 xml:id="language.oop5.overloading.changelog">
   &reftitle.changelog;
   <para>
    <informaltable>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>&Version;</entry>
        <entry>&Description;</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>5.3.0</entry>
        <entry>
         Добавлен метод <function>__callStatic</function>.
         Добавлено предупреждение об усилении публичной видимости и не-статичном объявлении.
        </entry>
       </row>
       <row>
        <entry>5.1.0</entry>
        <entry>
         Добавлены методы <function>__isset</function> и <function>__unset</function>.
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>
  </sect2>


  <sect2 xml:id="language.oop5.overloading.members">
   <title>Перегрузка свойств</title>

   <methodsynopsis>
    <type>void</type><methodname>__set</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>mixed</type><methodname>__get</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>bool</type><methodname>__isset</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>void</type><methodname>__unset</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>

   <para>
    Метод <function>__set</function> будет выполнен при записи
    данных в недоступные свойства.
   </para>

   <para>
    Метод <function>__get</function> будет выполнен при чтении
    данных из недоступных свойств.
   </para>

   <para>
    Метод <function>__isset</function> будет выполнен при
    использовании <function>isset</function> или <function>empty</function>
    на недоступных свойствах.
   </para>

   <para>
    Метод <function>__unset</function> будет выполнен при вызове
    <function>unset</function> на недоступном свойстве.
   </para>

   <para>
    Аргумент <varname>$name</varname> представляет собой имя
    вызываемого свойства. Метод <function>__set</function>
    содержит аргумент <varname>$value</varname>, представляющий
    собой значение, которое будет записано в свойство с именем
    <varname>$name</varname>.
   </para>

   <para>
    Перегрузка свойств работает только в контексте объекта.
    Данные магические методы не будут вызваны в статическом контексте.
    Поэтому данные методы не должны объявляться
    <link linkend="language.oop5.static">статичными</link>. 
    Начиная с версии PHP 5.3.0, при объявлении "волшебного" метода в 
    качестве <literal>static</literal> будет показано предупреждение.
   </para>

   <note>
    <para>
     Возвращаемое значение метода <function>__set</function> будет
     проигнорировано из-за способа обработки в PHP оператора присваивания.
     Аналогично, <function>__get</function> никогда не вызовется при
     цепных присваиваниях, например, таких:
     <literal><![CDATA[ $a = $obj->b = 8; ]]></literal>
    </para>
   </note>

   <note>
    <para>
     Невозможно использовать перегруженные свойства в других
     языковых конструкциях, кроме <function>isset</function>. 
     Это означает, что если на перегруженном свойстве будет вызвана
     конструкция <function>empty</function>, то перегруженный метод не будет
     вызван.
    </para>
    <para>
     Для обхода этого ограничения можно скопировать перегруженное
     свойство в локальную переменную и затем применить к ней 
     <function>empty</function>.
    </para>
   </note>

   <example>
    <title>
     Перегрузка свойств с помощью методов <function>__get</function>,
     <function>__set</function>, <function>__isset</function>
     и <function>__unset</function>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
class PropertyTest 
{
    /**  Место хранения перегружаемых данных.  */
    private $data = array();

    /**  Перегрузка не применяется к объявленным свойствам.  */
    public $declared = 1;

    /**  Здесь перегрузка будет использована только при доступе вне класса.  */
    private $hidden = 2;

    public function __set($name, $value) 
    {
        echo "Установка '$name' в '$value'\n";
        $this->data[$name] = $value;
    }

    public function __get($name) 
    {
        echo "Получение '$name'\n";
        if (array_key_exists($name, $this->data)) {
            return $this->data[$name];
        }

        $trace = debug_backtrace();
        trigger_error(
            'Неопределенное свойство в __get(): ' . $name .
            ' в файле ' . $trace[0]['file'] .
            ' на строке ' . $trace[0]['line'],
            E_USER_NOTICE);
        return null;
    }

    /**  Начиная с версии PHP 5.1.0  */
    public function __isset($name) 
    {
        echo "Установлено ли '$name'?\n";
        return isset($this->data[$name]);
    }

    /**  Начиная с версии PHP 5.1.0  */
    public function __unset($name) 
    {
        echo "Уничтожение '$name'\n";
        unset($this->data[$name]);
    }

    /**  Не "волшебный" метод, просто для примера. */
    public function getHidden() 
    {
        return $this->hidden;
    }
}


echo "<pre>\n";

$obj = new PropertyTest;

$obj->a = 1;
echo $obj->a . "\n\n";

var_dump(isset($obj->a));
unset($obj->a);
var_dump(isset($obj->a));
echo "\n";

echo $obj->declared . "\n\n";

echo "Давайте поэкспериментируем с private свойством 'hidden':\n";
echo "Private свойства видны внутри класса, поэтому __get() не используется...\n";
echo $obj->getHidden() . "\n";
echo "Private свойства не видны вне класса, поэтому __get() используется...\n";
echo $obj->hidden . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Установка 'a' в '1'
Получение 'a'
1

Установлено ли 'a'?
bool(true)
Уничтожение 'a'
Установлено ли 'a'?
bool(false)

1

Давайте поэкспериментируем с private свойством 'hidden':
Private свойства видны внутри класса, поэтому __get() не используется...
2
Private свойства не видны вне класса, поэтому __get() используется...
Получение 'hidden'


Notice:  Неопределенное свойство в __get(): hidden в файле <file> на строке 70 в <file> на строке 29
]]>
    </screen>

   </example>
  </sect2>

  <sect2 xml:id="language.oop5.overloading.methods">
   <title>Перегрузка методов</title>

   <methodsynopsis>
    <type>mixed</type><methodname>__call</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>array</type><parameter>arguments</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>mixed</type><methodname>__callStatic</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>array</type><parameter>arguments</parameter></methodparam>
   </methodsynopsis>

   <para>
    В контексте объекта при вызове недоступных методов
    вызывается метод <function>__call</function>.
   </para>

   <para>
    В статическом контексте при вызове недоступных методов
    вызывается метод <function>__callStatic</function>.
   </para>

   <para>
    Аргумент <varname>$name</varname> представляет собой имя 
    вызываемого метода. Аргумент <varname>$arguments</varname>
    представляет собой числовой массив, содержащий параметры,
    переданные в вызываемый метод <varname>$name</varname>.
   </para>

   <example>
    <title>
     Перегрузка методов с помощью методов <function>__call</function>
     и <function>__callStatic</function>
    </title>
    <programlisting role="php">
  <![CDATA[
<?php
class MethodTest {
    public function __call($name, $arguments) {
        // Замечание: значение $name регистрозависимо.
        echo "Вызов метода '$name' "
             . implode(', ', $arguments). "\n";
    }

    /**  Начиная с версии PHP 5.3.0  */
    public static function __callStatic($name, $arguments) {
        // Замечание: значение $name регистрозависимо.
        echo "Вызов статического метода '$name' "
             . implode(', ', $arguments). "\n";
    }
}

$obj = new MethodTest;
$obj->runTest('в контексте объекта');

MethodTest::runTest('в статическом контексте');  // Начиная с версии PHP 5.3.0
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Вызов метода 'runTest' в контексте объекта
Вызов статического метода 'runTest' в статическом контексте
]]>
    </screen>
   </example>

  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
