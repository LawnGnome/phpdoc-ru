<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.3 Maintainer: tronic Status: ready -->
<!-- $Revision: 1.3 $ -->
 <sect1 xml:id="language.oop5.overloading" xmlns="http://docbook.org/ns/docbook">
  <title>Перегрузка</title>

  <para>
   Вызовы методов, как и обращения к свойствам объекта, могут
   быть перегружены с использованием методов __call, __get и __set.
   Эти методы будут срабатывать только в том случае, если объект
   или наследуемый объект не содержат свойства или метода,
   к которому осуществляется доступ.
  </para>

  <sect2 xml:id="language.oop5.overloading.members">
   <title>Перегрузка свойств</title>

   <methodsynopsis>
    <type>void</type><methodname>__set</methodname>
    <methodparam><type>string</type><parameter>имя</parameter></methodparam>
    <methodparam><type>mixed</type><parameter>значение</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>void</type><methodname>__get</methodname>
    <methodparam><type>mixed</type><parameter>имя</parameter></methodparam>
   </methodsynopsis>

   <para>
    С помощью этих методов обращения к свойствам класса могут быть перегружены
    с целью выполнения произвольного кода, описанного в классе.
    В аргументе <varname>имя</varname> передаётся имя свойства, к которому
    производится обращение. Аргумент <varname>значение</varname> метода __set()
    должен содержать значение, которое будет присвоено свойству класса
    с именем <varname>имя</varname>.
   </para>

   <example>
    <title>Пример перегрузки с использование __get и __set</title>
    <programlisting role="php">
<![CDATA[
<?php
class Setter {
  public $n;
  private $x = array("a" => 1, "b" => 2, "c" => 3);

  function __get($nm) {
    print "ЧИтаем [$nm]\n";

    if (isset($this->x[$nm])) {
      $r = $this->x[$nm];
      print "Получили: $r\n";
      return $r;
    } else {
      print "Ничего!\n";
    }
  }

  function __set($nm, $val) {
    print "Пишем $val в [$nm]\n";

    if (isset($this->x[$nm])) {
      $this->x[$nm] = $val;
      print "OK!\n";
    } else {
      print "Всё плохо!\n";
    }
  }
}

$foo = new Setter();
$foo->n = 1;
$foo->a = 100;
$foo->a++;
$foo->z++;
var_dump($foo);
?>
]]>
    </programlisting>
    <para>
     Результатом выполнения будет:
    </para>
    <screen role="php">
<![CDATA[
Пишем 100 в [a]
OK!
Читаем [a]
Получили: 100
Пишем 101 в [a]
OK!
Читаем [z]
Ничего!
Пишем 1 в [z]
Всё плохо!
object(Setter)#1 (2) {
  ["n"]=>
  int(1)
  ["x:private"]=>
  array(3) {
    ["a"]=>
    int(101)
    ["b"]=>
    int(2)
    ["c"]=>
    int(3)
  }
}
]]>
    </screen>

   </example>
  </sect2>

  <sect2 xml:id="language.oop5.overloading.methods">
   <title>Перегрузка методов</title>

   <methodsynopsis>
    <type>mixed</type><methodname>__call</methodname>
    <methodparam><type>string</type><parameter>имя</parameter></methodparam>
    <methodparam><type>array</type><parameter>аргументы</parameter></methodparam>
   </methodsynopsis>

   <para>
    С использованием этого метода, методы класса могут быть перегружены
    с целью выполнения произвольного кода, описанного в классе.
    В аргументе <varname>имя</varname> передаётся имя вызванного
    метода. Аргументы, которые были переданы методу при обращении,
    будут возвращены чере <varname>аргументы</varname>.
    Значение, возвращённое методом __call(), будет передано вызывающему оператору.
   </para>

   <example>
    <title>Пример перегрузки с использованием __call</title>
    <programlisting role="php">
  <![CDATA[
<?php
class Caller {
  private $x = array(1, 2, 3);

  function __call($m, $a) {
    print "Вызван метод $m :\n";
    var_dump($a);
    return $this->x;
  }
}

$foo = new Caller();
$a = $foo->test(1, "2", 3.4, true);
var_dump($a);
?>
]]>
    </programlisting>
    <para>
     Результатом выполнения будет:
    </para>
    <screen role="php">
<![CDATA[

Вызван метод test:
array(4) {
  [0]=>
  int(1)
  [1]=>
  string(1) "2"
  [2]=>
  float(3.4)
  [3]=>
  bool(true)
}
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
]]>
    </screen>
   </example>

  </sect2>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
