<?xml version="1.0" encoding="windows-1251"?>
<!-- EN-Revision: 1.4 Maintainer: tronic Status: ready -->
<!-- $Revision: 1.1 $ -->
 <sect1 id="language.oop5.paamayim-nekudotayim">
  <title>::</title>

  <para>
   "Paamayim Nekudotayim", или просто "двойное двоеточие".
   »спользу€ эту лексему, программист может обращатьс€ к
   <link linkend="language.oop5.constants">константам</link>,
   <link linkend="language.oop5.static">статическим</link> или
   перегруженным свойствам или методам класса.
  </para>

  <para>
   ѕри обращении к этим элементам извне класса, программист должен
   использовать им€ этого класса.
  </para>

  <para>
   "Paamayim Nekudotayim" на первый взгл€д может показатьс€ странным
   словосочетанием дл€ обозначени€ двойного двоеточи€. ќднако,
   во врем€ создани€ Zend Engine версии 0.5 (который входил в PHP3),
   Andi и Zeev выбрали именно это обозначение.
   "Paamayim Nekudotayim" действительно значит "двойное двоеточие". Ќа иврите.
   ѕросто это обозначение не мен€лось ни разу в течение всего
   времени разработки PHP.
  </para>

  <example>
   <title>»спользование :: извне объ€влени€ класса</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass {
  const CONST_VALUE = '«начение константы';
}
echo MyClass::CONST_VALUE;
?>
]]>
   </programlisting>
  </example>

  <para>
   ƒл€ обращени€ к к свойствам и методам изнутри объ€влени€ класса
   используютс€ ключевые слова <varname>self</varname> и <varname>parent</varname>.
  </para>

  <example>
   <title>»спользование :: изнутри объ€влени€ класса</title>
   <programlisting role="php">
<![CDATA[
<?php
class OtherClass extends MyClass {
  public static $my_static = 'статическа€ переменна€';

  public static function doubleColon() {
     echo parent::CONST_VALUE . "\n";
     echo self::$my_static . "\n";
  }
}

OtherClass::doubleColon();
?>
]]>
   </programlisting>
  </example>

  <para>
    огда дочерний класс перегружает методы, объ€вленные в классе-родителе,
   PHP не будет осуществл€ть автоматический вызов методов, принадлежащих
   классу-родителю. Ётот функционал возлагаетс€ на метод, перегружаемый
   в дочернем классе. ƒанное правило распростран€етс€ на <link
   linkend="language.oop5.decon">конструкторы и деструкторы</link>, <link
   linkend="language.oop5.overloading">перегруженные</link> и <link
   linkend="language.oop5.magic">"волшебные"</link> методы.
  </para>

  <example>
   <title>ќбращение к методу в родительском классе</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass {

  protected function myFunc() {
    echo "MyClass::myFunc()\n";
  }
}

class OtherClass extends MyClass {

  /* Override parent's definition */
  public function myFunc() {

    /* But still call the parent function */
    parent::myFunc();
    echo "OtherClass::myFunc()\n";
  }
}

$class = new OtherClass();
$class->myFunc();
?>
]]>
   </programlisting>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

