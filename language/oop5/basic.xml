<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 328095 Maintainer: irker Status: ready -->
<!-- Reviewed: yes -->
<!-- $Revision$ -->
<!-- Updated by: mch -->

 <sect1 xml:id="language.oop5.basic" xmlns="http://docbook.org/ns/docbook">
  <title>Основы</title>

  <sect2 xml:id="language.oop5.basic.class">
   <title>class</title>
   <para>
    Каждое определение класса начинается с ключевого слова <literal>class</literal>, затем
    следует имя класса, и далее пара фигурных скобок, которые заключают в себе определение
    свойств и методов этого класса.
   </para>
   <para>
    Именем класса может быть любое слово, которое не входит в список
    <link linkend="reserved">зарезервированных слов</link> PHP, начинающееся с буквы или
    символа подчеркивания и за которым следует любое количество букв, цифр или символов подчеркивания.
    Если задать эти правила в виде регулярного выражения, то получится следующее выражение:
    <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>.
   </para>
   <para>
    Класс может содержать собственные <link linkend="language.oop5.constants">константы</link>,
    <link linkend="language.oop5.properties">переменные</link> (называемые свойствами) и функции (называемые  методами).
   </para>
   <example>
    <title>Простое определение класса</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
    // объявление свойства
    public $var = 'значение по умолчанию';

    // объявление метода
    public function displayVar() {
        echo $this->var;
    }
}
?>
]]>
    </programlisting>
   </example>
   <para>
    Псевдо-переменная <varname>$this</varname> доступна в том случае,
    если метод был вызван в контексте объекта. <varname>$this</varname>
    является ссылкой на вызываемый объект. Обычно это тот объект, которому
    принадлежит вызванный метод, но может быть и другой объект, если метод был
    вызван <link linkend="language.oop5.static">статически</link> из контекста
    другого объекта. Это показано на следующих примерах:
   </para>
   <para>
    <example xml:id="language.oop5.basic.class.this">
     <title>Переменная <varname>$this</varname></title>
     <programlisting role="php">
<![CDATA[
<?php
class A
{
    function foo()
    {
        if (isset($this)) {
            echo '$this определена (';
            echo get_class($this);
            echo ")\n";
        } else {
            echo "\$this не определена.\n";
        }
    }
}

class B
{
    function bar()
    {
        // Замечание: следующая строка вызовет предупреждение, если включен параметр E_STRICT.
        A::foo();
    }
}

$a = new A();
$a->foo();

// Замечание: следующая строка вызовет предупреждение, если включен параметр E_STRICT.
A::foo();
$b = new B();
$b->bar();

// Замечание: следующая строка вызовет предупреждение, если включен параметр E_STRICT.
B::bar();
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
$this определена (A)
$this не определена.
$this определена (B)
$this не определена.
]]>
     </screen>
    </example>
   </para>
  </sect2>

  
  
  <sect2 xml:id="language.oop5.basic.new">
   <title>new</title>
   <para>
    Для создания экземпляра класса используется директива <literal>new</literal>.
    Новый объект всегда будет создан, за исключением случаев, когда он содержит 
    <link linkend="language.oop5.decon">конструктор</link>, в котором определен вызов
    <link linkend="language.exceptions">исключения</link> в случае ошибки.
    Рекомендуется определять классы до создания их экземпляров 
    (в некоторых случаях это обязательно).
   </para>
   <para>
    Если с директивой <literal>new</literal> используется строка (<type>string</type>), 
    содержащая имя класса, то будет создан новый экземпляр этого класса. Если
    имя находится в пространстве имен, то оно должно быть задано полностью.
   </para>
   <example>
    <title>Создание экземпляра класса</title>
    <programlisting role="php">
<![CDATA[
<?php
$instance = new SimpleClass();

// Это же можно сделать с помощью переменной:
$className = 'Foo';
$instance = new $className(); // Foo()
?>
]]>
    </programlisting>
   </example>
   <para>
    В контексте класса можно создать новый объект через
    <literal>new self</literal> и <literal>new parent</literal>.
   </para>
   <para>
    Когда происходит присвоение уже существующего экземпляра класса новой
    переменной, то эта переменная будет указывать на этот же экземпляр класса.
    Тоже самое происходит и при
    передаче экземпляра класса в функцию. Копию уже созданного объекта
    можно создать через ее <link linkend="language.oop5.cloning">клонирование</link>.
   </para>
   <example>
    <title>Присваивание объекта</title>
    <programlisting role="php">
<![CDATA[
<?php

$instance = new SimpleClass();

$assigned   =  $instance;
$reference  =& $instance;

$instance->var = '$assigned будет иметь это значение';

$instance = null; // $instance и $reference становятся null

var_dump($instance);
var_dump($reference);
var_dump($assigned);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
NULL
object(SimpleClass)#1 (1) {
   ["var"]=>
     string(30) "$assigned будет иметь это значение"
}
]]>
    </screen>
   </example>
   <para>
    В PHP 5.3.0 введены несколько новых методов создания экземпляров
    объекта:
   </para>
   <example>
    <title>Создание новых объектов</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    static public function getNew()
    {
        return new static;
    }
}

class Child extends Test
{}

$obj1 = new Test();
$obj2 = new $obj1;
var_dump($obj1 !== $obj2);

$obj3 = Test::getNew();
var_dump($obj3 instanceof Test);

$obj4 = Child::getNew();
var_dump($obj4 instanceof Child);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(true)
bool(true)
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.basic.extends">
   <title>extends</title>
   <para>
    Класс может наследовать методы и свойства другого класса используя
    ключевое слово <literal>extends</literal> при его описании. Невозможно наследовать несколько
    классов, один класс может наследовать только один базовый класс.
   </para>
   <para>
    Наследуемые методы и свойства могут быть переопределены (за исключением
    случаев, когда метод класса объявлен как <link linkend="language.oop5.final">final</link>)
    путем объявления их с теми же именами, как и в родительском классе.
    Существует возможность доступа к переопределенным методам или статическим 
    методам путем обращения к ним через
    <link linkend="language.oop5.paamayim-nekudotayim">parent::</link>
   </para>
   <para>
    Когда переопределяются методы число и типы аргументов должны оставаться
    такими же как и были, иначе PHP вызовет ошибку уровня <constant>E_STRICT</constant>.
    Это не относится к конструктору, который можно
    переопределить с другими параметрами.
   </para>
   <example>
    <title>Простое наследование классов</title>
    <programlisting role="php">
<![CDATA[
<?php
class ExtendClass extends SimpleClass
{
    // Переопределение метода родителя
    function displayVar()
    {
        echo "Расширенный класс\n";
        parent::displayVar();
    }
}

$extended = new ExtendClass();
$extended->displayVar();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Расширенный класс
значение по умолчанию
]]>
    </screen>
   </example>
  </sect2>

  
 </sect1>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
