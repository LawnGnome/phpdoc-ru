<?xml version="1.0" encoding="utf-8" ?>
<!-- $Revision$ -->
 <sect1 xml:id="language.oop5.typehinting" xmlns="http://docbook.org/ns/docbook">
  <title>Контроль типа</title>
  <para>
   PHP 5 предоставляет возможность использовать контроль типов. На данный момент
   функции имеют возможность заставлять параметры быть либо объектами (путем
   указания имени класса в прототипе функции), либо массивами (начиная с PHP 5.1).
   Однако, если <type>NULL</type> использовался как значение параметра по умолчанию,
   то это будет также допустимо в качестве аргумента для последующего вызова.
  </para>
  
  <example>
   <title>Пример контроля типов</title>
    <programlisting role="php">
<![CDATA[
<?php
// Тестовый класс
class MyClass
{
    /**
     * Тестовая функция
     *
     * Первый параметр должен быть объектом типа OtherClass
     */
    public function test(OtherClass $otherclass) {
        echo $otherclass->var;
    }


    /**
     * Другая тестовая функция
     *
     * Первый параметр должен быть массивом
     */
    public function test_array(array $input_array) {
        print_r($input_array);
    }
}

// Другой тестовый класс
class OtherClass {
    public $var = 'Hello World';
}
?>
]]>
   </programlisting>
   <para>
    В случае передачи аргумента неправильного типа результатом будет фатальная ошибка.
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// Экземпляры каждого класса
$myclass = new MyClass;
$otherclass = new OtherClass;

// Ошибка: Аргумент 1 должен быть экземпляром класса OtherClass
$myclass->test('hello');

// Ошибка: Аргумент 1 должен быть экземпляром класса OtherClass
$foo = new stdClass;
$myclass->test($foo);

// Ошибка: Аргумент 1 не должен быть null
$myclass->test(null);

// Работает: Выводит Hello World
$myclass->test($otherclass);

// Ошибка: Аргумент 1 должен быть массив
$myclass->test_array('a string');

// Работает: Выводит массив
$myclass->test_array(array('a', 'b', 'c'));
?>
]]>
   </programlisting>
   <para>
    Также, контроль типов работает и с функциями:
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// Пример класса
class MyClass {
    public $var = 'Hello World';
}

/**
 * Тестовая функция
 *
 * Первый параметр должен быть объект класса MyClass
 */
function MyFunction (MyClass $foo) {
    echo $foo->var;
}

// Работает
$myclass = new MyClass;
MyFunction($myclass);
?>
]]>
   </programlisting>
   <para>
    Контроль типов допускает значения NULL:
   </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Прием значения NULL */
function test(stdClass $obj = NULL) {

}

test(NULL);
test(new stdClass);

?>
]]>
   </programlisting>
  </example>
  <para>
   Контроль типа может быть использован только с типами <type>object</type> и
   <type>array</type> (начиная с PHP 5.1). Традиционный контроль типа для
   <type>int</type> и <type>string</type> не поддерживается.
  </para>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
