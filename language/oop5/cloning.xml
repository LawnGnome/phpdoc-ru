<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.2 Maintainer: tronic Status: ready -->
<!-- $Revision: 1.2 $ -->
 <sect1 id="language.oop5.cloning">
  <title>Клонирование объектов</title>
  
  <para>
   Создание копии объекта с абсолютно идентичными свойствами
   не всегда является приемлемым вариантом. Хорошим примером
   необходимости копирования конструкторов может послужить
   ситуация, когда у вас есть объект, представляющий собой
   окно GTK и содержащий ресурс-идентификатор этого окна; когда
   вы создаете копию этого объекта, вам может понадобиться,
   чтобы копия объекта содержала ресурс-идентификатор
   нового окна. Другим примером может послужить ситуация,
   когда ваш объект содержит ссылку на какой-либо другой используемый
   объект и, когда вы создаёте копию ссылающегося объекта,
   вам нужно также создать новый экземпляр содержащегося объекта,
   так, чтобы копия объекта содержала собственный отдельный
   экземпляр содержащегося объекта.
  </para>

  <para>
   Копия объекта создается с использованием вызова clone
   (который вызывает метод __clone() объекта, если это возможно).
   Вызов метода __clone() не может быть осуществлён непосредственно.
  </para>

  <informalexample>
   <programlisting>
<![CDATA[
$copy_of_object = clone $object;
]]>
   </programlisting>
  </informalexample>

  <para>
   Когда программист запрашивает создание копии объекта, PHP 5 определит,
   был ли для этого объекта объявлен метод __clone() или нет. Если нет,
   будет вызван метод __clone(), объявленный по умолчанию, который
   скопирует все свойства объекта. Если метод __clone() был объявлен,
   создание копий свойств в копии объекта полностью возлагается на него.
   Для удобства, движок обеспечивает программиста функцией, которая
   импортирует все свойства из объекта-источника, так что программист
   может осуществить позначное копирование свойств и переопределять
   только необходимые.
  </para>

  <example>
   <title>Клонирование объекта</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyCloneable {
   static $id = 0;

   function MyCloneable() {
       $this->id = self::$id++;
   }

   function __clone() {
       $this->address = "Москва";
       $this->id = self::$id++;
   }
}

$obj = new MyCloneable();

$obj->name = "Привет";
$obj->address = "Самара";

print $obj->id . "\n";

$obj_cloned = clone $obj;

print $obj_cloned->id . "\n";
print $obj_cloned->name . "\n";
print $obj_cloned->address . "\n";
?> 
]]>
   </programlisting>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
