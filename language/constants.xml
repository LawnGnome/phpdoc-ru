<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 297028 Maintainer: shein Status: ready -->
<!-- Reviewed: yes -->
<!-- $Revision$ -->
 <chapter xml:id="language.constants" xmlns="http://docbook.org/ns/docbook">
  <title>Константы</title>

  <simpara>
   Константы - это идентификаторы (имена) простых значений. Исходя из их названия,
   нетрудно понять, что их значение не может изменяться в ходе выполнения скрипта
   (исключения представляют <link linkend="language.constants.predefined">"волшебные" 
   константы</link>, которые на самом деле не являются константами в полном смысле этого слова).
   Имена констант чувствительны к регистру. По принятому соглашению, имена констант 
   всегда пишутся в верхнем регистре.
  </simpara>
  <para>
   Имя константы должно соответствовать тем же правилам, что
   и другие имена в PHP. Правильное имя начинается с буквы или символа подчеркивания 
   и состоит из букв, цифр и подчеркиваний. Регулярное выражение для проверки правильности
   имени константы выглядит так:
   <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>
  </para>
  &tip.userlandnaming;
  <para>
   <example>
    <title>Правильные и неправильные имена констант</title>
    <programlisting role="php">
<![CDATA[
<?php

// Правильные имена констант
define("FOO",     "something");
define("FOO2",    "something else");
define("FOO_BAR", "something more");

// Неправильные имена констант
define("2FOO",    "something");

// Это корректное объявление, но лучше его не использовать:
// PHP однажды может зарегистрировать "волшебную" константу,
// которая сломает ваш скрипт
define("__FOO__", "something");

?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    Понятие "буквы" здесь - это символы a-z, A-Z,
    и другие символы с ASCII-кодами от 127 до 255 (0x7f-0xff).
   </simpara>
  </note>

  <simpara>
   Как и &link.superglobals;, константы доступны из любой области видимости.
   Вы можете использовать константы в любом месте вашего скрипта, не обращая
   внимания на текущую область видимости.
   Подробную информацию об областях видимости можно найти 
   <link linkend="language.variables.scope">здесь</link>.
  </simpara>

  <sect1 xml:id="language.constants.syntax">
   <title>Синтаксис</title>
   <simpara>
    Вы можете определить константу с помощью функции <function>define</function>
    или с помощью ключевого слова <literal>const</literal> вне объявления класса
    начиная с версии PHP 5.3.0. После того, как константа определена, ее значение
    не может быть изменено или аннулировано.
   </simpara>
   <simpara>
    Константы могут содержать только скалярные данные
    (<type>boolean</type>, <type>integer</type>, <type>float</type> и
    <type>string</type> типов). Возможно также определять константы типа
    <type>resource</type>, но этого следует избегать, так как это может
    привести к неожиданным результатам.
   </simpara>
   <simpara>
    Получить значение константы можно, указав ее имя. В отличие от переменных,
    вам <emphasis>не нужно</emphasis> предварять имя константы символом
    <literal>$</literal>.
    Также вы можете использовать функцию <function>constant</function> для
    получения значения константы, если вы формируете имя константы динамически.
    Используйте функцию <function>get_defined_constants</function> для получения
    списка всех объявленных констант.
   </simpara>
   <note>
    <simpara>
     Константы и (глобальные) переменные находятся в разных пространствах имен.
     Это означает, что, например, &true; и <varname>$TRUE</varname> являются
     совершенно разными вещами.
    </simpara>
   </note>
   <simpara>
    Если вы используете неопределенную константу, PHP предполагает, что
    вы имеете ввиду само имя константы, как если бы вы указали литерал типа
    <type>string</type> (CONSTANT вместо "CONSTANT"). При этом будет сгенерирована
    ошибка уровня <link linkend="ref.errorfunc">E_NOTICE</link>.
    Смотрите также главу руководства, которая разъясняет, почему
    <link linkend="language.types.array.foo-bar">$foo[bar]</link> - это неправильно
    (конечно, если вы перед этим не объявили <literal>bar</literal> как константу с
    помощью <function>define</function>). Если вы просто хотите проверить,
    определена ли константа, используйте функцию <function>defined</function>.
   </simpara>
   <para>
    Различия между константами и переменными:
    <itemizedlist>
     <listitem>
      <simpara>
       У констант нет приставки в виде знака доллара (<literal>$</literal>);
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Константы можно определить только с помощью функции
       <function>define</function>, а не присваиванием значения;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Константы могут быть определены и доступны в любом месте без учета
       области видимости;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Константы не могут быть переопределены или аннулированы после первоначального объявления; и
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Константы могут иметь только скалярные значения.
       </simpara>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    <example>
     <title>Определение констант</title>
     <programlisting role="php">
<![CDATA[
<?php
define("CONSTANT", "Здравствуй, мир.");
echo CONSTANT; // выводит "Здравствуй, мир."
echo Constant; // выводит "Constant" и предупреждение.
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    <example>
     <title>Определение констант с помощью ключевого слова <literal>const</literal></title>
     <programlisting role="php">
<![CDATA[
<?php
// Работает, начиная с версии PHP 5.3.0
const CONSTANT = 'Здравствуй, мир.';

echo CONSTANT;
?>
]]>
     </programlisting>
    </example>
   </para>

   <note>
    <para>
     В отличие от определения констант с помощью функции <function>define</function>,
     константы, объявленные с помощью ключевого слова <literal>const</literal>
     должны быть объявлены в самой верхней области видимости, потому что они
     определяются при компилировании скрипта. Это означает, что их нельзя объявлять
     внутри функций, циклов или выражений <literal>if</literal>.
    </para>
   </note>

   <simpara>
    Смотрите также <link linkend="language.oop5.constants">Константы классов</link>.
   </simpara>
  </sect1>
  
  <sect1 xml:id="language.constants.predefined">
   <title>"Волшебные" константы</title>

   <simpara>
    PHP предоставляет большой список <link linkend="reserved.constants">
    предопределенных констант</link> для каждого выполняемого скрипта. Многие из
    этих констант определяются различными модулями и будут присутствовать только
    в том случае, если эти модули доступны в результате динамической загрузки
    или в результате статической сборки.
   </simpara>
   
   <para>
    Есть семь волшебных констант, которые меняют свое значение в
    зависимости от контекста, в котором они используются.
    Например, значение <constant>__LINE__</constant> зависит от строки в скрипте,
    на которой эта константа указана. Специальные константы нечувствительны
    к регистру и их список приведен ниже:
   </para>
   <para>
    <table>
     <title>Некоторые "волшебные" константы PHP</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Имя</entry>
        <entry>Описание</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><constant>__LINE__</constant></entry>
        <entry>
         Текущий номер строки в файле.
        </entry>
       </row>
       <row>
        <entry><constant>__FILE__</constant></entry>
        <entry>
         Полный путь и имя текущего файла. Если используется внутри
         подключаемого файла, то возвращается имя данного файла.
         Начиная с версии PHP 4.0.2, <constant>__FILE__</constant>
         всегда содержит абсолютный путь с разрешенными символическими
         ссылками, тогда как в старых версиях в некоторых обстоятельствах
         возвращался относительный путь.
        </entry>
       </row>
       <row>
        <entry><constant>__DIR__</constant></entry>
        <entry>
         Директория файла.  Если используется внутри подключаемого файла,
         то возвращается директория этого файла. Это эквивалентно вызову
         <literal>dirname(__FILE__)</literal>. Возвращаемое имя директории
         не оканчивается на слэш, за исключением корневой директории
         (добавлена в PHP 5.3.0.)
        </entry>
       </row>
       <row>
        <entry><constant>__FUNCTION__</constant></entry>
        <entry>
         Имя функции. (Добавлена в PHP 4.3.0.) Начиная с PHP 5 эта константа
         возвращает имя функции точно так, как оно было объявлено (с учетом
         регистра). В PHP 4 это значение всегда было в нижнем регистре.
        </entry>
       </row>
       <row>
        <entry><constant>__CLASS__</constant></entry>
        <entry>
         Имя класса. (Добавлена в PHP 4.3.0.) Начиная с PHP 5 эта константа
         возвращает имя класса точно так, как оно было объявлено (с учетом
         регистра). В PHP 4 это значение всегда было в нижнем регистре.
        </entry>
       </row>
       <row>
        <entry><constant>__METHOD__</constant></entry>
        <entry>
         Имя метода класса. (Добавлена в PHP 5.0.0) Имя метода возвращается так,
         как оно было объявлено (с учетом регистра).
        </entry>
       </row>
       <row>
        <entry><constant>__NAMESPACE__</constant></entry>
        <entry>
         Имя текущего пространства имен (с учетом регистра). Эта константа
         определяется во время компиляции (Добавлена в версии PHP 5.3.0).
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Смотрите также
    <function>get_class</function>,
    <function>get_object_vars</function>,
    <function>file_exists</function>&listendand;
    <function>function_exists</function>.
   </para>
  </sect1>
 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
