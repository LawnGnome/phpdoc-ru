<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 324522 Maintainer: mch Status: ready -->
<!-- $Revision$ -->
<!-- Reviewed: yes -->

<sect1 xml:id="control-structures.continue" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>continue</literal></title>
 <?phpdoc print-version-for="continue"?>
 <simpara>
  <literal>continue</literal> используется внутри циклических структур для
  пропуска оставшейся части текущей итерации цикла и, при соблюдении условий,
  начала следующей итерации.
 </simpara>
 <note>
  <simpara>
   Заметим, что в PHP структура
   <link linkend="control-structures.switch">switch</link> считается
   циклической, и внутри нее может использоваться
   <literal>continue</literal>.
  </simpara>
 </note>
 <simpara>
  <literal>continue</literal> принимает необязательный числовой аргумент,
  который указывает на скольки уровнях вложенных циклов будет пропущена оставшаяся часть итерации.
 </simpara>
 <note>
  <para>
   <literal>continue 0;</literal> и <literal>continue 1;</literal> есть одно и то же, что и
   <literal>continue;</literal>.
  </para>
 </note>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
while (list($key, $value) = each($arr)) {
    if (!($key % 2)) { // пропуск нечетных чисел
        continue;
    }
    do_something_odd($value);
}

$i = 0;
while ($i++ < 5) {
    echo "Снаружи<br />\n";
    while (1) {
        echo "В середине<br />\n";
        while (1) {
            echo "Внутри<br />\n";
            continue 3;
        }
        echo "Это никогда не будет выведено.<br />\n";
    }
    echo "Это тоже.<br />\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Пропуск точки запятой после <literal>continue</literal> может привести
  к путанице. Пример как не надо делать.
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
for ($i = 0; $i < 5; ++$i) {
    if ($i == 2)
        continue
    print "$i\n";
}
?>
]]>
   </programlisting>
   <para>
    Ожидается, что результат будет такой:
   </para>
   <screen>
<![CDATA[
0
1
3
4
]]>
   </screen>
   <para>
    Но этот скрипт выведет следующее:
   </para>
   <screen>
<![CDATA[
2
]]>
   </screen>
   <para>
    Потому что выражение <literal>continue print "$i\n";</literal> воспринимается
    как единое выражение, и <function>print</function> вызыватеся только тогда, 
    когда выражение <literal>$i == 2</literal> истинно. (Возвращаемое значение от
    <literal>print</literal> передается к <literal>continue</literal> как
    числовой аргумент.)
   </para>
  </informalexample>
 </para>
 <para>
  <table>
   <title>Изменения, касающиеся оператора <literal>continue</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>5.4.0</entry>
      <entry>
       Убрана возможность задавать переменную (например, <literal>$num = 2; continue $num;</literal>)
       в качестве числового аргумента.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
