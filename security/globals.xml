<?xml version="1.0" encoding="windows-1251"?>
<!-- $Revision: 1.1 $ -->
<!-- splitted from ./index.xml, last change in rev 1.66 -->
  <sect1 id="security.registerglobals">
   <title>Использование глобальных переменных (Register_Globals)</title>
   <para>
    Наверное, наиболее спорным моментом в разработке PHP стала замена 
    значения по умолчанию для опции <link linkend="ini.register-globals">
    register_globals</link> с ON на OFF в версии <ulink url="&url.php.release4.2.0;">4.2.0</ulink>.
    Большинство пользователей доверились разработчикам, даже не зная, что это за 
    опция и как она влияет на работу PHP. Эта страница документации призвана
    показать, как эта настройка сочетается с вопросами безопасности при
    разработке приложений. Следует понимать, что сама по себе эта опция 
    никак не влияет на безопасность, ургозу представляет некорректное 
    использование предоставляемых ею возможностей.
   </para>
   <para>
    В случае, если значение параметра register_globals ON, перед выполнением
    вашего кода будут инициализированы различные переменные, например,
    переменные, переданные при отправке формы. Также, учитывая тот факт,
    что PHP не требует инициализации переменных, написать потенциально опасный
    код очень легко. Это было очень спорным решением, но общество разработчиков
    PHP решило изменить значение по умолчанию этой  директивы на OFF. В
    противном случае при написании кода разработчики не могли бы с уверенностью
    сказать, откуда пришла та или иная переменная и насколько она достоверна.
    До такого нововведения переменные, определяемые разработчиком внутри скрипта, 
    и передаваемые пользователем внешние данные могли перемешиваться. 
    Приведем простой пример злоупотребления конфигурационной опцией register_globals: 
   </para>
   <para>
    <example>
     <title>Пример опасного кода с register_globals = on</title>
     <programlisting role="php">
<![CDATA[
<?php
// устанавливаем переменную $authorized = true только для пользователей, прошедших авторизацию
if (authenticated_user()) {
    $authorized = true;
}

// Поскольку в случае неудачи при проверке авторизации переменная $authorized 
// не установлена, она может быть установлена автоматически, благодаря register_globals,
// например, при GET запросе GET auth.php?authorized=1.
// Таким образом, пройти эту проверку можно без авторизации
if ($authorized) {
    include "/highly/sensitive/data.php";
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    В случае register_globals = on логика работы скрипта может быть нарушена.
    В случае, если установленное значение off, переменная <varname>$authorized</varname> не 
    может быть установлена из внешних данных запроса, и скрипт будет работать
    корректно. Но все же инициализация переменных - один из признаков хорошего
    тона в программировании. Например, в приведенном выше участке кода 
    мы могли поместить <literal>$authorized = false</literal> в качестве 
    первой строки. Такой код работал бы как со значением on, так и off опции
    register_globals, и подразумевая, что по умолчанию пользователь не проходил
    авторизацию.
   </para>
   <para>
    Приведем еще один пример, использующий <link linkend="ref.session">сессии</link>.
    В случае, если register_globals = on, мы можем использовать переменную
    <varname>$username</varname> в приведенном ниже примере, но тогда у нас
    не будет уверенности в достоверности ее значения (к примеру, она могла быть передана в GET-запросе). 
   </para>
   <para>
    <example>
     <title>Пример использования сессий со значением register_globals on или off</title>
     <programlisting role="php">
<![CDATA[
<?php
// Мы не знаем, откуда получена переменная $username, но точно знаем, что
// переменная $_SESSION хранит в себе данные сессии
if (isset($_SESSION['username'])) {

    echo "Hello <b>{$_SESSION['username']}</b>";

} else {

    echo "Hello <b>Guest</b><br />";
    echo "Would you like to login?";

}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Также существует возможность реализации оперативного реагирования
    в случае попытки подмены переменных. Так как во время разработки приложения
    мы знаем ожидаемое значение переменной, а также знаем ее достоверное 
    значение, мы можем их сопоставить. Это не защитит код от подмены переменных,
    но усложнит перебор возможных вариантов. Если вы не хотите знать, как именно
    были получены внешние данные, используйте переменную <varname>$_REQUEST</varname>,
    которая состоит из данных  GET и POST запросов, а также данных COOKIE.  
    Также, информацию об этом можно найти в разделе
    <link linkend="language.variables.external">внешние данные в PHP</link>.
   </para>
   <para>
    <example>
     <title>Обнаружение попытки подмены переменных</title>
     <programlisting role="php">
<![CDATA[
<?php
if (isset($_COOKIE['MAGIC_COOKIE'])) {

    // MAGIC_COOKIE получена из достоверного источника.
    // Для полной уверенности необходимо проверить ее значение.

} elseif (isset($_GET['MAGIC_COOKIE']) || isset($_POST['MAGIC_COOKIE'])) {

   mail("admin@example.com", "Обнаружена попытка взлома", $_SERVER['REMOTE_ADDR']);
   echo "Обнаружено нарушение безопасности, администратор уведомлен.";
   exit;

} else {

   // MAGIC_COOKIE в данных запроса не присутствует
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Следует понимать, что установка register_globals в off не сделает ваш код
    безопасным. Каждую полученную от пользователя переменную следует проверять
    на соответствие ожидаемому значению. Всегда проверяйте ввод пользователя и 
    инициализируйте все используемые переменные. Для проверки на наличие
    неинициализированных переменных можно включить в опцию <function>error_reporting</function> 
    отображение ошибок категории <constant>E_NOTICE</constant>.
   </para>

   &note.superglobals;

  </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
