<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 301112 Maintainer: bfl Status: ready -->
<!-- Reviewed: no -->

<appendix xml:id="apd.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;
 <section xml:id="apd.examples.usage">
  <title>Использование PHP-APD в скриптах</title>
  <procedure>
   <step>
    <para>
     В первой строке скрипта вызывается <methodname>apd_set_pprof_trace()</methodname>,
     которая запускает трассировку:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
apd_set_pprof_trace();
?>
]]>
     </programlisting>
    </para>
    <para>
     Эта строка может быть добавлена в любом месте скрипта, но если трассировка не
     инициирована в начала скрипта, то данные, которые могли бы привести вас к 
     узким местам в потерях производительности, будут утеряны.
    </para>
   </step>
   <step>
    <para>
     Выходной дамп после запуска скрипта будет записан в 
     <filename>apd.dumpdir/pprof_pid.ext</filename>.
     <tip>
      <para>
       Если используется CGI версия PHP, то необходимо добавить флаг '-e'
       включающий расширенную информацию для корректной работы APD. Например: 
       <userinput>php -e -f script.php</userinput>
      </para>
     </tip>
    </para>
   </step>
   <step>
    <para>
     Для отображения форматированных данных профиля, необходимо выполнить
     команду <command>pprofp</command> с сортировкой и другими выбранными 
     параметрами отображения. Форматированный вывод будет выглядеть примерно так:  
     <screen>
<![CDATA[
bash-2.05b$ pprofp -R /tmp/pprof.22141.0

Trace for /home/dan/testapd.php
Total Elapsed Time = 0.00
Total System Time  = 0.00
Total User Time    = 0.00


Real         User        System             secs/    cumm
%Time (excl/cumm)  (excl/cumm)  (excl/cumm) Calls    call    s/call  Memory Usage Name
--------------------------------------------------------------------------------------
100.0 0.00 0.00  0.00 0.00  0.00 0.00     1  0.0000   0.0009            0 main
56.9 0.00 0.00  0.00 0.00  0.00 0.00     1  0.0005   0.0005            0 apd_set_pprof_trace
28.0 0.00 0.00  0.00 0.00  0.00 0.00    10  0.0000   0.0000            0 preg_replace
14.3 0.00 0.00  0.00 0.00  0.00 0.00    10  0.0000   0.0000            0 str_replace
]]>
     </screen>
    </para>
    <para>
     Опция -R используемая  этом примере сортирует профильную таблицу по
     количеству реального времени, которое скрипт потратил на выполнение каждой
     функции. Поле "cumm call" показывает сколько обращений было совершено к
     каждой функции, а "s/call" поле показывает сколько в среднем секунд было
     затрачено на каждое обращение.
    </para>
   </step>
   <step>
    <para>
     Для генерации стека вызовов в файл профиля KCacheGrind анализируемого
     приложения, требуется вызов команды <command>pprof2calltree</command>. 
    </para>
   </step>
  </procedure>
 </section>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

