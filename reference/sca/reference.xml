<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334762 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->

<reference xml:id="ref.sca" xmlns="http://docbook.org/ns/docbook">
 <title>SCA &Functions;</title>
 
 <partintro>
  <!-- FIXME: This needs to be upgraded to the new oo-markup -->
  <!-- Class definition section -->
  <section xml:id="sca.classes"><!-- {{{ -->
   &reftitle.classes;
   <para> 
    Большая часть интерфейса SCA связана с аннотациями в компонентах SCA, поэтому
    существует несколько открытых классов и методов. Единственными классами SCA, 
    которые могут вызывать скрипты или компоненты, являются класс 
    <classname>SCA</classname> и классы прокси 
    <classname>SCA_LocalProxy</classname> и <classname>SCA_SoapProxy</classname>.
   </para>
   
   <section xml:id="class.sca"><!-- {{{ -->
    <title><classname>SCA</classname></title>
    <para>
     Большая часть работы класса SCA выполняется, когда файл
     <filename>SCA.php</filename> включается в компонент SCA. Тем не менее, 
     PHP-скрипт может включать <filename>SCA.php</filename> и вызвать метод
     <function>getService</function> класса SCA, для получения прокси для сервиса.
     Компоненту делать этого не обязательно, поскольку прокси подтягиваются автоматом 
     в переменную экземпляра с аннотацией @reference.
    </para>
    <para> 
     Компонентам, которые должны создать SDO для использования в качестве
     возвращаемого значения потребуется фабрика данных . Для этого класс SCA содержит
     метод <function>createDataObject</function>, который создает SDO в соответствии с
     моделью, определенной аннотациями @types компонента. Аргументы функции
     <function>createDataObject</function> аналогичны аргументам службы SDO XML Data
     Access Service.
    </para>
    
    <section><!-- {{{ -->
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para>
        <link linkend="sca.getservice">
         getService</link> - возвращает прокси для сервиса
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend="sca.createdataobject">
         createDataObject</link> - создает SDO 
       </para>
      </listitem>
     </itemizedlist>
    </section> <!-- }}} -->
   </section><!-- }}} -->
   
   <section xml:id="class.sca-localproxy"><!-- {{{ -->
    <title>
     <classname>SCA_LocalProxy</classname>
    </title>
    <para>
     Когда вызывается функция <function>getService</function> с указанием локального
     компонента, возвращается локальный прокси. Локальный прокси также присваевается
     соответствующей переменной экземпляра компонента, определенной с помощью 
     аннотаций @reference и @binding.php. Когда скрипт или компонент выполняет вызовы
     локального прокси, они передаются самому целевому компоненту.
    </para>
    <para> 
     Компонентам, которым необходимо создать SDO для передачи сервису, потребуется
     фабрика данных. С этой целью класс SCA_LocalProxy содержит метод
     <function>createDataObject</function>, который создает SDO в соответствии с моделью,
     определенной аннотациями @types компонента. Аргументы функции
     <function>createDataObject</function> такие же, как и для SDO XML Data Access Service.
    </para>
    
    <section><!-- {{{ -->
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para>
        <link
        linkend="sca-localproxy.createdataobject">
         createDataObject</link> - создает SDO 
       </para>
      </listitem>
     </itemizedlist>
    </section><!-- }}} -->
   </section><!-- }}} -->
   
   <section xml:id="class.sca-soapproxy"><!-- {{{ -->
    <title>
     <classname>SCA_SoapProxy</classname>
    </title>
    <para>
     Когда <function>getService</function> вызывается с указанием WSDL-файла,
     возвращается SOAP-прокси. SOAP-прокси также присваевается в переменные
     экземпляра компонента, которые определены с помощью аннотаций @reference и
     @binding.soap. Когда скрипт или компонент выполняет вызовы SOAP-прокси, они
     формируются в SOAP-запросы веб-сервиса и передаются целевому компоненту с 
     помощью расширения PHP Soap.
    </para>
    <para> 
     Компонентам, которым необходимо создать SDO для передачи сервису, потребуется
     фабрика данных. Для этого класс <classname>SCA_SoapProxy</classname> содержит
     метод <function>createDataObject</function>, который создает SDO в соответствии с
     моделью, определенной в целевом WSDL. Аргументы функции 
     <function>createDataObject</function> такие же, как и для SDO XML Data Access Service.
    </para>
    
    <section><!-- {{{ -->
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para>
        <link
        linkend="sca-soapproxy.createdataobject">
         createDataObject</link> - создает SDO 
       </para>
      </listitem>
     </itemizedlist>
    </section><!-- }}} -->
   </section><!-- }}} -->
  </section>
  <!-- }}} -->
  
 </partintro>
 
 &reference.sca.entities.SCA;
 &reference.sca.entities.SCA-LocalProxy;
 &reference.sca.entities.SCA-SoapProxy;
 
</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
