<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 322138 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="sca.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;
 <para> 
  Примеры в последующих разделах иллюстрируют следующие аспекты SCA: 
 </para>
 
 <!-- {{{ itemizedlist of examples -->
 <itemizedlist>
  <listitem>
   <para>
    Как использовать аннотации для определения класса PHP в качестве компонента SCA
    и описания сервиса.
   </para>
  </listitem>
  <listitem>
   <para>
    Как компонент SCA может быть представлен в качестве веб-сервиса.
   </para>
  </listitem>
  <listitem>
   <para>
    Как компонент SCA может использовать веб-сервис, предоставляемый другим
    компонентом SCA или другим сервисом, который ничего о SCA не знает.
   </para>
  </listitem>
  <listitem>
   <para>
    Как компонент SCA может локально вызвать другой компонент SCA
    (в том же процессе и в том же стеке вызовов)
   </para>
  </listitem>
  <listitem>
   <para>
    Как клиентский скрипт, который не является компонентом SCA, может использовать 
    вызов getService для получения прокси к компоненту SCA.
   </para>
  </listitem>
  <listitem>
   <para>
    Как такие структуры как Addresses или Puchase Orders
    представляются в качестве SDO и обрабатываются. 
   </para>
  </listitem>
  <listitem>
   <para>
    Как развертываются компоненты SCA и, в частности, как и когда создается WSDL.
   </para>
  </listitem>
  <listitem>
   <para>
    Как параметры всегда передаются по значению (а не по ссылке) даже между
    локальными компонентами, что гарантирует, что семантика вызова не изменяется в
    зависимости от местоположения компонента.
   </para>
  </listitem>
  <listitem>
   <para>
    Как поддерживаются позиционные параметры для сервиса, даже если базовый WSDL
    является документированным литералом и, естественно, поддерживает только 
    именованные параметры.
   </para>
  </listitem>
  <listitem>
   <para>
    Как обрабатываются исключения бизнес-логики и вермени исполнения.
   </para>
  </listitem>
  
 </itemizedlist>
 <!-- }}} -->
 
 <!-- {{{ Section Structure -->
 <section xml:id="sca.examples.structure">
  <title>Структура Сервисного Компонента</title>
  <para>
   Сервисный компонент реализуется как класс. Чтобы определить его как сервисный 
   компонент, в него добавляют аннотацию @service. По соглашению, во время исполнения
   SCA будет использовать имя файла скрипта в качестве имени компонента. 
   Поэтому класс и файл скрипта должны иметь одно и то же имя.
  </para>
  
  <para> 
   Компоненты SCA всегда предоставляют сервис и нет иных способов
   использовать компонент, кроме как вызвать его через веб-сервис, либо локально.
   Поэтому корректные компоненты SCA всегда содержат аннотацию
   @service и как минимум один публичный метод.
  </para>
  
  <para> 
   Каждый компонент SCA должен включать скрипт SCA.php,
   который не только содержит определение классов SCA, но и
   выполняемый код PHP, который запускается всякий раз при выполнении 
   скрипта и который отвечает за правильное поведение компонентов.
  </para>
  
  <caution>
   
   <para> 
    Очень важно, чтобы если ваш файл подключает еще какие либо скрипты,
    они подключались до скрипта SCA.php. Если они будут подключаться после, то
    они не будут обработаны SCA во время исполнения.
   </para>
  </caution>
  
  <para> 
   Пример ниже иллюстрирует эту общую структуру
  </para>
  
  <para>
   <example>
    <title>Структура компонента SCA</title>
    
    <programlisting role="php">
<![CDATA[
<?php

// любые include

include "SCA/SCA.php";

/**
 * @service
 */

class ConvertedStockQuote {

       // переменные экземпляра, бизнес-логика и как минимум один публичный метод

}
?>
]]>
    </programlisting>
   </example>
  </para>
 </section>
 <!-- }}} -->
 
 <!-- {{{ Section Proxies -->
 <section xml:id="sca.examples.proxies">
  <title> Получение прокси для другого сервисного компонента</title>
  <para>
   Один компонент SCA может вызвать сервис, предоставляемый другим компонентом SCA.
   Сервис, предоставляемый компонентом, состоит из всех его публичных методов. 
   В настоящее время SCA предоставляет два способа для одного компонента вызвать другой:
   либо локально (т.е. в рамках одного и того же процесс PHP, и в том же стеке вызовов), 
   либо удаленно, если вызываемый компонент предоставляет привязку веб-сервиса.
  </para>
  
  <para>
   Чтобы один компонент мог вызвать другого, вызывающему компоненту нужен прокси 
   для вызываемого компонента. Этот прокси обычно предоставляется в качестве переменной
   экземпляра в вызывающем компоненте, хотя прокси также можно получить с помощью
   вызова SCA::getService(). Когда компонент сконструирован, прокси создаются для
   любой переменной экземпляра, которая относится к другому компоненту, и эти прокси
   "вводятся" в переменные экземпляра. Прокси используются всегда, независимо от того,
   является ли компонент локальным или удаленным, что обеспечивает идентичное 
   поведение локальных и удаленных вызовов (например, локальные вызовы всегда 
   позволяют передавать данные по-значению). Прокси знают, как найти необходимый
   компонент и передать сделанные им вызовы.
  </para>
  
  <para>
   Переменные экземпляра, предназначенные для хранения прокси для сервисов,
   обозначаются двумя аннотациями в стиле PHPDocumentor, @reference и @binding. 
   Обе аннотации размещаются в разделе документации для переменной экземпляра класса,
   как показано в приведенном ниже коде.
  </para>
  
  <para>
   Аннотация @reference перед переменной указывает, что она должна быть 
   инициализирована прокси-компонентом.
  </para>
  
  <para> 
   Аннотация @binding имеет две формы: @binding.php и @binding.soap, и указывает, что
   прокси предназначен либо для локального компонента, либо для веб-сервиса
   соответственно. Для обоих аннотаций @binding.php и @binding.soap задается целевой URI.
  </para>
  
  <para>
   В настоящий момент, из-за метода определения зависимостей на основе аннотаций,
   единственным способом изменения целевой ссылки является изменение аннотации внутри
   компонента.
  </para>
  
  <para>
   В нашем примере ConvertedStockQuote, переменная экземпляра
   <varname>$exchange_rate</varname> будет инициализирована как
   прокси к локальному компоненту ExchangeRate каждый раз, когда
   будет создаваться экземпляр класса ConvertedStockQuote.
  </para>
  
  <para>
   <example>
    <title>Получение прокси для локальных классов</title>
    
    <programlisting role="php">
<![CDATA[
<?php 
   /**
     * Сервис предоставления курсов обмена.
     *
     * @reference
     * @binding.php ../ExchangeRate/ExchangeRate.php
     */
    public $exchange_rate;
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para> 
   URI в @binding.php указывает местоположение скрипта, содержащего реализацию
   компонента. Компонент будет называться локально. Предоставляемый сервис является
   набором публичных методов компонента. URI должен быть простым путем, абсолютным или
   относительным. Компонент будет загружен директивой include после проверки
   функцией <function>class_exists</function>, не загружен ли он уже. Если URI
   является относительным путем, то он разрешается относительно компонента, содержащего
   аннотацию. Обратите внимание, что это отличается от обычного поведения PHP, когда
   скрипты ищутся по пути include_path. Это позволяет обеспечить некоторую независимости
   от местоположения для кросс-компонентных ссылок.
  </para>
  
  <para> 
   Для сервиса ExchangeRate, который мы используем удаленно, меняется только
   строка @binding. Вместо указания местоположения класса PHP, мы указываем
   местоположение WSDL, описывающей веб-сервис: 
  </para>
  
  <para>
   <example>
    <title>Получение прокси для веб-сервиса</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
     * Сервис получения биржевых котировок.
     *
     * @reference
     * @binding.soap ../StockQuote/StockQuote.wsdl
     */
    public $stock_quote;
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para> 
   Компонент StockQuote будет вызываться как веб-сервис. В этом случае URI для WSDL 
   может быть простым именем пути или может содержать обертку PHP и начинаться, например,
   с <varname>file://</varname> или <varname>http://</varname>. В случае, если это
   простой путь, он может быть абсолютным или относительным, и если он будет 
   относительным, то он будет разрешаться относительно компонента с аннотацией. Обратите
   внимание, что как и для @binding.php, поведение будет отличается от обычного поведения 
   PHP, когда скрипты ищутся по пути include_path. Это позволяет обеспечить некоторую 
   независимости от местоположения для кросс-компонентных ссылок.
  </para>
  
 </section>
 <!-- }}} -->
 
 <!-- {{{ Section Calling -->
 <section xml:id="sca.examples.calling">
  <title>Вызов другого сервисного компонента</title>
  
  <para>
   В примере ConvertedStockQuote также вызывает прокси для двух компонентов, 
   к которым он относится.
  </para>
  
  <para>
   <example>
    <title>Вызов сервисов</title>
    <programlisting role="php">
<![CDATA[
<?php
$quote  = $this->stock_quote->getQuote($ticker);
$rate   = $this->exchange_rate->getRate($currency);
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para> 
   Вызов сервиса StockQuote - это вызов локального сервиса; 
   Вызов сервиса ExchangeRate - это вызов удаленного сервиса. 
   Обратите внимание, что синтаксис вызова сервисов абсолютно идентичен.
  </para>
  
  <para>
   Прокси гарантируют, что способ обращения к компонентам и их поведение одинаковы
   независимо от того, являются ли они локальным или удаленным сервисом. Поэтому
   компоненты не чувствительны к тому, является ли вызов локальным или удаленным.
   К примеру, прокси для локального сервиса делает копии переданных аргументов и 
   передает сервису именно эти копии, чтобы гарантировать передачу по значению и
   обеспечить идентичность поведения локальных и удаленных вызовов. 
   Кроме того, прокси для удаленной службы принимает аргументы из списка позиционных
   параметров и гарантирует, что они правильно упакованы в запросе SOAP и
   преобразуются обратно в список позиционных параметров на целевом сервисе.
  </para>
  
  <para> 
   В приведенном выше примере <varname>$ticker</varname> и 
   <varname>$ currency</varname> являются скалярными типами PHP. 
   Компоненты могут передавать скалярные типы PHP string, integer, float и boolean, но
   структуры данных в вызовах сервисов всегда передаются как SDO. В следующем разделе
   описывается, как компонент может создавать SDO для передачи вызова локальному или
   веб-сервису и как компонент может создать SDO для возврата результата. 
   В документации по проекту PHP SDO описывается работа с интерфейсом API SDO 
   (см. <link linkend = "ref.sdo"> страницы SDO</link>).
  </para>
  
 </section>
 <!-- }}} -->
 
 <!-- {{{ Section nonscascript -->
 <section xml:id="sca.examples.nonscascript">
  <title>Поиск и вызов сервиса из скрипта не являющимся компонентом SCA </title>
  
  <para> 
   Компоненты SCA получают прокси для других компонентов или сервисов в виде
   переменных экземпляра класса, аннотированных с помощью @reference. Такое
   решение не подходит для обычных скриптов, не являющихся компонентомами. 
   Клиентский скрипт, который не является компонентом, должен использовать статический
   метод <function>SCA::getService</function> для получения прокси для локального 
   или удаленного сервиса. Метод <function>getService</function> принимает в качестве
   аргумента URI. Обычно это локальный скрипт PHP, содержащий компонент или файл wsdl, 
   и используется точно так же, как значения аннотаций @binding, описанных в предыдущем
   разделе: то есть относительные URI разрешаются относительно клиентского скрипта, 
   а не PHP include_path или текущего рабочего каталога.
  </para>
  
  <para> 
   К примеру, если скрипту нужен прокси для сервисов ExchangeRate или StockQuote,
   он должен использовать метод <function>getService</function> следующим образом:
  </para>
  
  <para>
   <example>
    <title>Получение прокси с помощью getService</title>
    <programlisting role="php">
<![CDATA[
<?php
$exchange_rate = SCA::getService('../ExchangeRate/ExchangeRate.php');
$stock_quote   = SCA::getService('../StockQuote/StockQuote.wsdl');
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para>
   Методы сервисом необходимо вызывать на возвращенных прокси, так же
   как и для компонентов. 
  </para>
  <para>
   <example>
    <title>Вызов сервиса через прокси</title>
    <programlisting role="php">
<![CDATA[
<?php
$quote  = $stock_quote->getQuote($ticker);
$rate   = $exchange_rate->getRate($currency);
?>
]]>
    </programlisting>
   </example>
  </para>
  
 </section>
 <!-- }}} -->
 
 <!-- {{{ Section Exposing Webservice Componenent -->
 <section xml:id="sca.examples.exposing-webservice">
  <title>Размещение сервисного компонента как веб-сервиса</title>
  
  <para>
   SCA может генерировать WSDL из аннотаций сервисного компонента, для его легкого
   развертывания как веб-сервиса. Для указания SCA, что надо создавать WSDL, необходимо
   добавить аннотацию @binding.soap под аннотацией @service и указать параметры и 
   возвращаемые значения методов, используя аннотации @param и @return. Эти аннотации
   будут считываться при создании WSDL, а порядок и типы параметров определяют
   содержимое раздела WSDL &lt;schema&gt;.
  </para>
  
  <para>
   SCA всегда генерирует WSDL обернутый как документ/литерал для компонентов
   предоставляющим веб-сервис. Обратите внимание, что это не препятствует 
   использованию сторонних веб-служб, с WSDL написанным в другом стиле.
  </para>
  
  <para> 
   В аннотации @param можно использовать 4 скалярных типа: boolean, integer, float и string.
   Они просто сопоставляются с типами XML-схемы с тем же именем в WSDL. 
   Пример ниже представляет собой простую реализацию службы StockQuote, которую
   вызывает компонент ConvertedStockQuote и показывает использование типов string и float.
  </para>
  
  <para>
   <example>
    <title>Сервис StockQuote</title>
    <programlisting role="php">
<![CDATA[
<?php

include "SCA/SCA.php";

/**
 * Фуфульная реализация веб-сервиса StockQuote.
 *
 * @service
 * @binding.soap
 *
 */
class StockQuote {

    /**
     * Получение котировки акции по ее имени.
     *
     * @param string $ticker Имя акции.
     * @return float Биржевая котировка.
     */
    function getQuote($ticker) {
        return 80.9;
  }
}
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para> 
   На базе данного сервиса будет создана примерно такая WSDL (хотя, возможно, с 
   местоположением службы, отличным от «localhost»):
  </para>
  
  <para>
   <example>
    <title>Созданная WSDL</title>
    <programlisting role="xml">
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://schemas.xmlsoap.org/wsdl/" xsi:type="tDefinitions"
    xmlns:tns2="http://StockQuote" xmlns:tns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:tns3="http://schemas.xmlsoap.org/wsdl/soap/"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" targetNamespace="http://StockQuote">
  <types>
    <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
      targetNamespace="http://StockQuote">
      <xs:element name="getQuote">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="ticker" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="getQuoteResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="getQuoteReturn" type="xs:float"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:schema>
  </types>

  <message name="getQuoteRequest">
    <part name="getQuoteRequest" element="tns2:getQuote"/>
  </message>
  <message name="getQuoteResponse">
    <part name="return" element="tns2:getQuoteResponse"/>
  </message>
  <portType name="StockQuotePortType">
    <operation name="getQuote">
      <input message="tns2:getQuoteRequest"/>
      <output message="tns2:getQuoteResponse"/>
    </operation>
  </portType>
  <binding name="StockQuoteBinding" type="tns2:StockQuotePortType">
    <operation name="getQuote">
      <input>
        <tns3:body xsi:type="tBody" use="literal"/>
      </input>
      <output>
        <tns3:body xsi:type="tBody" use="literal"/>
      </output>
      <tns3:operation xsi:type="tOperation" soapAction=""/>
    </operation>
    <tns3:binding xsi:type="tBinding" transport="http://schemas.xmlsoap.org/soap/http" style="document"/>
  </binding>
  <service name="StockQuoteService">
    <port name="StockQuotePort" binding="tns2:StockQuoteBinding">
      <tns3:address xsi:type="tAddress" location="http://localhost/StockQuote/StockQuote.php"/>
    </port>
  </service>
</definitions>

<!-- this line identifies this file as WSDL generated by SCA for PHP. Do not remove -->
]]>
     
    </programlisting>
   </example>
  </para>
  
 </section>
 <!-- }}} -->
 
 <!-- {{{ Section Deploy -->
 <section xml:id="sca.examples.deploy">
  <title>Развертывание компонента SCA</title>
  <para> 
   Для развертывания компонента SCA не требуется каких либо нетривиальных действий.
   Просто положите скрипт с компонентом в предназначенное для него место
   в папке со скриптами веб-сервера. При вызове любого компонента
   для него будет вызван метод <function>SCA::initComponent</function>,
   который обеспечит его корректную работу в качестве локального или удаленного сервиса. 
  </para>
  
 </section>
 <!-- }}} -->
 
 <!-- {{{ Section Obtaining WSDL -->
 <section xml:id="sca.examples.obtaining-wsdl">
  <title>Получение WSDL для компонента SCA, предоставляющего веб-сервис</title>
  
  <para> 
   Компоненты SCA, которые реализующие интерфейс веб-сервиса (т.е. имеют аннотацию 
   @binding.soap), вернут WSDL в ответ на HTTP-запрос с get-параметром "wsdl". 
   Другими словами, допишите в конце URL "?wsdl". В приведенном ниже примере 
   для получения WSDL и записи его во временный файл используется функция
   <function>file_get_contents</function>, после чего обычным способом получается прокси.
   Разумеется, вы можете получить WSDL в браузере или любым другим удобным способом.
  </para>
  
  <para>
   <example>
    <title> Generated WSDL </title>
    <programlisting role="xml">
<![CDATA[
<?php
$wsdl = file_get_contents('http://www.example.com/Services/Example.php?wsdl');
file_put_contents("service.wsdl",$wsdl); //записываем wsdl в файл
$service = SCA::getService('service.wsdl'); 
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para>
   Обратите внимание: Если для wsdl требуется импортировать xsds, то они должны быть
   загружены отдельно. 
  </para>
  
 </section>
 <!-- }}} -->
 
 <!-- {{{ Section Understanding WSDL -->
 <section xml:id="sca.examples.understanding-wsdl">
  <title> Рассказ о том, как генерируется WSDL</title>
  <para> 
   SCA генерирует WSDL для компонентов, которые содержат аннотацию @binding.soap
   после аннотации @service. Чтобы создать WSDL, SCA во время исполнения с помощью
   Reflection отражает компонент и анализирует аннотации @param и @return для каждого
   публичного метода, а также любые аннотации @types в компоненте. Информация из
   аннотаций @param и @return используется для построения раздела WSDL &lt;types&gt;.
   Любые аннотации @types, которые указывают на отдельный файл схемы, приведут к
   созданию элемента &lt;import&gt; в схеме WSDL.
  </para>
  
  <section xml:id="sca.examples.understanding-wsdl.location"><!-- {{{ -->
   <title>Аттрибут location элемента &lt;service&gt;</title>
   <para> 
    Внизу WSDL присутствует элемент &lt;service&gt;, который
    использует аттрибут location для идентификации URL сервиса.
    К примеру он может быть таким: 
   </para>
   
   <para>
    <example>
     <title>Аттрибут location</title>
     <programlisting role="xml">
<![CDATA[
    <service name="ConvertedStockQuote"
...
location="http://localhost/ConvertedStockQuote/ConvertedStockQuote.php"/>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Обратите внимание, что местоположение является относительным для корня 
    документов веб-сервера и не может быть обработано заранее. Оно может быть создано
    только после того, как компонент поместили в нужное место работающего 
    веб-сервера, и когда имя и порт хоста становятся известны и могут быть помещены в WSDL.
    Подробности из URL-адреса, который запрашивает WSDL, используется, например, если
    WSDL в ответ на запрос
    http://www.example.com:1111/ConvertedStockQuote/ConvertedStockQuote.php?wsdl
    генерирует адрес 
    http: //www.example.com:1111/ConvertedStockQuote/ConvertedStockQuote.php - это то, что
    будет вставлено в атрибут location в WSDL.
   </para>
  </section>
  <!-- }}} -->
  
  <section xml:id="sca.examples.understanding-wsdl.positional-parameters"> <!-- {{{ -->
   <title>Обертка WSDL документ/литерал и позиционные параметры</title>
   <para>
    SCA генерирует WSDL в стиле обертки документ/литерал. Этот стиль помещает параметры 
    и возвращаемые типы метода в "обертки", которые названы в честь соответствующего
    метода. Элемент WSDL &Lt;types&gt; каждую из этих оберток. Если мы рассмотрим метод
    <function>getQuote</function> примера ConvertedStockQuote:
   </para>
   
   <para>
    <example>
     <title>Метод с двумя аргументами</title>
     <programlisting role="php">
<![CDATA[
<?php
   /**
     * Получение стоимости акции в заданной валюте.
     *
     * @param string $ticker Название акции.
     * @param string $currency В какой валюте возвращать результат.
     * @return float Стоимость акции в заданной валюте.
     */
    function getQuote($ticker, $currency)
    {
        $quote  = $this->stock_quote->getQuote($ticker);
        $rate   = $this->exchange_rate->getRate($currency);
        return  $rate * $quote;
    }
?>
]]>
      
     </programlisting>
    </example>
   </para>
   
   <para>
    WSDL создастся с описанием этого метода и его параметров и выдаст XML-схему
    для этих параметров.
    Секция типов будет выглядеть как-то так: 
   </para>
   
   <para>
    <example>
     <title>Секция типов с именованными параметрами</title>
     <programlisting role="xml">
<![CDATA[
  <types>
    <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
      targetNamespace="http://ConvertedStockQuote">
      <xs:element name="getQuote">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="ticker" type="xs:string"/>
            <xs:element name="currency" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="getQuoteResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="getQuoteReturn" type="xs:float"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:schema>
  </types>
]]>
     </programlisting>
    </example>
   </para>
   
   <para>
    Во время выполнения SCA производит обработку для определения, как списки 
    позиционных параметров в интерфейсе преобразуются в XML, содержащий именованные
    параметры в SOAP-запросе, а затем преобразуются обратно в списки позиционных
    параметров. Чтобы понять зачем это делается, рассмотрим как скрипт PHP, который
    использовал другой интерфейс для вызова SOAP, должен задавать список параметров.
    Например, PHP-скрипт с использованием PHP SoapClient должен передать SoapClient'у 
    один параметр, задающий  значения для "ticker" и "currency", например как 
    ассоциативный массив. Поэтому для обеспечения одинакового вызова сервисов
    компонентов SCA как локально так и удаленно, требуется иной подход.
   </para>
   
   <para>
    Когда SCA генерирует WSDL для SCA-компонента, он включает комментарий в WSDL,
    который отмечает, что WSDL является интерфейсом для SCA-компонента. В этом случае,
    когда один компонент SCA вызывает другой через веб-сервис, SCA на вызывающем 
    конце во время исполнения принимает список позиционных параметров из вызова и, 
    один за другим, присваивает значения названным элементам в SOAP-запроса. 
    Например, вызов метода <function>getQuote</function>, определенного выше, которому
    передаются значения "IBM" и "USD", выглядит так:
   </para>
   
   <para>
    <programlisting role="php">
<![CDATA[
<?php
  $quote = $remote_service->getQuote('IBM','USD');
?>
]]>
    </programlisting>
   </para>
   
   <para>
    В результате SOAP-запрос будет выглядеть так:
   </para>
   
   <para>
    <programlisting role="xml">
<![CDATA[
<getQuote>
  <ticker>IBM</ticker>
  <currency>USD</currency>
</getQuote>
]]>
    </programlisting>
   </para>
   
   <para>
    На стороне предоставляющей сервис, SCA будет брать параметры по очереди
    из SOAP-запроса и создавать из него список аргументов ('IBM','USD').
   </para>
   
   <caution>
    
    <para> 
     И на стороне клиента и на стороне сервиса SCA будет полагаться на тот порядок
     аргументов, в каком они появились в SOAP-запросе и считать, что именно в этом порядке
     аргументы нужно передавать в запрошенный метод. Изначально этот порядок определяется
     порядком описания аргументов с помощью аннотаций @param.
     Т.е. порядок аннотаций @param определяет как порядок аргументов метода, так
     и порядок в котором аргументы будут описаны в SOAP-запросе.
    </para>
   </caution>
   
  </section>
  <!-- }}} -->
  
 </section>
 <!-- }}} -->
 
 <section xml:id="sca.examples.structures"><!-- {{{ -->
  <title>Работа со структурами данных</title>
  <para>
   Компоненты SCA могут оперировать четырьмя скалярными типами PHP:
   boolean, integer, float и string. Но для передачи и приема структур данных
   компоненты SCA используют SDO. Более подробно об SDO можно почитать
   <link linkend="ref.sdo">на этой странице</link> документации.
   Читатели, знакомые с SDO, знают, что оно подходят для представления 
   структурированных и полуструктурированных данных, которые часто моделируются в XML, 
   и что они очень просто сериализуются для передачи между удаленными компонентами или 
   в веб-сервисами. В настоящее время SDO - единственный поддерживаемый способ 
   передачи и возврата структур данных. Нельзя передавать или возвращать объекты 
   или массивы PHP.
  </para>
  
  <para> 
   SCA всегда гарантирует, что данные передаются по значению, даже для локальных 
   вызовов. Для этого SCA копирует все SDO в список параметров перед их передачей, 
   как и для скалярных типов.
  </para>
  
  <section xml:id="sca.examples.structures.defined"><!-- {{{ -->
   <title>Как определяются структуры данных для компонентов SCA</title>
   <para>
    В настоящее время единственным механизмом указания местоположения определения
    структуры данных является указание типов в файле схемы XML. Однако в будущем,
    возможно, появятся другие способы, например на основе классов или интерфейсов PHP 
    или на основе определений, выраженных как ассоциативные массивы.
   </para>
   
   <para>
    Чтобы проиллюстрировать использование SDO, мы вводим новый компонент. 
    Сервис PortfolioMangement возвращает SDO, представляющий портфель акций для 
    данного клиента.
   </para>
   
   <para>
    <example>
     <title>Компонент использующий структуры данных</title>
     <programlisting role="php">
<![CDATA[
<?php

include "SCA/SCA.php";

/**
 * Управление портфелем для клиента.
 *
 * @service
 * @binding.soap
 *
 * @types http://www.example.org/Portfolio PortfolioTypes.xsd
 *
 */
class PortfolioManagement {

    /**
     * Получение портфеля акций для данного клиента.
     *
     * @param integer $customer_id Идентификатор клиента
     * @return Portfolio http://www.example.org/Portfolio The stock portfolio (акции и количества)
     */
    function getPortfolio($customer_id) {
        // Представьте, что мы только что получили это из базы данных
        $portfolio = SCA::createDataObject('http://www.example.org/Portfolio', 'Portfolio');
        $holding = $portfolio->createDataObject('holding');
        $holding->ticker = 'AAPL';
        $holding->number = 100.5;
        $holding = $portfolio->createDataObject('holding');
        $holding->ticker = 'INTL';
        $holding->number = 100.5;
        $holding = $portfolio->createDataObject('holding');
        $holding->ticker = 'IBM';
        $holding->number = 100.5;
        return $portfolio;
    }

}
?>
]]>
     </programlisting>
    </example>
   </para>
   
   <para>
    Аннотация @types:
   </para>
   
   <para>
    <programlisting role="php">
<![CDATA[
<?php
@types http://www.example.org/Portfolio PortfolioTypes.xsd
?>
]]>
    </programlisting>
   </para>
   
   <para>
    Указывает, что типы в пространстве имен http://www.example.org/Portfolio будут 
    найдены в файле схемы, расположенной по URI PortfolioTypes.xsd. Сгенерированный WSDL
    будет описывать эту информацию с помощью оператора импорта следующим образом: 
   </para>
   
   <para>
    <programlisting role="xml">
<![CDATA[
   <xs:import schemaLocation="PortfolioTypes.xsd"
                      namespace="http://www.example.org/Portfolio"/>
]]>
    </programlisting>
   </para>
   
   <para>
    таким образом URI, абсолютный или относительный, должен быть разрешаем
    при включении в аттрибут schemaLocation. 
   </para>
   
  </section>
  <!-- }}} -->
  
  <section xml:id="sca.examples.structures.creating"><!-- {{{ -->
   <title>Создание SDO</title>
   <para>
    Читатели, знакомые с SDO, знают, что они всегда создаются в соответствии с
    описанием допустимой структуры (иногда называемой "схемой" или "моделью"), 
    и что, вместо того, чтобы создавать их напрямую, используя 'new', требуется
    использовать фабрику данных. Часто существующий объект данных может 
    использоваться как фабрика данных, но иногда, и особенно для того, чтобы 
    получить первый объект данных, необходима отдельная фабрика данных.
   </para>
   
   <para>
    В SCA, либо классы времени исполнения SCA, либо прокси сервисов, локальные
    или удаленные могут служить фабриками данных SDO. Что именно выбрать
    в качестве фабрики и почему мы расскажем ниже. 
   </para>
   <para> 
    Чтобы проиллюстрировать создание SDO мы переходим к новому примеру
   </para>
  </section>
  <!-- }}} -->
  
  <section xml:id="sca.examples.structures.services"><!-- {{{ -->
   <title>Создание SDO для передачи сервису</title>
   <para>
    Вызывающий сервис, которому требуется передать структуру данных, использует в
    качестве фабрики данных для соответствующих SDO прокси . Например, предположим,
    что компонент использует прокси для сервиса, предоставляемого локальным 
    компонентом AddressBook.
   </para>
   
   <para>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * @reference
 * @binding.local AddressBook.php
 */
$address_book;
?>
]]>
    </programlisting>
   </para>
   <para> 
    Компонент AddressBook, который он хочет вызвать, определяется следующим образом:
   </para>
   <para>
    <programlisting role="php">
<![CDATA[
<?php
/**
* @service
* @binding.soap
* @types http://addressbook ../AddressBook/AddressBook.xsd
*/
class AddressBook {

    /**
     * @param personType $person http://addressbook (объект person)
     * @return addressType http://addressbook (объект address для объекта person)
     */
    function lookupAddress($person)  {
        ...
    }
}
?>
]]>
    </programlisting>
   </para>
   
   <para> 
    Компонент AddressBook предоставляет метод сервиса <function>lookupAddress</function>,
    который использует типы из пространства имен http://addressbook. Метод lookupAddress
    принимает структуру данных personType и возвращает addressType. Оба типа определены
    в файле схемы addressbook.xsd.
   </para>
   
   <para> 
    После того, как компонент, который хочет использовать компонент AddressBook, был
    сконструирован, и переменная <varname>$address_book</varname> содержит прокси
    для сервиса, вызывающий компонент может использовать прокси в
    <varname>$address_book </varname> для создания SDO, как показано ниже:
   </para>
   
   <para>
    <programlisting role="php">
<![CDATA[
<?php
$william_shakespeare        = $address_book->createDataObject('http://addressbook','personType');
$william_shakespeare ->name = "William Shakespeare";
$address                    = $address_book->lookupAddress($william_shakespeare);
?>
]]>
    </programlisting>
   </para>
   
   <para> 
    Обратите внимание: использование прокси в качестве средства для создания SDO не
    ограничивается компонентами SCA. Если служба вызывается из обычного PHP-скрипта,
    а прокси был получен с помощью <function>getService</function>, то используется тот 
    же подход.
   </para>
   
   <para>
    <programlisting role="php">
<![CDATA[
<?php
$address_book = SCA::getService('AddressBook.php');
$william_shakespeare = $address_book->createDataObject('http://addressbook','personType');
?>
]]>
     
    </programlisting>
   </para>
   
  </section>
  <!-- }}} -->
  
  <section xml:id="sca.examples.structures.services.returning"><!-- {{{ -->
   <title>Создание SDO для использования в качестве возвращаемого значения</title>
   <para> 
    Компонент, который должен создать объект данных для возврата, не будет иметь прокси
    для использования в качестве объекта данных. В этом случае он использует статический
    метод <function>createDataObject</function> из <filename>SCA.php</filename>.
    Следовательно, если описанный выше компонент AddressBook необходим для создания
    объекта типа <classname>addressType</classname> в пространстве имен http://address,
    то можно сделать следующее:
   </para>
   
   <para>
    <programlisting role="php">
<![CDATA[
<?php
$address = SCA::createDataObject('http://addressbook','addressType');
?>
]]>
     
    </programlisting>
   </para>
  </section>
  <!-- }}} -->
 </section>
 <!-- }}} -->
 
 <section xml:id="sca.examples.errorhandling"><!-- {{{ -->
  <title>Обработка ошибок</title>
  <para> 
   В этом разделе описывается, как обрабатываются ошибки. Существует два типа ошибок:
  </para>
  <itemizedlist>
   <listitem>
    <para> 
     Исключения времени выполнения SCA сигнализируют о проблемах при управлении
     выполнением компонентов и при взаимодействии с удаленными сервисами. они могут
     произойти из-за проблем с сетью или конфигурацией.
    </para>
   </listitem>
   
   <listitem>
    <para> 
     Бизнес-исключения - это те, которые определены программистом. Они расширяют класс
     исключений PHP и бросаются и ловятся сознательно как часть бизнес-логики.
    </para>
   </listitem>
   
  </itemizedlist>
  
  <section xml:id="sca.examples.errorhandling.runtime"><!-- {{{ -->
   <title>Обработка исключений времени выполнения</title>
   <para> 
    Существует два типа исключений времени выполнения SCA:
   </para>
   
   <itemizedlist>
    <listitem>
     <para> 
      SCA_RuntimeException - сигнализирует о проблеме, обнаруженной или, возможно,
      возникающей во время исполнения SCA. Оно может быть вызвано различными 
      причинами, многие из которых могут возникать независимо от того, выполняется ли
      подключение к локальному или удаленному сервису: ошибка в одном из комментариев 
      в компоненте, отсутствующий файл WSDL или php и т.д.. В случае веб-сервисов
      исключение SCA_RuntimeException также может быть брошено, если от удаленного
      сервиса получен SoapFault, а код ошибки в SoapFault указывает на то, что повторная
      попытка вряд ли будет успешной.
     </para>
    </listitem>
    
    <listitem>
     <para> 
      SCA_ServiceUnavailableException - это подкласс SCA_RuntimeException и сигнализирует 
      о проблеме при подключении или использовании удаленного сервиса, но при этом если
      повторить попытку, то все может получиться. В случае веб-сервиса это исключение
      бросается, если SoapFault получен с кодом ошибки, который указывает, что повтор 
      может быть успешным. 
     </para>
    </listitem>
    
   </itemizedlist>
  </section>
  <!-- }}} -->
  <section xml:id="sca.examples.errorhandlilng.business"> <!-- {{{ -->
   <title>Обработка бизнес-исключений</title>
   <para> 
    Бизнес-исключения могут быть определены и брошены компонентом обычным способом,
    независимо от того, был ли компонент вызван локально или удаленно. SCA не ловит
    бизнес-исключения, которые были брошены компонентом, вызваным локально, поэтому 
    они будут возвращены вызывающему компоненту обычным способом. С другой стороны,
    если компонент был вызван через веб-сервис, SCA на стороне сервиса ловит
    бизнес-исключения и гарантирует, что они будут переданы обратно вызывающему 
    компоненту и брошены повторно. Предполагая, что вызывающий компонент имеет
    определение исключения (то есть может включать файл, содержащий класс PHP,
    определяющий исключение), повторное исключение будет содержать те же детали, что и
    оригинал, так что функции <function>getLine</function> и <function>getFile</function>,
    будут содержать место, где исключение было брошено в бизнес-логике. Исключение 
    будет передано в поле описания ошибки SOAP-запроса с кодом ошибки 'Client'.
   </para>
  </section>
  <!-- }}} -->
  
 </section>
 <!-- }}} -->
 
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

