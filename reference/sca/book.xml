<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330340 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->

<!-- State: experimental -->

<book xml:id="book.sca" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>SCA</title>
 
 <!-- {{{ preface -->
 <preface xml:id="intro.sca">
  &reftitle.intro;
  &warn.experimental;
  <para>
   SCA для PHP предназначено для облегчения создания переиспользуемых компонентов,
   обладающих унифицированным интерфейсом и различными моделями использования.
   В данный момент компоненты общаться либо локально, либо через веб-сервисы, но
   в будущем планируется расширить список способов доступа. В целом это расширение
   создавалось для облегчения жизни разработчика.
  </para>
  
  <para> 
   Компоненты SCA используют аннотации phpDocumentor (см. Http://www.phpdoc.org/) 
   для инъекции зависимостей от других компонентов SCA или от веб-сервисов. 
   Во время исполнения SCA самостоятельно разрешает эти зависимости, что
   позволяет разработчику сфокусироваться на бизнес-логике и не заниматься
   самостоятельным отслеживанием зависимостей.
  </para>
  
  <para> 
   В будущем SCA может быть дополнена поддержкой REST, Atompub и т.д. 
   Но в настоящее время единственным поддерживаемым методом коммуникаций
   являются веб-сервисы (точнее, WSDL, SOAP / HTTP-сервисы).
  </para>
  
  <para>
   Также компоненты используют аннотации для определения интерфейса предоставляемого
   ими сервиса. Во время исполнения из этих аннотаций SCA автоматически генерирует WSDL.
   Для разработчиков знакомых с phpDocumentor работа с аннотациями не доставит каких
   либо проблем. Развертывание веб-сервиса никогда небыло настолько простым - достаточно
   просто разместить компонент в корене документов веб-сервера.
  </para>
  
  <para> 
   Также компоненты используют аннотации для определения структур данных
   (определенных с помощью сложных типов схемы XML), обарбатываемых с использованием
   Сервисных Объектов Данных (Service Data Objects или SDO). 
  </para>
  
  <para>
   PHP-скрипт, который не является компонентом SCA и не содержит аннотаций, может
   использовать службы компонента SCA. PHP-скрипт или компонент могут выполнять вызовы
   сторонних веб-сервисов, использующих ту же систему но использует ту же систему вызовов
   или аннотаций для получения ссылки.
  </para>
  
  <para> 
   Для начала мы покажем простой компонент SCA с именем ConvertedStockQuote,
   который продемонстрирует различные возможности SCA. Он содержит один
   метод <function>getQuote</function>, который будет по заданному названию
   искать котировки и конвертировать их в заданную валюту.
   Мы будем использовать этот пример в дальнейшем в описании функций
   для объяснения работы SCA.
  </para>
  
  <para>
   <example>
    <title>Простой компонент SCA</title>
    <programlisting role="php">
<![CDATA[
<?php

include "SCA/SCA.php";

/**
 * Вычисляем стоимость указанных акций в заданной валюте.
 *
 * @service
 * @binding.soap
 */
class ConvertedStockQuote {

    /**
     * Сервис получения курсов конвертации валют.
     *
     * @reference
     * @binding.php ../ExchangeRate/ExchangeRate.php
     */
    public $exchange_rate;

    /**
     * Сервис получения котировок.
     *
     * @reference
     * @binding.soap ../StockQuote/StockQuote.wsdl
     */
    public $stock_quote;

    /**
     * Получение стоимости акции в заданной валюте.
     *
     * @param string $ticker Название акции.
     * @param string $currency В какой валюте возвращать результат.
     * @return float Стоимость акции в заданной валюте.
     */
    function getQuote($ticker, $currency)
    {
        $quote  = $this->stock_quote->getQuote($ticker);
        $rate   = $this->exchange_rate->getRate($currency);
        return  $rate * $quote;
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para> 
   В этом примере показано, что компонент SCA реализован с помощью скрипта,
   в котором содержится описание класса и в который подключен скрипт
   <filename>SCA.php</filename>. Класс содержит смесь бизнес-логики и 
   отсылок к другим компонентам и веб-сервисам. В методе
   <function>getQuote</function> содержится только бизнес-логика, но она
   завязана на переменные класса <varname>$stock_quote</varname> и
   <varname>$exchange_rate</varname>.
   Тут наличествуют ссылки на два других компонента, которые будут 
   проинициализированы SCA во время исполнения и проксированы на 
   два конкретных сервиса, в независимости от того, где запускается этот компонент.
   Аннотации этих сервисов показывают, что один из них локальный - он будет
   запускаться в том же сеансе, что и наш PHP-скрипт, а второй удаленный и будет
   вызван с помощью SOAP-запроса. Также в этот компонент предастявляет метгод
   <function>getQuote</function> в качестве сервиса, который может быть вызван как 
   локально, так и удаленно.
  </para>
 </preface>
 <!-- }}} -->
 
 &reference.sca.setup;
 &reference.sca.constants;
 &reference.sca.examples;
 &reference.sca.reference;
 
</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

