<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 337059 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->
<phpdoc:classref xmlns:phpdoc="http://php.net/ns/phpdoc" xml:id="class.variant" xmlns="http://docbook.org/ns/docbook">
 <titleabbrev>VARIANT</titleabbrev>
 <title>Класс VARIANT</title>
 <partintro>
  
  <section xml:id="class.variant.class">
   <title>Описание</title>
   <simpara>
    VARIANT - это эквивалент zval для COM; это структура, которая может
    содержать значения различных допустимых типов. Класс VARIANT
    входит в расширение COM и позволяет более полно контролировать
    значения передаваемые от PHP к COM и обратно.
   </simpara>
   <simpara>
    <literal>$vVar = new VARIANT($var)</literal>
   </simpara>
  </section>
  <section xml:id="variant.variant">
   <title>Methods</title>
   <methodsynopsis>
    <methodname>VARIANT::__construct</methodname>
    <methodparam choice="opt"><type>mixed</type><parameter>value</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>codepage</parameter></methodparam>
   </methodsynopsis>
   <para>
    Конструктор класса VARIANT. Параметры:
    <variablelist>
     <varlistentry><term>value</term>
      <listitem>
       <simpara>
        начальное значение. Если не задано или задано как &null;, то будет создан
        объект VT_EMPTY.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry><term>type</term>
      <listitem>
       <simpara>
        задает тип контента объекта VARIANT. Одна из констант 
        <constant>VT_XXX</constant> <xref linkend="com.constants"/>.
       </simpara>
       <simpara>
        В PHP до версии 5, было необходимо принудительно передавать объект
        по ссылке на битовое ИЛИ <constant>VT_BYREF</constant>
        с <parameter>type</parameter>.  В PHP 5, этот хак не поддерживается;
        PHP 5определяет значения передаваемые по ссылке автоматически;
        они даже не должны передаваться как объекты VARIANT.
       </simpara>
       <simpara>
        Дополнительную информацию по типам VARIANT читайте
        в библиотеке <acronym>MSDN</acronym>.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry><term>codepage</term>
      <listitem>
       <simpara>
        Определяет кодировку используемую при преобразовании строк в Unicode.
        Смотрите описание параметра с таким же именем для
        <xref linkend="class.com"/>.
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
   <para>
    PHP версий меньше 5 определяет некоторое количество (недокументированных)
    виртуальных свойств для экземпляров класса VARIANT; все эти свойства были удалены в 
    PHP 5 в пользу более правильного синтаксиса. Эти изменения проще всего показать
    на примере:
   </para>
   <para>
    <example xml:id="com.variant.example.php4">
     <title>Пример использования Variant в стиле PHP 4.x</title>
     <programlisting role="php">
<![CDATA[
<?php
$v = new VARIANT(42);
print "The type is " . $v->type . "<br/>";
print "The value is " . $v->value . "<br/>";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example xml:id="com.variant.example.php5">
    <title>Пример использования Variant в стиле PHP 5</title>
    <programlisting role="php">
<![CDATA[
<?php
$v = new VARIANT(42);
print "The type is " . variant_get_type($v) . "<br/>";
print "The value is " . $v . "<br/>";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Причина этого изменения в том, что внутри расширения COM классы
   VARIANT, COM и DOTNET - являются одним и тем же. и философия этих классов 
   заключается в том, что все свойства и доступ к ним передаются через COM
   без использования интерфейсов. Новый синтаксис более правильный и простой и
   большинство удаленных виртуальных свойств не давали представления о
   происходящем в контексте PHP.
  </para>
  <note>
   <para>
    PHP 5 использует гораздо более простой подход к обработке VARIANT; когда
    возвращается значение или извлекается свойство, VARIANT преобразуется
    в значение PHP только если есть прямая связь между типами что не приведет 
    к потере информации. Во всех остальных случаях результат вернется в виде
    экземпляра класса VARIANT.  Вы можете принудительно указать PHP 
    конвертировать значения в типы PHP используя оператор приведения типов
    или же преобразовывать их в строку используя функцию <function>print</function>.
    Вы можете использовать множество функций класса для арефметических
    операций без приведения значений к типам PHP с риском потери точности.
   </para>
  </note>
  <para>
   Также смотрите <function>variant_get_type</function>.
  </para>
  </section>
  
 </partintro>
</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
