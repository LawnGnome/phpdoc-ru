<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 341282 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->
<!-- splitted from ./en/functions/com.xml, last change in rev 1.12 -->
<phpdoc:classref xmlns:phpdoc="http://php.net/ns/phpdoc" xml:id="class.com" xmlns="http://docbook.org/ns/docbook">
 <titleabbrev>COM</titleabbrev>
 <title>Класс COM</title>
 <partintro>
  
  <section xml:id="class.com.class">
   <title>Description</title>
   <simpara>
    Класс COM позволяет создавать совместимые с OLE объекты COM,
    вызывать их методы и получать доступ к их свойствам.
   </simpara>
   <simpara>
    <literal>$obj = new COM("Application.ID")</literal>
   </simpara>
  </section>
  <section xml:id="com.com">
   <title>Methods</title>
   <methodsynopsis>
    <methodname>COM::__construct</methodname>
    <methodparam><type>string</type><parameter>module_name</parameter></methodparam>
    <methodparam choice="opt"><type>mixed</type><parameter>server_name</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>codepage</parameter></methodparam>
    <methodparam choice="opt"><type>string</type><parameter>typelib</parameter></methodparam>
   </methodsynopsis>
   <para>
    Конструктор класса COM. Параметры имеет следующие назначения:
    <variablelist>
     <varlistentry>
      <term>module_name</term>
      <listitem>
       <simpara>
        Может быть ProgID, Class ID или Moniker указывающий компонент для загрузки.
       </simpara>
       <simpara>
        ProgID - это обычно имя приложения или DLL, после которого, через точку,
        задано имя объекта. Например: <literal>Word.Application</literal>.
       </simpara>
       <simpara>
        Class ID - это UUID, который уникально идентифицирует заданный класс.
       </simpara>
       <simpara>
        Moniker - это специальная форма именования, похожая на концепцию URL,
        определяющая ресурс и способ его загрузки. К примеру, вы можете
        загрузить Word и взять объект, представляющий документ Word, указав
        полный путь в качестве имени модуля, или вы можете использовать
        <literal>LDAP:</literal> для использования интерфейса ADSI к LDAP.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>server_name</term>
      <listitem>
       <simpara>
        Имя сервера DCOM на котором должен быть загружен и выполнен компонент.
        Если установлено как &null;, будет использоваться значение приложения по умолчанию.
        Обычно значение по умолчанию означает локальный хост, но в принципе,
        администратор может задать запуск по умолчанию на другом сервере.
       </simpara>
       <simpara>
        Если задано значение отличное от &null;, PHP откажется загружать объект
        пока не будет разрешена опция конфигурации 
        <xref linkend="ini.com.allow-dcom"/>.
       </simpara>
       <para>
        Если <parameter>server_name</parameter> задан массивом, то он должен
        содержать следующие элементы (регистрозависимые!). Обратите внимание,
        что все эти опции необязательны (ну кроме того случая, что имя и пароль 
        друг без друга не имеют смысла). Если вы опустите строку Server, то
        будет использован сервер по умолчанию и создаваемый объект не будет
        обращать внимание на директиву <xref linkend="ini.com.allow-dcom"/>.
        <table>
         <title>Имя сервера DCOM</title>
         <tgroup cols="3">
          <thead>
           <row>
            <entry><parameter>server_name</parameter> key</entry>
            <entry>тип</entry>
            <entry>описание</entry>
           </row>
          </thead>
          <tbody>
           <row>
            <entry>Server</entry>
            <entry>string</entry>
            <entry>Имя сервера.</entry>
           </row>
           <row>
            <entry>Username</entry>
            <entry>string</entry>
            <entry>Имя пользователя.</entry>
           </row>
           <row>
            <entry>Password</entry>
            <entry>string</entry>
            <entry>Пароль для <parameter>Username</parameter>.</entry>
           </row>
           <row>
            <entry>Flags</entry>
            <entry>integer</entry>
            <entry>Одна или несколько констант объедененных побитовым ИМИ:
             <constant>CLSCTX_INPROC_SERVER</constant>,
             <constant>CLSCTX_INPROC_HANDLER</constant>,
             <constant>CLSCTX_LOCAL_SERVER</constant>,
             <constant>CLSCTX_REMOTE_SERVER</constant>,
             <constant>CLSCTX_SERVER</constant> и
             <constant>CLSCTX_ALL</constant>.  Значение по умолчанию равно
             <constant>CLSCTX_SERVER</constant> если вы также пропустили
             <parameter>Server</parameter>, или
             <constant>CLSCTX_REMOTE_SERVER</constant> если не пропустили.
             Описание значения данных констант читайте в документации Microsoft
             по CoCreateInstance. Скорее всего вам никогда не понадобится использовать это.
            </entry>
           </row>
          </tbody>
         </tgroup>
        </table>
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>codepage</term>
      <listitem>
       <simpara>
        Задает кодировку используемую для преобразования строк в Unicode
        и обратно. Преобразование производится при передаче строки PHP
        как параметра в объект COM и при получении из него результата.
       </simpara>
       <simpara>
        Возможные значения:
        <constant>CP_ACP</constant> (использовать системную кодировку ANSI по умолчанию -
        будет использоваться по умолчанию, если параметр опущен),
        <constant>CP_MACCP</constant>,
        <constant>CP_OEMCP</constant>, <constant>CP_SYMBOL</constant>,
        <constant>CP_THREAD_ACP</constant> (использовать кодировку/локаль запущенного 
        потока выполенения), <constant>CP_UTF7</constant>
        и <constant>CP_UTF8</constant>.  Также вы можете использовать номер кодировки.
        Более подробно кодировки и их числовые значения описаны в документации
        Microsoft.
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </section>
  
  <section xml:id="class.com.overloadedmethods">
   <title>Перегруженные методы</title>
   <para>
    Возвращаемые объекты являются перегруженными, тоесть PHP
    не видит каких либо фиксированных методов, как это происходит
    с обычными классами. Вместо этого свойства и доступ к методам 
    передается через COM.
   </para>
   <para>
    Начиная с PHP 5, PHP автоматически определяет методы, которые 
    обращаются к свойствам по ссылкам и автоматически преобразуют
    стандартные переменные PHP в вид, который можно передавать по ссылке.
    Это означает, чт о вы можете вызывать методы не внося каких либо
    дополнений в свой код.
   </para>
  </section>
  
  <section xml:id="class.com.falsemethods">
   <title>Псевдо методы</title>
   <para>
    В PHP до версии 5, для обработки следующих методов средствами PHP
    без передачи в COM применялся ряд довольно некрасивых хаков.
    В PHP 5 это поведение исправлено. Ниже описано, как следует изменить 
    ваши скрипты. Эти магические методы регистронезависимы.
   </para>
   <methodsynopsis xml:id="com.addref">
    <type>void</type><methodname>COM::AddRef</methodname>
    <void/>
   </methodsynopsis>
   <simpara>
    Искуственно добавляет подсчет ссылок в объект COM.
   </simpara>
   <warning>
    <simpara>
     Вам никогда не понадобится использовать этот метод.
     Он логически связан с методом Release(), описанным ниже.
    </simpara>
   </warning>
   <methodsynopsis xml:id="com.release">
    <type>void</type><methodname>COM::Release</methodname>
    <void/>
   </methodsynopsis>
   <simpara>
    Искуственно добавляет подсчет ссылок в объект COM.
   </simpara>
   <warning>
    <simpara>
     Вам никогда не понадобится использовать этот метод. Он присутствует в PHP
     в качестве искуственного бага, служащего для обхода другого бага, из-за 
     которого объект COM существовал дольше, чем должен бы.
    </simpara>
   </warning>
  </section>
  <section xml:id="class.com.iteratormethods">
   <title>Псевдо методы для итерирования</title>
   <para>
    Эти методы доступны только если функция
    <function>com_isenum</function> возвращает &true;, в этом случае они скрывают
    любые методы с такими же именами, присутствубщие в объекте COM.
    Эти методы удалены в PHP 5, используйте вместо них
    <xref linkend="com.examples.foreach"/>.
   </para>
   <methodsynopsis xml:id="com.all">
    <type>variant</type><methodname>COM::All</methodname>
    <void/>
   </methodsynopsis>
   <simpara>
    Возвращает вариант представляющий SafeArray имеющий 10 элементов;
    Каждый элемент будет пустым(&null;) вариантом. Эта функция должна 
    была вернуть массив состоящий из всех элементов итератора, но
    так и не была дописана. Не используйте ее.
   </simpara>
   <methodsynopsis xml:id="com.next">
    <type>variant</type><methodname>COM::Next</methodname>
    <void/>
   </methodsynopsis>
   <simpara>
    Возвращает вариант представляющий следующий элемент
    итератора, или &false;, если элементов не осталось.
   </simpara>
   <methodsynopsis xml:id="com.prev">
    <type>variant</type><methodname>COM::Prev</methodname>
    <void/>
   </methodsynopsis>
   <simpara>
    Возвращает вариант представляющий предыдущий элемент
    итератора, или &false;, если элементов не осталось.
   </simpara>
   <methodsynopsis xml:id="com.reset">
    <type>void</type><methodname>COM::Reset</methodname>
    <void/>
   </methodsynopsis>
   <simpara>
    Перематывает итератор на первый элемент.
   </simpara>
  </section>
  <section xml:id="class.com.examples">
   <title>Примеры COM</title>
   <para>
    <example xml:id="example.com1">
     <title>Первый пример</title>
     <programlisting role="php">
<![CDATA[
<?php
// запускаем word
$word = new COM("word.application") or die("Unable to instantiate Word");
echo "Loaded Word, version {$word->Version}\n";

//делаем его активным окном
$word->Visible = 1;

//открываем пустой документ
$word->Documents->Add();

//Что то с ним делаем
$word->Selection->TypeText("This is a test...");
$word->Documents[1]->SaveAs("Useless test.doc");

//закрываем word
$word->Quit();

//высвобождаем ресурсы объекта
$word = null;
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example xml:id="example.com2">
     <title>Второй пример</title>
     <programlisting role="php">
<![CDATA[
<?php

$conn = new COM("ADODB.Connection") or die("Cannot start ADO");
$conn->Open("Provider=SQLOLEDB; Data Source=localhost;
Initial Catalog=database; User ID=user; Password=password");

$rs = $conn->Execute("SELECT * FROM sometable");    // Набор записей

$num_columns = $rs->Fields->Count();
echo $num_columns . "\n";

for ($i=0; $i < $num_columns; $i++) {
    $fld[$i] = $rs->Fields($i);
}

$rowcount = 0;
while (!$rs->EOF) {
    for ($i=0; $i < $num_columns; $i++) {
        echo $fld[$i]->value . "\t";
    }
    echo "\n";
    $rowcount++;            // увеличиваем счетчик строк
    $rs->MoveNext();
}

$rs->Close();
$conn->Close();

$rs = null;
$conn = null;

?>
]]>
    </programlisting>
   </example>
   </para>
  </section>
  
 </partintro>
</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
