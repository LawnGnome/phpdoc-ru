<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338913 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="mysqlinfo.concepts" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Основные понятия</title>
 <para>
  Эти основные понятия связанные с драйвером MySQL  для PHP.
 </para>

 <section xml:id="mysqlinfo.concepts.buffering">
  <title>Буферизированные и небуферизированные запросы</title>
  
  <para>
   По умолчанию запросы используют режим буферизации. Это значит, что результаты запроса
   немедленно поступают от сервера MySQL к PHP и размещаются в памяти PHP процесса. Это делает
   возможными такие операции как подсчет количества строк и перемещение текущего
   значения указателя на строку результирующего набора. Это так же дает возможность ввести следующие
   запросы в том же соединении прямо во время работы над обработкой результата последнего запроса.
   Оборотная сторона режима буферизации - то, что большие массивы резульатов могут потребовать
   достаточно большое количество оперативной памяти.
   Пямять остается занятой до тех пор пока все указатели на результирующий набор не будут
   удалены или результирующий набор не будет явно освобожден, что автоматически происходит
   во время окончания последнего запроса.
   Термин "размещение результата" ("store result") так же применим для режима буферизации,
   как если бы весь результат был размещен за раз.
  </para>

  <note>
   <para>
    При использовании libmysqlclient как библиотеки, ограничение памяти PHP (ini: memory_limit)
    не будет учитывать память используемую для результирующих наборов до тех пор пока
    данные не будут переданы в переменные PHP.
    С mysqlnd учёт пямяти так же будет включать в себя размер результирующего набора.
   </para>
  </note>
  
  <para>
   Небуферизированные MySQL заросы выполняются и возвращают <type>resource</type>
   пока данные ожидают получения на MySQL сервере. Это расходует меньше памяти
   на стороне PHP, но может увеличить нагрузку на сервер. Пока полный рузультирующий набор
   не будет передан с сервера, следующий запрос не сможет быть отправлен через это же
   соединение. Небуферизированные запросы так же могут быть отложены как "use result".
  </para>

  <para>
   Следующие характеристики буферизированных запросов должны быть использвоаны в случаях,
   когда вы ожидаете только ограниченный результирующий набор или хотите знать количесво
   возвращаемых строк до прочтения всех строк. Небуферизированный режим должен быть использован
   если вы ожидаете большие размеры результирующих наборов.
  </para>
  
  <!-- @TODO
    - Add list of issues people run into with unbuffered queries
    - Add list of specific use cases for when unbuffered queries are useful
    - Question: Unbuffered queries still require all rows to be returned or resource free before executing another? Applies to all extensions?
    - Show "free_result" functions / unset usage with buffered queries 8double-check with Andrey on mysqlnd optimizations
   -->
  
  <para>
   Поскольку буферизированные запросы применяются по умолчанию, следующие примеры продемонстрируют
   как выполнить небуферизированные запросы в каждом из API
  </para>

  <example>
   <title>Пример небуферизированного запроса: mysqli</title>
   <programlisting role="php">
<![CDATA[
<?php
$mysqli  = new mysqli("localhost", "my_user", "my_password", "world");
$uresult = $mysqli->query("SELECT Name FROM City", MYSQLI_USE_RESULT);

if ($uresult) {
   while ($row = $uresult->fetch_assoc()) {
       echo $row['Name'] . PHP_EOL;
   }
}
$uresult->close();
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Пример небуферизированного запроса: pdo_mysql</title>
   <programlisting role="php">
<![CDATA[
<?php
$pdo = new PDO("mysql:host=localhost;dbname=world", 'my_user', 'my_pass');
$pdo->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);

$uresult = $pdo->query("SELECT Name FROM City");
if ($uresult) {
   while ($row = $uresult->fetch(PDO::FETCH_ASSOC)) {
       echo $row['Name'] . PHP_EOL;
   }
}
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Пример небуферизированного запроса: mysql</title>
   <programlisting role="php">
<![CDATA[
<?php
$conn = mysql_connect("localhost", "my_user", "my_pass");
$db   = mysql_select_db("world");

$uresult = mysql_unbuffered_query("SELECT Name FROM City");
if ($uresult) {
   while ($row = mysql_fetch_assoc($uresult)) {
       echo $row['Name'] . PHP_EOL;
   }
}
?>
]]>
   </programlisting>
  </example>
 </section>

 <section xml:id="mysqlinfo.concepts.charset">
  <title>Кодировки символов (Character sets)</title>

  <para>
   В идеальном случае кодировка символов должна устанавливаться на уровне сервера и делать
   это согласно описанию в разделе
   <link xlink:href="&url.mysql.charsets.config;">Конфигурация кодировки символов</link>
   документации Сервера MySQL.
   В качестве альтернативы каждый MySQL API предлагает метод (ф-ию)
   для установки кодировки символов во время выполнения.
  </para>

  <caution>
   <title>Кодировка символов и экранирование (символов)</title>
   <para>
    Кодировка символов должна быть четко определена, поскольку влияет на каждое действие,
    в том числе на действия с последствиями для безопасности.
    Для примера, механизмы экранирования (такие как <function>mysqli_real_escape_string</function> для mysqli, <function>mysql_real_escape_string</function>
    для mysql, and <methodname>PDO::quote</methodname> для PDO_MySQL) зависят от этих настроек.
    Важно понимать, что эти функции (<function>mysqli_real_escape_string</function> и пр...) не используют кодировку символов определенную в запросе, так для примера следующие запросы не будут вляить на поведение этих ф-ий
   </para>
  </caution>

  <example>
   <title>Проблемы установки кодировки символов с помощью SQL</title>
   <programlisting role="php">
<![CDATA[
<?php

$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

// Этот запрос не влияет на поведение ф-ии $mysqli->real_escape_string();
$mysqli->query("SET NAMES utf8");

// И этот не влияет на $mysqli->real_escape_string();
$mysqli->query("SET CHARACTER SET utf8");

// но вот этот запрос повлияет на поведение ф-ии $mysqli->real_escape_string();
$mysqli->set_charset('utf8');

// а этот НЕ повлияет, потому что нельзя использовать "-" тире/дефис
$mysqli->set_charset('utf-8'); // (utf8, а не utf-8)

?>
]]>
   </programlisting>
  </example>

  <para>
   Примеры ниже демонстрируют как поавильно изменять кодировку символов
   во время выполнения используя каждый из API.
  </para>
  
  <note>
   <title>Позвможная путаница с UTF-8</title>
   <para>
    Поскольку имена кодировок символов в MySQL не содержат тире/дефис,
    строка "utf8" применяется в MySQL для установки кодировки UTF-8.
    Строка "utf-8" не приемлема и потерпит неудачу при установке кодировки имволов.
   </para>
  </note>

  <example>
   <title>Пример установки кодировки символов: mysqli</title>
   <programlisting role="php">
<![CDATA[
<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

printf("Initial character set: %s\n", $mysqli->character_set_name());

if (!$mysqli->set_charset('utf8')) {
    printf("Error loading character set utf8: %s\n", $mysqli->error);
    exit;
}

echo "New character set information:\n";
print_r( $mysqli->get_charset() );

?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Пример установки кодировки символов: <link linkend="ref.pdo-mysql.connection">pdo_mysql</link></title>
   <para>
    Note: This only works as of PHP 5.3.6.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$pdo = new PDO("mysql:host=localhost;dbname=world;charset=utf8", 'my_user', 'my_pass');
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Пример установки кодировки символов: mysql</title>
   <programlisting role="php">
<![CDATA[
<?php
$conn = mysql_connect("localhost", "my_user", "my_pass");
$db   = mysql_select_db("world");

echo 'Initial character set: ' .  mysql_client_encoding($conn) . "\n";

if (!mysql_set_charset('utf8', $conn)) {
    echo "Error: Unable to set the character set.\n";
    exit;
}

echo 'Your current character set is: ' .  mysql_client_encoding($conn);
?>
]]>
   </programlisting>
  </example>  
 </section>

</chapter>
