<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 297028 Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->
<refentry xml:id="function.xslt-process" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>xslt_process</refname>
  <refpurpose>
   Запуск <acronym>XSLT</acronym> преобразования
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>xslt_process</methodname>
   <methodparam><type>resource</type><parameter>xh</parameter></methodparam>
   <methodparam><type>string</type><parameter>xmlcontainer</parameter></methodparam>
   <methodparam><type>string</type><parameter>xslcontainer</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>resultcontainer</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>arguments</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>parameters</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>xslt_process</function> - главная функция расширения
   <acronym>XSLT</acronym>. Она позволяет применить <acronym>XSLT</acronym>
   преобразование практически к любому типу входных данных - контейнеров. Это
   возможно, благодаря использованию буферов аргументов - концепция, взятая
   из <productname>Sablotron</productname> <acronym>XSLT</acronym> процессора
   (на данный момент это расширение поддерживает только <acronym>XSLT</acronym>
   процессор). По умолчанию, контейнеры - файлы содержащие документ для 
   преобразования.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>xh</parameter></term>
     <listitem>
      <para>
       Ресурс <acronym>XSLT</acronym>-процессора, возвращаемый функцией 
       <function>xslt_create</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>xmlcontainer</parameter></term>
     <listitem>
      <para>
       Путь к <acronym>XML</acronym> файлу или псевдопеременная для
       <acronym>XML</acronym> аргумента.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>xslcontainer</parameter></term>
     <listitem>
      <para>
       Путь к <acronym>XSL</acronym> файлу или псевдопеременная для
       <acronym>XML</acronym> аргумента. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>resultcontainer</parameter></term>
     <listitem>
      <para>
       Контейнер для результата. По умолчанию, это имя файла для записи
       преобразованного документа. Если не задано - то есть &null; -
       то результат будет возвращен из функции.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arguments</parameter></term>
     <listitem>
      <para>
       Вместо явного указания аргументов <acronym>XML</acronym> и 
       <acronym>XSLT</acronym> в функции <function>xslt_process</function>
       можно задать &quot;псевдопеременные&quot;, которые будут заменяться
       значениями из отдельного массива аргументов
       <parameter>arguments</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameters</parameter></term>
     <listitem>
      <para>
       Массив параметров, которые будут передаваться в XSLT-документ. Доступ
       к этим параметрам из XSL файлов можно получить, используя инструкцию
       <literal>&lt;xsl:param name=&quot;имя_параметра&quot;&gt;</literal>.
       Параметры должны быть закодированы в UTF-8, а их значения будут
       интерпретированы <productname>Sablotron</productname> процессором, как
       символьные строки. Другими словами, нельзя передавать
       <literal>узлы и поддеревья</literal> в качестве параметров в
       <acronym>XSLT</acronym> документ.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <para>
   Контейнеры также могут быть заданы в виде массива
   <parameter>arguments</parameter> (см. ниже).
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success; Если контейнер для результата не задан - т.е. &null; -
   будет возвращен результат преобразования.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.0.6</entry>
       <entry>
        Эта функция больше не принимает XML строки в качестве значений
        <parameter>xmlcontainer</parameter> или 
        <parameter>xslcontainer</parameter>. Передача строк с XML данными в
        качестве какого-либо из этих параметров приведет к ошибке распределения 
        памяти в версиях Sablotron ранее 0.95 включительно.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   Простейший тип преобразования с помощью функции
   <function>xslt_process</function> - это преобразование 
   <acronym>XML</acronym> файла с файлом <acronym>XSLT</acronym> и помещение
   результата в третий файл, который будет содержать новый
   <acronym>XML</acronym> (или HTML) документ. Делать подобные преобразования
   с помощью <productname>Sablotron</productname> довольно просто...
  </para>
  <example>
   <title>
    Использование функции <function>xslt_process</function> для преобразования
    <acronym>XML</acronym> и <acronym>XSL</acronym> файлов в новый 
    <acronym>XML</acronym> файл
   </title>
   <programlisting role="php">
<![CDATA[
<?php

// Создание нового XSLT процессора
$xh = xslt_create();

// Преобразование документа
if (xslt_process($xh, 'sample.xml', 'sample.xsl', 'result.xml')) {
    echo "УСПЕХ, sample.xml преобразован в соответствии с sample.xsl в result.xml";
    echo ", содержимое result.xml:\n<br />\n";
    echo "<pre>\n";
    readfile('result.xml');
    echo "</pre>\n";
} else {
    echo "К сожалению, sample.xml не может быть преобразован в соответсвии с sample.xsl в";
    echo "  result.xml по следующей причине: " . xslt_error($xh) . ", код ошибки: ";
    echo xslt_errno($xh);
}

xslt_free($xh);

?>
]]>
   </programlisting>
  </example>
  <para>
   Зачастую, особенно это относится к web окружению, требуется прямой вывод 
   результата преобразования. Этого можно добиться, если опустить третий 
   аргумент функции <function>xslt_process</function> (или передать в качестве
   него &null;). В этом случае функция вернет результат
   <acronym>XSLT</acronym> преобразования без помещения его в файл...
  </para>
  <para>
   <example>
   <title>
    Использование функции <function>xslt_process</function>
    для преобразования <acronym>XML</acronym> и <acronym>XSL</acronym>
    файлов в переменную, содержащую результирующие XML данные
    </title>
   <programlisting role="php">
<![CDATA[
<?php

// Создание нового XSLT processor
$xh = xslt_create();

// Преобразование документа, возврат результата в переменную $result
$result = xslt_process($xh, 'sample.xml', 'sample.xsl');
if ($result) {
    echo " УСПЕХ, sample.xml преобразован в соответствии с sample.xsl в переменную \$result";
    echo ", содержимое переменной \$result следующее:\n<br />\n";
    echo "<pre>\n";
    echo $result;
    echo "</pre>\n";
} else {
    echo " К сожалению, sample.xml не может быть преобразован в соответсвии с sample.xsl в";
    echo " переменную \$result по следующей причине: " . xslt_error($xh);
    echo ". Код ошибки: " . xslt_errno($xh);
}

xslt_free($xh);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Приведенные выше ситуации и примеры являются наиболее общими и используются
   чаще всего. Однако, в ряде случаев <acronym>XML</acronym> и <acronym>XSLT</acronym>
   может быть получен из внешних источников, таких как база данных или сокет.
   В этих случаях <acronym>XML</acronym> и/или <acronym>XSLT</acronym> данные
   хранятся в переменных, а помещение их в файлы создаст дополнительные
   временные затраты, что для некоторых приложений критично. В этих
   исключительных ситуациях на помощь придет особый синтаксис
   &quot;аргументов&quot; <acronym>XSLT</acronym>. Вместо
   <acronym>XML</acronym> и <acronym>XSLT</acronym> файлов в качестве
   аргументов в функции <function>xslt_process</function> можно задать
   &quot;псевдопеременные&quot;, на места которых будут подставлены значения
   отдельного массива аргументов (5й аргумент функции
   <function>xslt_process</function>). Ниже представлен пример, в котором
   <acronym>XML</acronym> и <acronym>XSLT</acronym> преобразуются с
   сохранением результата в переменной и без использования файлов вообще.
  </para>
  <para>
   <example>
    <title>
     Использование функции <function>xslt_process</function> для преобразования
     <acronym>XML</acronym> и <acronym>XSL</acronym> данных, содержащихся в
     переменных и сохранения результата в другую переменную с
     <acronym>XML</acronym> кодом.
    </title>
    <programlisting role="php">
<![CDATA[
<?php
// $xml и $xsl содержат XML и XSL данные

$arguments = array(
     '/_xml' => $xml,
     '/_xsl' => $xsl
);

// Создаем новый XSLT-процессор
$xh = xslt_create();

// Преобразование документа
$result = xslt_process($xh, 'arg:/_xml', 'arg:/_xsl', NULL, $arguments);
if ($result) {
    echo " УСПЕХ, sample.xml преобразован в соответствии с sample.xsl в переменную \$result";
    echo ", содержимое переменной \$result следующее:\n<br />\n";
    echo "<pre>\n";
    echo $result;
    echo "</pre>\n";
} else {
    echo " К сожалению, sample.xml не может быть преобразован в соответсвии с sample.xsl в";
    echo " переменную \$result по следующей причине: " . xslt_error($xh);
    echo ". Код ошибки: " . xslt_errno($xh);
}
xslt_free($xh);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Передача PHP переменных в XSL файлы</title>
    <programlisting role="php">
<![CDATA[
<?php

// XML строка
$xml = '<?xml version="1.0"?>
<para>
 change me
</para>';

// XSL строка
$xsl = '
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="html" encoding="ISO-8859-1" indent="no"
 omit-xml-declaration="yes"  media-type="text/html"/>
 <xsl:param name="myvar"/>
 <xsl:param name="mynode"/>
 <xsl:template match="/">
Моя PHP переменная : <xsl:value-of select="$myvar"/><br />
Мой набор узлов : <xsl:value-of select="$mynode"/>
 </xsl:template>
</xsl:stylesheet>';


$xh = xslt_create();

// второй параметр будет интерпретирован как строка
$parameters = array (
  'myvar' => 'test',
  'mynode' => '<foo>bar</foo>'
);

$arguments = array (
  '/_xml' => $xml,
  '/_xsl' => $xsl
);

echo xslt_process($xh, 'arg:/_xml', 'arg:/_xsl', NULL, $arguments, $parameters);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Моя PHP переменная : test<br>
Мой набор узлов : &lt;foo&gt;bar&lt;/foo&gt;
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  &note.xslt.windows;
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
