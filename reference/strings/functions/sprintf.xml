<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.9 Maintainer: blindman Status: ready -->
<!-- $Revision: 1.4 $ -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry id="function.sprintf">
   <refnamediv>
    <refname>sprintf</refname>
    <refpurpose>Возвращает отформатированную строку</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Описание</title>
     <methodsynopsis>
      <type>string</type><methodname>sprintf</methodname>
      <methodparam><type>string</type><parameter>format</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Возвращает строку, созданную с использованием строки формата
     <parameter>format</parameter>.
    </simpara>
    <simpara>
     Строка формата состоит из директив:
     обычных символов (за исключением <literal>%</literal>), которые 
     копируются в результирующую строку, и <emphasis>описатели
     преобразований</emphasis>, каждый из которых заменяется на один из 
     параметров.  Это относится также к <function>fprintf</function>,
     <function>sprintf</function> и <function>printf</function>.
    </simpara>
    <para>
     Каждый описатель прреобразований состоит из знака процента
     (<literal>%</literal>), за которым следует один или более 
     дополнительных элементов (в том порядке, в котором они здесь 
     перечислены):
     <orderedlist>
      <listitem>
       <simpara>
        Необязательный <emphasis>описатель заполнения</emphasis>, который
        определяет, какой символ будет использоваться для дополнения
        результата до необходимой длины. Это может быть пробел или
        <literal>0</literal>. По умолчанию используется пробел. 
        Альтернативный символ может быть указан с помощью <literal>'</literal>.
        См. примеры ниже.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Необязательный <emphasis>описатель выравнивания</emphasis>, 
        определяющий выранивание влево или вправо. По умолчанию 
        выравнивается вправо, <literal>-</literal> используется для 
        выравнивания влево.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Необязательное число, <emphasis>описатель ширины</emphasis>,
        определяющий минимальное число символов, которое будет содержать 
        результат этого преобразования.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Необязательный <emphasis>описатель точности</emphasis>, 
        определяющий, сколько десятичных разрядов отображать для чисел с 
        плавающей точкой. Имеет смысл только для числовых данных типа 
        <type>float</type>. (Для форматирования чисел удобно также 
        использовать функцию <function>number_format</function>.)
       </simpara>
      </listitem>
      <listitem>
       <para>
        <emphasis>Описатель типа</emphasis>, определяющий, как трактовать 
        тип данных аргумента. Допустимые типы:
        <simplelist>
         <member>
          <literal>%</literal> - символ процента. Аргумент не 
          используется.
         </member>
         <member>
          <literal>b</literal> - аргумент трактуется как целое и выводится 
          в виде двоичного числа.
         </member>
         <member>
          <literal>c</literal> - аргумент трактуется как целое и выводится 
          в виде символа с соответствующим кодом ASCII.
         </member>
         <member>
          <literal>d</literal> - аргумент трактуется как целое и выводится 
          в виде десятичного числа со знаком.
         </member>
         <member>
          <literal>e</literal> - аргумент трактуется как <type>float</type> и выводится 
          в научной нотации  (например 1.2e+2).
         </member>
         <member>
          <literal>u</literal> - аргумент трактуется как целое и выводится 
          в виде десятичного числа без знака.
         </member>
         <member>
          <literal>f</literal> - аргумент трактуется как <type>float</type> и выводится 
          в виде десятичного числа с плавающей точкой.
         </member>
         <member>
          <literal>o</literal> - аргумент трактуется как целое и выводится 
          в виде восьмеричного числа.
         </member>
         <member>
          <literal>s</literal> - аргумент трактуется как строка.
         </member>
         <member>
          <literal>x</literal> - аргумент трактуется как целое и выводится 
          в виде шестнадцатиричного числа (в нижнем регистре букв).
         </member>
         <member>
          <literal>X</literal> - аргумент трактуется как целое и выводится 
          в виде шестнадцатиричного числа (в верхнем регистре букв).
         </member>
        </simplelist>
       </para>
      </listitem>
     </orderedlist>
    </para>
    <para>
     Начиная с PHP 4.0.6 в строке формата поддерживается нумерация и изменение 
     порядка параметров. Например:
     <example>
      <title>Изменение порядка параметров</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = "There are %d monkeys in the %s";
printf($format, $num, $location);
?>
]]>
      </programlisting>
     </example>
     Этот код выведет "There are 5 monkeys in the tree".  Теперь 
     представьте, что строка формата содержится в отдельном файле, который 
     потом будет переведен на другой язык, и мы переписываем ее в таком 
     виде:
     <example>
      <title>Изменение порядка параметров</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = "The %s contains %d monkeys";
printf($format, $num, $location);
?>
]]>
      </programlisting>
     </example>
     Появляется проблема: порядок описателей преобразования не соответствует 
     порядку аргументов. Мы не хотим менять код, и нам нужно указать, 
     какому аргументу соответствует тот или иной описатель преобразования.
     <example>
      <title>Изменение порядка параметров</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = "The %2\$s contains %1\$d monkeys";
printf($format, $num, $location);
?>
]]>
      </programlisting>
     </example>
     Нумерация аргументов имеет еще одно применение: она позволят вывести
     один и тот же аргумент несколько раз без передачи функции 
     дополнительных параметров.
     <example>
      <title>Изменение порядка параметров</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = "The %2\$s contains %1\$d monkeys.
           That's a nice %2\$s full of %1\$d monkeys.";
printf($format, $num, $location);
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     См. также описание функций <function>printf</function>,
     <function>sscanf</function>, <function>fscanf</function>,
     <function>vsprintf</function> и
     <function>number_format</function>.
    </simpara>
   </refsect1>
   <refsect1>
    <title>Примеры</title>
    <para>
     <example>
      <title><function>sprintf</function>: заполнение нулями</title>
      <programlisting role="php">
<![CDATA[
<?php
$isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
?>
]]>
      </programlisting>
     </example>
     <example>
      <title><function>sprintf</function>: форматирование денежных величин</title>
      <programlisting role="php">
<![CDATA[
<?php
$money1 = 68.75;
$money2 = 54.35;
$money = $money1 + $money2;
// echo $money выведет "123.1";
$formatted = sprintf("%01.2f", $money);
// echo $formatted выведет "123.10"
?>
]]>
      </programlisting>
     </example>
     <example>
      <title><function>sprintf</function>: научная нотация</title>
      <programlisting role="php">
<![CDATA[
<?php
$number = 362525200;

echo sprintf("%.3e", $number); // выведет 3.63e+8
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
