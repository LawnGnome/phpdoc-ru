<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 309965 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.sprintf">
 <refnamediv>
  <refname>sprintf</refname>
  <refpurpose>Возвращает отформатированную строку</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>sprintf</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Возвращает строку, созданную с использованием строки формата
   <parameter>format</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       Строка формата состоит из нуля и более директив:
       обычных символов (за исключением <literal>%</literal>), которые
       копируются напрямую в результирующую строку, и <emphasis>описателей
       преобразований</emphasis>, каждый из которых заменяется на один из
       параметров.  Это относится как к <function>sprintf</function>,
       так и <function>printf</function>.
      </para>
      <para>
       Каждый описатель преобразований состоит из знака процента
       (<literal>%</literal>), за которым следует один или более
       дополнительных элементов (в том порядке, в котором они здесь
       перечислены):
       <orderedlist>
        <listitem>
         <simpara>
          Необязательный <emphasis>описатель знака</emphasis>, указывающий
          как знак (- или +) будет применен к числу. По умолчанию, используется
          только знак минус, если число отрицательное. Этот описатель
          заставляет положительные числа также отображать знак плюс,
          он был добавлен в PHP 4.3.0.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          Необязательный <emphasis>описатель заполнения</emphasis>, который
          определяет, какой символ будет использоваться для дополнения
          результата до необходимой длины. Это может быть пробел или
          <literal>0</literal>. По умолчанию используется пробел.
          Альтернативный символ может быть указан с помощью одиночной
          кавычки (<literal>'</literal>).
          См. примеры ниже.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          Необязательный <emphasis>описатель выравнивания</emphasis>,
          определяющий выранивание влево или вправо. По умолчанию
          выравнивается вправо, <literal>-</literal> используется для
          выравнивания влево.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          Необязательное число, <emphasis>описатель ширины</emphasis>,
          определяющий минимальное число символов, которое будет содержать
          результат этого преобразования.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          Необязательный <emphasis>описатель точности</emphasis>, указанный
          в форме точки ('.'), после которой следует необязательная строка
          из десятичных чисел, определяющая, сколько десятичных разрядов
          отображать для чисел с плавающей точкой. При использовании со
          строками этот описатель выступает в роли обрезающей точки,
          устанавливающей максимальный лимит символов.
         </simpara>
        </listitem>
        <listitem>
         <para>
          <emphasis>Описатель типа</emphasis>, определяющий, как трактовать
          тип данных аргумента. Допустимые типы:
          <simplelist>
           <member>
            <literal>%</literal> - символ процента. Аргумент не
            используется.
           </member>
           <member>
            <literal>b</literal> - аргумент трактуется как целое и выводится
            в виде двоичного числа.
           </member>
           <member>
            <literal>c</literal> - аргумент трактуется как целое и выводится
            в виде символа с соответствующим кодом ASCII.
           </member>
           <member>
            <literal>d</literal> - аргумент трактуется как целое и выводится
            в виде десятичного числа со знаком.
           </member>
           <member>
            <literal>e</literal> - аргумент трактуется как число в
            в научной нотации  (например, 1.2e+2).
            Описатель точности указывает на количество знаков после
            запятой, начиная с версии PHP 5.2.1. В более ранних версиях
            он обозначал количество значащих цифр (на один знак меньше).
           </member>
           <member>
            <literal>E</literal> - аналогично <literal>%e</literal>, но
            использует заглавную букву (например, 1.2E+2).
           </member>
           <member>
            <literal>u</literal> - аргумент трактуется как целое и выводится
            в виде десятичного числа без знака.
           </member>
           <member>
            <literal>f</literal> - аргумент трактуется как число с плавающей
            точкой и также выводится в зависимости от локали.
           </member>
           <member>
            <literal>F</literal> - аргумент трактуется как число с
            плавающей точкой и также выводится, но без зависимости от локали.
            Доступно, начиная с версии PHP 4.3.10 и PHP 5.0.3.
           </member>
           <member>
            <literal>g</literal> - выбирает самую краткую запись из <literal>%e</literal> и
            <literal>%f</literal>.
           </member>
           <member>
            <literal>G</literal> - выбирает самую краткую запись из <literal>%E</literal> и
            <literal>%f</literal>.
           </member>
           <member>
            <literal>o</literal> - аргумент трактуется как целое и выводится
            в виде восьмеричного числа.
           </member>
           <member>
            <literal>s</literal> - аргумент трактуется как строка.
           </member>
           <member>
            <literal>x</literal> - аргумент трактуется как целое и выводится
            в виде шестнадцатиричного числа (в нижнем регистре).
           </member>
           <member>
            <literal>X</literal> - аргумент трактуется как целое и выводится
            в виде шестнадцатиричного числа (в верхнем регистре).
           </member>
          </simplelist>
         </para>
        </listitem>
       </orderedlist>
      </para>
      <para>
       В строке формата поддерживается нумерация и изменение
       порядка параметров. Например:
       <example>
        <title>Изменение порядка параметров</title>
        <programlisting role="php">
<![CDATA[
<?php
$num = 5;
$location = 'дереве';

$format = '%d обезьян сидят на %s';
printf($format, $num, $location);
?>
]]>
        </programlisting>
       </example>
       Этот код выведет "5 обезьян сидят на дереве". Теперь
       представьте, что строка формата содержится в отдельном файле, который
       потом будет переведен на другой язык, и мы переписываем ее в таком
       виде:
       <example>
        <title>Изменение порядка параметров</title>
        <programlisting role="php">
<![CDATA[
<?php
$format = 'На %s сидят %d обезьян';
printf($format, $num, $location);
?>
]]>
        </programlisting>
       </example>
       Появляется проблема: порядок описателей преобразования не соответствует
       порядку аргументов. Мы не хотим менять код, и нам нужно указать,
       какому аргументу соответствует тот или иной описатель преобразования.
       <example>
        <title>Изменение порядка параметров</title>
        <programlisting role="php">
<![CDATA[
<?php
$format = 'На %2$s сидят %1$d обезьян';
printf($format, $num, $location);
?>
]]>
        </programlisting>
       </example>
       Нумерация аргументов имеет еще одно применение: она позволяет вывести
       один и тот же аргумент несколько раз без передачи функции
       дополнительных параметров.
       <example>
        <title>Изменение порядка параметров</title>
        <programlisting role="php">
<![CDATA[
<?php
$format = 'На %2$s сидят %1$d обезьян.
           Как здорово, когда на %2$s сидят %1$d обезьян.';
printf($format, $num, $location);
?>
]]>
        </programlisting>
       </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает строку, отформатированную в соответствии со строкой
   <parameter>format</parameter>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.0.6</entry>
       <entry>
        Добавлена поддержка нумерации/изменения порядка аргументов
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>sprintf</function>: заполнение нулями</title>
   <programlisting role="php">
<![CDATA[
<?php
$n =  43951789;
$u = -43951789;
$c = 65; // ASCII 65 is 'A'

// заметьте, двойной %% выводится как одинарный '%'
printf("%%b = '%b'\n", $n); // двоичное представление
printf("%%c = '%c'\n", $c); // выводит символ ascii, аналогично функции chr()
printf("%%d = '%d'\n", $n); // обычное целое число
printf("%%e = '%e'\n", $n); // научная нотация
printf("%%u = '%u'\n", $n); // беззнаковое целое представление положительного числа
printf("%%u = '%u'\n", $u); // беззнаковое целое представление отрицательного числа
printf("%%f = '%f'\n", $n); // представление числа с плавающей точкой
printf("%%o = '%o'\n", $n); // восьмеричное представление
printf("%%s = '%s'\n", $n); // строка
printf("%%x = '%x'\n", $n); // шестнадцатеричное представление (нижний регистр)
printf("%%X = '%X'\n", $n); // шестнадцатеричное представление (верхний регистр)

printf("%%+d = '%+d'\n", $n); // описатель знака с положительным целым числом
printf("%%+d = '%+d'\n", $u); // описатель знака с отрицательным целым числом
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
%b = '10100111101010011010101101'
%c = 'A'
%d = '43951789'
%e = '4.39518e+7'
%u = '43951789'
%u = '4251015507'
%f = '43951789.000000'
%o = '247523255'
%s = '43951789'
%x = '29ea6ad'
%X = '29EA6AD'
%+d = '+43951789'
%+d = '-43951789'
]]>
   </screen>
  </example>
  <example>
   <title><function>printf</function>: описатели строк</title>
   <programlisting role="php">
<![CDATA[
<?php
$s = 'monkey';
$t = 'many monkeys';

printf("[%s]\n",      $s); // обычный вывод строки
printf("[%10s]\n",    $s); // выравнивание вправо с пробелами
printf("[%-10s]\n",   $s); // выравнивание влево с пробелами
printf("[%010s]\n",   $s); // дополнение нулями также работает со строками
printf("[%'#10s]\n",  $s); // использование собственного дополняющего символа '#'
printf("[%10.10s]\n", $t); // выравнивание влево с обрезкой в 10 символов
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
[monkey]
[    monkey]
[monkey    ]
[0000monkey]
[####monkey]
[many monke]
]]>
   </screen>
  </example>
  <example>
   <title><function>sprintf</function>: целые числа, дополненные нулями</title>
   <programlisting role="php">
<![CDATA[
<?php
$isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
?>
]]>
   </programlisting>
  </example>
  <example>
   <title><function>sprintf</function>: форматирование денежных величин</title>
   <programlisting role="php">
<![CDATA[
<?php
$money1 = 68.75;
$money2 = 54.35;
$money = $money1 + $money2;
// echo $money выведет "123.1";
$formatted = sprintf("%01.2f", $money);
// echo $formatted выведет "123.10"
?>
]]>
   </programlisting>
  </example>
  <example>
   <title><function>sprintf</function>: научная нотация</title>
   <programlisting role="php">
<![CDATA[
<?php
$number = 362525200;

echo sprintf("%.3e", $number); // выведет 3.625e+8
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>printf</function></member>
    <member><function>sscanf</function></member>
    <member><function>fscanf</function></member>
    <member><function>vsprintf</function></member>
    <member><function>number_format</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
