<?xml version="1.0" encoding="windows-1251"?>
<!-- EN-Revision: 1.14 Maintainer: blindman Status: ready -->
<!-- $Revision: 1.1 $ -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry id="function.echo">
   <refnamediv>
    <refname>echo</refname>
    <refpurpose>Выводит одну или более строк</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Описание</title>
     <methodsynopsis>
      <type>void</type><methodname>echo</methodname>
      <methodparam><type>string</type><parameter>arg1</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>argn...</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Выводит все аргументы.
    </simpara>
    <para>
     На самом деле <function>echo</function> - это не функция, а 
     конструкция языка, поэтому заключать аргументы в скобки не 
     обязательно, даже при использовании нескольких аргументов.
    </para>
    <para>
     <example>
      <title>Примеры использования <function>echo</function></title>
      <programlisting role="php">
<![CDATA[
<?php
echo "Привет мир!";

echo "Это занимет
несколько строк. Переводы строки тоже
выводятся";

echo "Это занимет\nнесколько строк. Переводы строки тоже\nвыводятся";

echo "Экранирование символов делается \"Так\".";

// с echo можно использовать переменные ...
$foo = "foobar";
$bar = "barbaz";

echo "foo - это $foo"; // foo - это foobar

// ... и массивы
$bar = array("value" => "foo");

echo "это {$bar['value']} !"; // это foo !

// При использовании одиночных кавычек выводится
// имя переменной,а не значение
echo 'foo - это $foo'; // foo - это $foo

// можно вывести просто значения переменных
echo $foo;          // foobar
echo $foo,$bar;     // foobarbarbaz

// Некоторые предпочитают передачу нескольких аргументов
// вместо конкатенации
echo 'Эта ', 'строка ', 'была ', 'создана ', 'несколькими параметрами.', chr(10);
echo 'Эта ' . 'строка ' . 'была ' . 'создана ' . 'с помощью конкатенации.' . "\n";

echo <<<END
Здесь используется синтаксис "here document" для вывода
нескольких строк с подстановкой переменных $variable.
Заметьте,что закрывающий идентификатор должен 
располагаться в отдельной строке. никаких пробелов!
END;

// Следующая строка неверна, так как echo не является функцией
($some_var) ? echo 'true' : echo 'false';

// Но это можно записать по другому
($some_var) ? print('true'): print('false'); // print является функцией
echo $some_var ? 'true': 'false'; // echo вынесен за пределы выражения
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>echo</function> имеет также краткую форму, представляющую 
     собой знак равенства, следующий непосредственно за открывающим
     тэгом. Этот сокращенный синтаксис допустим только когда директива 
     конфигурации <link linkend="ini.short-open-tag">short_open_tag</link>
     включена.
     <informalexample>
      <programlisting role="php">
<![CDATA[
I have <?=$foo?> foo.
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Различия между <function>print</function> и <function>echo</function>
     рассматриваются в этой статье: 
     <ulink url="&url.echo-print;">&url.echo-print;</ulink>
    </simpara>
    
    &note.language-construct;
    
    <simpara>
     См. также описания функций
     <function>print</function>,
     <function>printf</function>, и
     <function>flush</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
