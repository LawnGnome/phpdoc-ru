<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: n/a Maintainer: sveta Status: ready -->
<!-- $Revision$ -->
<!-- splitted from ./en/functions/array.xml, last change in rev 1.2 -->
  <refentry xml:id="function.range" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>range</refname>
    <refpurpose>
     Создать массив, содержащий диапазон элементов
    </refpurpose>
   </refnamediv>
   <refsect1>
   <title>Описание</title>
    <methodsynopsis>
     <type>array</type><methodname>range</methodname>
     <methodparam><type>number</type><parameter>low</parameter></methodparam>
     <methodparam><type>number</type><parameter>high</parameter></methodparam>
     <methodparam choice="opt"><type>number</type><parameter>step</parameter></methodparam>
    </methodsynopsis>
    <para>
     <function>range</function> возвращает массив элементов с
     <parameter>low</parameter> по <parameter>high</parameter>,
     включительно.  Если low > high, последовательность будет убывающей.
    </para>
    <note>
     <title>New parameter</title>
     <simpara>
      Дополнительный параметр <parameter>step</parameter> был добавлен в PHP 5.0.0.
     </simpara>
    </note>
    <para>
     Если указан параметр <parameter>step</parameter>, он будет использоваться как
     инкремент между элементами последовательности. <parameter>step</parameter>
     должен быть положительным числом.  Если
     <parameter>step</parameter> не указан, он принимает значение по умолчанию 1.
    </para>
    <para>
     <example>
      <title>Примеры использования <function>range</function></title>
      <programlisting role="php">
<![CDATA[
<?php
// array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
foreach (range(0, 12) as $number) {
    echo $number;
}

// Параметр step был добавлен в 5.0.0
// array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
foreach (range(0, 100, 10) as $number) {
    echo $number;
}

// Использование последовательности знаков было добавлено в версии 4.1.0
// array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i');
foreach (range('a', 'i') as $letter) {
    echo $letter;
}
// array('c', 'b', 'a');
foreach (range('c', 'a') as $letter) {
    echo $letter;
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      До появления PHP 4.1.0, <function>range</function> создавала
      только массивы, содержащие диапазон чисел в порядке возрастания.
      Поддержка последовательностей знаков и создания диапазона в порядке
      убывания была добавлена в версии 4.1.0.  Диапазон знаков можно
      задать только при помощи строки из одного знака. Если длина такой строки будет более
      одного знака, будет использован первый знак.
     </para>
    </note>
    <caution>
     <para>
      В PHP версий с 4.1.0 по 4.3.2, <function>range</function> рассматривал
      числовые строки именно как строки, а не числа.  Вместо них использовалась
      последовательность знаков.  Например, <literal>"4242"</literal>
      трактовалось <literal>"4"</literal>.
     </para>
    </caution>
    <para>
     См. также <function>shuffle</function>,
     <function>array_fill</function> и
     <link linkend="control-structures.foreach">foreach</link>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

