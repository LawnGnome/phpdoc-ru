<?xml version="1.0" encoding="windows-1251"?>
<!-- EN-Revision: 1.21  Maintainer: sveta Status: ready -->
<!-- $Revision: 1.1 $ -->
<!-- splitted from ./en/functions/array.xml, last change in rev 1.2 -->
  <refentry id="function.usort">
   <refnamediv>
    <refname>usort</refname>
    <refpurpose>
     Отсортировать массив по значениям используя пользовательскую функцию для
     сравнения элементов
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Описание</title>
     <methodsynopsis>
      <type>bool</type><methodname>usort</methodname>
      <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
      <methodparam><type>callback</type><parameter>cmp_function</parameter></methodparam>
     </methodsynopsis>
    <para>
     Эта функция сортирует элементы массива, используя для сравнения значений
     пользовательскую функцию. Если вам нужно отсортировать массив по необычному
     критерию, вы должны использовать эту функцию.
    </para>
    <para>
     Функция, используемая для сравнения, должна возвращать целое число, меньшее,
     равное или большее нуля, если первый аргумент соответственно меньше,
     равен или больше второго.
    </para>
    <para>
     <note>
      <para>
       Если два элемента исходного массива равны, их порядок в отсортированном
       массиве неопределён. До PHP 4.0.6 пользовательские функции сохраняли
       для таких элеменов порядок в оригинальном массиве, но новый алгоритм
       сортировки, появившейся в версии 4.1.0 больше не использует это решение
       и не имеет другого эффективного.
      </para>
     </note>
    </para>
    <para>
     &return.success;
    </para>
    <para>
     <example>
      <title>Пример использования <function>usort</function></title>
      <programlisting role="php">
<![CDATA[
<?php
function cmp($a, $b) 
{
    if ($a == $b) {
        return 0;
    }
    return ($a < $b) ? -1 : 1;
}

$a = array(3, 2, 5, 6, 1);

usort($a, "cmp");

while (list($key, $value) = each($a)) {
    echo "$key: $value
";
}
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
0: 1
1: 2
2: 3
3: 5
4: 6
]]>
      </screen>
     </example>
    </para>
    <note>
     <para>
      Очевидно, что для этого тривиального случая более подходит функция
      <function>sort</function>.
     </para>
    </note>
    <para>
     <example>
      <title>
       Пример использования функцией <function>usort</function> многомерных массивов
      </title>
      <programlisting role="php">
<![CDATA[
<?php
function cmp($a, $b) 
{
    return strcmp($a["fruit"], $b["fruit"]);
}

$fruits[0]["fruit"] = "lemons";
$fruits[1]["fruit"] = "apples";
$fruits[2]["fruit"] = "grapes";

usort($fruits, "cmp");

while (list($key, $value) = each($fruits)) {
    echo "\$fruits[$key]: " . $value["fruit"] . "
";
}
?>
]]>
      </programlisting>
      <para>
       При сортировке многомерного массива переменные <varname>$a</varname> и
      <varname>$b</varname> содержат ссылки на первые два индекса массива.
      </para>
      &example.outputs;
      <screen>
<![CDATA[
$fruits[0]: apples
$fruits[1]: grapes
$fruits[2]: lemons
]]>
      </screen>
     </example>
    </para>

    <para>
     <example>
      <title>
       Пример использования <function>usort</function> с методом класса
      </title>
      <programlisting role="php">
<![CDATA[
<?php
class TestObj {
    var $name;

    function TestObj($name) 
    {
        $this->name = $name;
    }

    /* This is the static comparing function: */
    function cmp_obj($a, $b) 
    {
        $al = strtolower($a->name);
        $bl = strtolower($b->name);
        if ($al == $bl) {
            return 0;
        }
        return ($al > $bl) ? +1 : -1;
    }
}

$a[] = new TestObj("c");
$a[] = new TestObj("b");
$a[] = new TestObj("d");

usort($a, array("TestObj", "cmp_obj"));

foreach ($a as $item) {
    echo $item->name . "
";
}
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
b
c
d
]]>
      </screen>
     </example>
    </para>

    <para>
     См. также <function>uasort</function>,
     <function>uksort</function>, <function>sort</function>,
     <function>asort</function>,
     <function>arsort</function>,<function>ksort</function>,
     <function>natsort</function> и <function>rsort</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

