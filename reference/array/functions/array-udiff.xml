<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.9  Maintainer: sveta Status: ready -->
<!-- $Revision: 1.1 $ -->
<!-- splitted from ./en/functions/array.xml, last change in rev 1.14 -->
  <refentry id="function.array-udiff">
   <refnamediv>
    <refname>array_udiff</refname>
    <refpurpose>Вычислить расхождение массивов, используя для сравнения функцию обратного вызова</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Описание</title>
     <methodsynopsis>
      <type>array</type><methodname>array_udiff</methodname>
      <methodparam><type>array</type><parameter>array1</parameter></methodparam>
      <methodparam><type>array</type><parameter>array2</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter> ...</parameter></methodparam>
      <methodparam><type>callback</type><parameter>data_compare_func</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>array_udiff</function> возвращает массив,
     содержащий все значения параметра <parameter>array1</parameter>,
     отсутствующие в последующих аргументах.
     Обратите внимание, что ключи сохраняются. Для сравнения значений
     используется функция <parameter>data_compare_func</parameter>.
     Она должна возвращать целое число меньшее, равное или большее нуля, если
     первый параметр, соответственно, должен считаться меньше, равен или больше второго.
     Обратите внимание на отличие от <function>array_diff</function>, которая использует
     встроенную функцию для сравнения значений массивов.
    </para>
    <para>
     <example>
      <title>Пример использования <function>array_udiff</function></title>
      <programlisting role="php">
<![CDATA[
<?php
class cr {
    private $priv_member;
    function cr($val) 
    {
        $this->priv_member = $val;
    }
    
    function comp_func_cr($a, $b) 
    {
        if ($a->priv_member === $b->priv_member) return 0;
        return ($a->priv_member > $b->priv_member)? 1:-1;
    }
}
$a = array("0.1" => new cr(9), "0.5" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);
$b = array("0.2" => new cr(9), "0.5" => new cr(22), 0 => new cr(3), 1=> new cr(4), 2 => new cr(-15),);

$result = array_udiff($a, $b, array("cr", "comp_func_cr"));
print_r($result);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Array
(
    [0.5] => cr Object
        (
            [priv_member:private] => 12
        )

    [0] => cr Object
        (
            [priv_member:private] => 23
        )

)
]]>
      </screen>
     </example>
    </para>
    <note>
     <simpara>
      Обратите внимание, что эта функция обрабатывает только одно измерение многомерного
      массива. Разумеется, вы можете обработать более одного измерения, используя
      <literal>array_udiff($array1[0], $array2[0], "data_compare_func");</literal>.
     </simpara>
    </note>
    <para>
     См. также
     <function>array_diff</function>,
     <function>array_diff_assoc</function>,
     <function>array_diff_uassoc</function>,
     <function>array_udiff_assoc</function>, 
     <function>array_udiff_uassoc</function>, 
     <function>array_intersect</function>,  
     <function>array_intersect_assoc</function>,
     <function>array_uintersect</function>,  
     <function>array_uintersect_assoc</function> и 
     <function>array_uintersect_uassoc</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
