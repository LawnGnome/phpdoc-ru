<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 327439 Maintainer: tmn Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision: $ -->
<refentry xml:id="function.assert" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>assert</refname>
  <refpurpose>
   Проверка утверждения (равен ли результат &false;)
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>description</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>assert</function> проверит заданное утверждение
   <parameter>assertion</parameter> и совершит соответствующее действие, если 
   результатом проверки окажется &false;.
  </para>
  <para>
   Если <parameter>assertion</parameter> задается в виде строки, оно будет
   рассматриваться функцией <function>assert</function> как PHP код. Представление
   <parameter>assertion</parameter> в виде строки имеет свои преимущества.
   Во-первых, выключение проверки утверждений снижает накладные расходы. Во-вторых,
   сообщения о провале проверки будут содержать само утверждение
   <parameter>assertion</parameter>. То есть, если передать в качестве
   <parameter>assertion</parameter> какое-либо условное выражение, это условие
   невозможно будет получить в явном виде, в котором оно передавалось в проверяющую
   функцию, которую вы возможно определили с помощью
   <function>assert_options</function>. Это условное выражение будет вычислено и
   преобразовано в строку до вызова проверяющей функции, соответственно логическое
   &false; будет фигурировать в сообщении как пустая строка.
  </para>
  <para>
   Утверждения должны использоваться только в целях отладки. Их можно использовать
   для тестирования каких-то условий, которые в штатных ситуациях всегда принимают
   значение &true;, обратное должно указывать на программные ошибки. Также их можно
   использовать, чтобы удостовериться в наличии каких-либо расширений или системных
   ограничений.
  </para>
  <para>
   Утверждения не должны использоваться в обычных операциях, таких как проверка
   входных параметров. Скрипт должен корректно выполняться, если отключить проверку
   утверждений.
  </para>
  <para>
   Поведение функции <function>assert</function> можно изменять с помощью функции
   <function>assert_options</function> или заданием .ini-настроек.
  </para>
  <para>
   Функция <function>assert_options</function> и директива
   ASSERT_CALLBACK позволяют задать callback-функцию, которая будет вызываться
   при провале проверки утверждения.
  </para>
  <para>
   Возможность вызывать callback-функции из <function>assert</function> может
   быть полезна для создания автоматизированных тестовых пакетов. Посредством этих
   функций можно извлекать код, переданный на проверку вместе с информацией о том, 
   где эта проверка была осуществлена. Подобную информацию можно получить и другими
   методами, однако использование утверждений быстрей и проще.
  </para>
  <para>
   Callback-функция должна принимать три аргумента. Первый аргумент должен содержать
   файл, в котором утверждение не прошло проверку. Второй аргумент отвечает за
   номер строки в этом файле. В третьем аргументе будет передаваться выражение,
   содержащее ошибку (если таких несколько, строковые значение, вроде 1 или "два"
   не будут передаваться через этот аргумент). Пользователи PHP версий 5.4.8 и
   выше могут задать четвертый необязательный аргумент
   <parameter>description</parameter>, который будет также передан в функцию
   <function>assert</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>assertion</parameter></term>
     <listitem>
      <para>
       Утверждение.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>description</parameter></term>
     <listitem>
      <para>
       Дополнительное описание, которое будет включено в сообщение об ошибке,
       если проверка <parameter>assertion</parameter> завершится неудачей.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &false; в случае провала проверки, &true; в остальных случаях.
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.4.8</entry>
       <entry>
        Добавлен аргумент <parameter>description</parameter>. Также
        <parameter>description</parameter> передается четвертым аргументом в
        callback-функцию в режиме <constant>ASSERT_CALLBACK</constant>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>

  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     Обработка ошибочного утверждения пользовательским обработчиком
    </title>
    <programlisting role="php">
<![CDATA[
<?php
// Активируем проверку утверждений и сделаем его фоновым
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Создадим функцию обработчик
function my_assert_handler($file, $line, $code)
{
    echo "<hr>Проверка утвеждения провалена:
        Файл '$file'<br />
        Строка '$line'<br />
        Код '$code'<br /><hr />";
}

// Зададим callback-функцию
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Создадим заведомо неверную команду
assert('mysql_query("")');
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Использование пользовательского обработчика для вывода описания ошибки</title>
    <programlisting role="php">
<![CDATA[
<?php
// Активируем утверждение и переводим в тихий режим
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Создаем обработчик
function my_assert_handler($file, $line, $code, $desc = null)
{
    echo "Проверка завершилась неудачей в $file:$line: $code";
    if ($desc) {
        echo ": $desc";
    }
    echo "\n";
}

// Задаем callback-функцию
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Спровоцируем ошибку для проверки
assert('2 < 1');
assert('2 < 1', 'Два меньше одного');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Assertion failed at test.php:21: 2 < 1
Assertion failed at test.php:22: 2 < 1: Два меньше одного
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>assert_options</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
