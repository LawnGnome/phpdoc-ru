<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 326251 Maintainer: shein Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->
<!-- splitted from ./en/functions/pcre.xml, last change in rev 1.2 -->
<article xml:id="reference.pcre.pattern.modifiers" xmlns="http://docbook.org/ns/docbook">
 <title>Модификаторы шаблонов</title>
 <titleabbrev>Описывает возможные модификаторы шаблонов Perl-совместимых регулярных выражений (PCRE)</titleabbrev>
  <para>
   Ниже перечислены все доступные на сегодняшний день модификаторы.
   Имя, взятое в круглые скобки, указывает внутреннее PCRE имя для данного модификатора.
   Пробелы и переводы строк в модификаторах игнорируются, другие символы
   вызывают ошибки.
  </para>
  <para>
   <blockquote>
    <variablelist>
     <varlistentry>
      <term><emphasis>i</emphasis> (<literal>PCRE_CASELESS</literal>)</term>
      <listitem>
       <simpara>
        Если этот модификатор используется, символы в шаблоне
        соответствуют символам как верхнего, так и нижнего регистра.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>m</emphasis> (<literal>PCRE_MULTILINE</literal>)</term>
      <listitem>
       <simpara>
        По умолчанию PCRE обрабатывает данные как однострочную символьную строку
        (даже если она содержит несколько разделителей строк).
        Метасимвол начала строки '^' соответствует только началу
        обрабатываемого текста, в то время как метасимвол "конец строки"
        '$' соответствует концу текста, либо позиции перед
        завершающим текст переводом строки (в случае, если модификатор
        <emphasis>D</emphasis> не установлен). В Perl ситуация
        полностью аналогична.
       </simpara>
       <simpara>
        Если этот модификатор используется, метасимволы
        "начало строки" и "конец строки" также соответствуют
        позициям перед произвольным символом перевода и строки и,
        соответственно, после, как и в самом начале и в самом конце
        строки. Это соответствует Perl-модификатору /m.
        В случае, если обрабатываемый текст не содержит символов
        перевода строки, либо шаблон не содержит метасимволов '^'
        или '$', данный модификатор не имеет никакого эффекта.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>s</emphasis> (<literal>PCRE_DOTALL</literal>)</term>
      <listitem>
       <simpara>
        Если данный модификатор используется, метасимвол "точка"
        в шаблоне соответствует всем символам, включая перевод
        строк. Без него - всем, за исключением переводов строк.
        Этот модификатор эквивалентен записи /s в Perl.
        Класс символов, построенный на отрицании, например [^a],
        всегда соответствует переводу строки, независимо от
        наличия этого модификатора.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>x</emphasis> (<literal>PCRE_EXTENDED</literal>)</term>
      <listitem>
       <simpara>
        Если используется данный модификатор, неэкранированные
        пробелы, символы табуляции и пустой строки будут
        проигнорированы в шаблоне, если они не являются частью
        символьного класса. Также игнорируются все символы между
        неэкранированным символом '#' (если он не является частью
        символьного класса) и символом перевода строки (включая
        сами символы '\n' и '#'). Это эквивалентно Perl-модификатору
        /x, и позволяет размещать комментарий в сложных шаблонах.
        Замечание: это касается только символьных данных. Пробельные
        символы не фигурируют в служебных символьных последовательностях,
        к примеру, в последовательности '(?(', открывающей условную
        подмаску.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>e</emphasis> (<literal>PREG_REPLACE_EVAL</literal>)</term>
      <listitem>
       <simpara>
        Если используется данный модификатор, <function>preg_replace</function>
        после выполнения стандартных подстановок в заменяемой строке
        интерпретирует ее как PHP-код и использует результат для
        замены искомой строки.
        Одинарные и двойные кавычки, обратные слэши (<literal>\</literal>)
        NULL-символы будут проэкранированы обратными слэшами в
        подставляемых обратных ссылках.
       </simpara>
       <caution>
        <para>
         Прежде чем подставить значение обратной ссылки, к этому значению
         применяется функция addslashes. Таким образом, если обратная ссылка
         используется как строка в кавычках, то экранированные символы
         будут преобразованы в строковые константы. Однако проэкранированные
         символы, которые обычно не должны изменяться, сохраняют примененные
         к ним слэши. Это делает использование данного модификатора довольно
         проблематичным.
        </para>
       </caution>
       <caution>
        <para>
         Убедитесь, что параметр <parameter>replacement</parameter>
         содержит строку с корректным PHP-кодом, иначе PHP сообщит
         об ошибке парсинга на строке, содержащей вызов
         <function>preg_replace</function>.
        </para>
       </caution>
       <caution>
        <para>
         Использовать этот модификатор <emphasis>не рекомендуется</emphasis>, так как это может легко
         добавить уязвимости в системе безопасности:
        </para>
        <informalexample>
         <programlisting role="php">
<![CDATA[
<?php
$html = $_POST['html'];

// Заголовки в верхнем регистре
$html = preg_replace(
    '(<h([1-6])>(.*?)</h\1>)e',
    '"<h$1>" . strtoupper("$2") . "</h$1>"',
    $html
);
]]>
         </programlisting>
        </informalexample>
        <para>
         Приведенный выше код может быть легко скомпрометирован путем передачи такой строки как
         <literal>&lt;h1&gt;{${eval($_GET[php_code])}}&lt;/h1&gt;</literal>. Это дает атакующему
         возможность исполнить произвольный PHP-код и по существу предоставляет ему почти
         полный доступ к вашему серверу.
        </para>
        <para>
         Для предотвращения этого типа уязвимости с удаленным исполнением кода
         следует использовать функцию <function>preg_replace_callback</function>:
        </para>
        <informalexample>
         <programlisting role="php">
<![CDATA[
<?php
$html = $_POST['html'];

// Заголовки в верхнем регистре
$html = preg_replace_callback(
    '(<h([1-6])>(.*?)</h\1>)',
    function ($m) {
        return "<h$m[1]>" . strtoupper($m[2]) . "</h$m[1]>";
    },
    $html
);
]]>
         </programlisting>
        </informalexample>
       </caution>
       <note>
        <para>
         Этот модификатор используется только в функции
         <function>preg_replace</function>, в других PCRE функциях
         он игнорируется.
        </para>
       </note>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>A</emphasis> (<literal>PCRE_ANCHORED</literal>)</term>
      <listitem>
       <simpara>
        Если используется данный модификатор, соответствие шаблону
        будет достигаться только в том случае, если он "заякорен", т.е.
        соответствует началу строки, в которой производится поиск.
        Того же эффекта можно достичь подходящей конструкцией с вложенным
        шаблоном, которая является единственным способом реализации
        этого поведения в Perl.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>D</emphasis> (<literal>PCRE_DOLLAR_ENDONLY</literal>)</term>
      <listitem>
       <simpara>
        Если используется данный модификатор, метасимвол $ в шаблоне
        соответствует только окончанию обрабатываемых данных. Без
        этого модификатора метасимвол $ соответствует также позиции
        перед последним символом, в случае, если им является перевод
        строки (но не распространяется на любые другие переводы строк).
        Данный модификатор игнорируется, если используется модификатор
        <emphasis>m</emphasis>. В языке Perl аналогичный модификатор
        отсутствует.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>S</emphasis></term>
      <listitem>
       <simpara>
        В случае, если планируется многократно использовать шаблон,
        имеет смысл потратить немного больше времени на его анализ,
        чтобы уменьшить время его выполнения.
        В случае, если данный модификатор используется, проводится
        дополнительный анализ шаблона. В настоящем это имеет смысл
        только для "незаякоренных" шаблонов, не начинающихся с
        какого-либо определенного символа.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>U</emphasis> (<literal>PCRE_UNGREEDY</literal>)</term>
      <listitem>
       <simpara>
        Этот модификатор инвертирует жадность квантификаторов, таким
        образом они по умолчанию не жадные. Но становятся жадными,
        если за ними следует символ <literal>?</literal>. Такая
        возможность не совместима с Perl. Его также можно установить
        с помощью (<literal>?U</literal>)
        <link linkend="regexp.reference.internal-options">установки
        модификатора внутри шаблона</link> или добавив знак вопроса
        после квантификатора (например, <literal>.*?</literal>).
       </simpara>
       <note>
        <para>
         В нежадном режиме обычно невозможно совпадение символов
         превышающих <link
         linkend="ini.pcre.backtrack-limit">pcre.backtrack_limit</link>.
        </para>
       </note>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>X</emphasis> (<literal>PCRE_EXTRA</literal>)</term>
      <listitem>
       <simpara>
        Этот модификатор включает дополнительную функциональность
        PCRE, которая не совместима с Perl: любой обратный слэш в
        шаблоне, за которым следует символ, не имеющий специального
        значения, приводят к ошибке.
        Это обусловлено тем, что подобные комбинации зарезервированы для
        дальнейшего развития. По умолчанию же, как и в Perl, слэш
        со следующим за ним символом без специального значения трактуется как опечатка.
        На сегодняшний день это все возможности, которые управляются данным модификатором
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>J</emphasis> (<literal>PCRE_INFO_JCHANGED</literal>)</term>
      <listitem>
       <simpara>
        Модификатор (?J) меняет значение локальной опции
        <literal>PCRE_DUPNAMES</literal> - подшаблоны могут
        иметь одинковые имена.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>u</emphasis> (<literal>PCRE_UTF8</literal>)</term>
      <listitem>
       <simpara>
        Этот модификатор включает дополнительную функциональность PCRE,
        которая не совместима с Perl: шаблоны обрабатываются как UTF-8 строки.
        Модификатор u доступен в PHP 4.1.0 и выше для Unix-платформ,
        и в PHP 4.2.3 и выше для Windows платформ.
        Валидность UTF-8 в шаблоне проверяется начиная с PHP 4.3.5.
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </blockquote>
  </para>
</article>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
