<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1.7 Maintainer: blindman Status: ready -->
<!-- $Revision: 1.2 $ -->
<refentry id="function.sqlite-create-aggregate">
 <refnamediv>
  <refname>sqlite_create_aggregate</refname>
  <refpurpose>
   Регистрирует агрегатную функцию для использования в SQL запросах
  </refpurpose>
 </refnamediv>
 <refsect1>
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>sqlite_create_aggregate</methodname>
   <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
   <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>step_func</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>finalize_func</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>num_args</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>sqlite_create_aggregate</function> похожа на
   <function>sqlite_create_function</function>, за исключением того, что
   регистрирует функцию, которая может быть использована для вычисления
   результата на основе всех записей результата запроса.
  </para>
  <para>
   Главное отличие этой функции от <function>sqlite_create_function</function>
   состоит в том, что для работы агрегатной функции неоходимы 2 функции;
   <parameter>step_func</parameter> вызывается для каждой записи из результат
   запроса. Эта функция должна аккумулировать результат и сохранять его в
   контекстной переменной. После обработки всех записей, вызывается
   <parameter>finalize_func</parameter>, которая должна обработать данные из
   контекстной переменной и вернуть результат.
  </para>
  <para>
   <example>
    <title>Пример агрегатной функции max_length</title>
    <programlisting role="php">
<![CDATA[
<?php
$data = array(
   'one',
   'two',
   'three',
   'four',
   'five',
   'six',
   'seven',
   'eight',
   'nine',
   'ten',
   );
$dbhandle = sqlite_open(':memory:');
sqlite_query($dbhandle, "CREATE TABLE strings(a)");
foreach ($data as $str) {
    $str = sqlite_escape_string($str);
    sqlite_query($dbhandle, "INSERT INTO strings VALUES ('$str')");
}

function max_len_step(&$context, $string) 
{
    if (strlen($string) > $context) {
        $context = strlen($string);
    }
}

function max_len_finalize(&$context) 
{
    return $context;
}

sqlite_create_aggregate($dbhandle, 'max_len', 'max_len_step', 'max_len_finalize');

var_dump(sqlite_array_query($dbhandle, 'SELECT max_len(a) from strings'));

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   В этом примере, мы создаем агрегатную функцию, коорая возвращает длину
   самой длинной строки в одном из полей результата запроса. Для каждой
   записи, вызывается функция <literal>max_len_step</literal>, которой помимо
   строки передается контекстная переменная  <parameter>context</parameter>.
   Эту переменню вы можете использовать по своему усмотрению для накопления
   результатов вычислений. В нашем примере, в этой переменной хранится
   максимальная длина строки; если длина строки <parameter>string</parameter>
   больше, чем значение, сохраненное в контекстной переменной, контекстной
   переменной присваивается новое значение.
  </para>
  <para>
   После обработки всех записей, SQLite вызовет функцию
   <literal>max_len_finalize</literal> для определения результата агрегатной
   функции. Здесь можно было бы провести вычисления, основанные на значении
   контекстной переменной <parameter>context</parameter>, но в этом простейшем
   примере, все вычисления были произведены в процессе обработки запроса, и
   остается только вернуть полученное значение.
  </para>
  <note>
   <para>
    Приведенный выше пример будет работать некорректно, если прменить
    созданную функцию к бинарным данным. Описание функции
    <function>sqlite_udf_decode_binary</function> объясняет, почему это
    происходит и как этого избежать.
   </para>
  </note>
  <tip>
   <para>
    НЕ РЕКОМЕНДУЕТСЯ сохранять все полученные значения в контекстной
    переменной и затем производить все вычисления на последнем шаге, так как
    при этом SQLite может израсходовать большое количество памяти в процессе
    обработки запроса - представьте, сколько памяти потребуется, чтобы
    сохранить в памяти миллион записей, по 32 байта каждая.
   </para>
  </tip>
  <tip>
   <para>
    <function>sqlite_create_function</function> и
    <function>sqlite_create_aggregate</function> могут быть использованы для
    переопределения встроенных функций  SQLite.
   </para>
  </tip>
 </refsect1>
 <refsect1>
  &reftitle.seealso;
  <para>
   <function>sqlite_create_function</function>,
   <function>sqlite_udf_encode_binary</function> и
   <function>sqlite_udf_decode_binary</function>.
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
