<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="function.serialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>serialize</refname>
  <refpurpose>Генерирует пригодное для хранения представление переменной</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>string</type><methodname>serialize</methodname>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   </methodsynopsis>
  <para>
   Генерирует пригодное для хранения представление переменной
  </para>
  <para>
   Это полезно для хранения или передачи значений PHP между скриптами без
   потери типа и структуры.
  </para>
  <para>
   Для превращения сериализованной строки обратно в значение PHP, используйте
   функцию <function>unserialize</function>.  
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Значение, которое необходимо сериализовать. <function>serialize</function>
       обрабатывает все типы, кроме типа <type>resource</type>.
       Возможно также сериализовать массивы, которые содержат
       ссылки на себя. Циклические ссылки внутри массива/объекта, который необходимо 
       сериализовать, также сохраняются. Любые другие 
       ссылки будут потеряны.
      </para>
      <para>
       При сериализации объекта PHP пытается вызвать магический метод
       <link linkend="language.oop5.magic">__sleep</link> перед сериализацией. 
       Это делается для того, чтобы позволить объекту в последний момент произвести очистку, и т.д. перед 
       сериализацией. Так же, когда объект восстанавливается с использованием 
       <function>unserialize</function>, вызывается магический метод <link 
       linkend="language.oop5.magic">__wakeup</link>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает строку, содержащую потоковое представление переменной 
   <parameter>value</parameter>, которая может быть сохранена где угодно.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования <function>serialize</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// $session_data содержит многомерный массив с сессионной
// информацией о текущем пользователе. Мы используем serialize() для сохранения
// этой информации в базе данных в конце запроса.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn,
      "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array (serialize($session_data), $_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, &$sqldata)) {
    $stmt = odbc_prepare($conn,
     "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, &$sqldata)) {
        /* Код, выполняемый при ошибке.. */
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.0.7</entry>
       <entry>
        Был исправлен процесс сериализации объектов.
       </entry>
      </row>
      <row>
       <entry>4.0.0</entry>
       <entry>
        При сериализации объекта методы теперь не теряются. 
        См. 
        <link linkend="language.oop.serialization">Serializing Objects</link>
        для более подробной информации.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Невозможно сериализовать встроенные объекты PHP.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>unserialize</function></member>
    <member><link linkend="language.oop.serialization">Serializing Objects</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
