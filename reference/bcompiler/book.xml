<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 330340 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->
<!-- State: experimental -->

<book xml:id="book.bcompiler" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Компилятор байткода PHP</title>
 <titleabbrev>bcompiler</titleabbrev>
 
 <preface xml:id="intro.bcompiler">
  &reftitle.intro;
  &warn.experimental;
  <para>
   Bcompiler был создан по следующим причинам:
   <simplelist>
    <member>Для кодирования всего скрипта PHP в проприетарное приложение</member>
    <member>Для кодирования части кода PHP (некоторых функций/классов) для проприетарных приложений</member>
    <member>
     Для производства приложений php-gtk, которые могут быть использованы непосредственно
     на клиентском рабочем месте, без необходимости установки на нем PHP.
    </member>
    <member>Для изучения возможности создания конвертера из PHP в C</member>
   </simplelist>
   Первая из этих целей достигается с помощью функций
   <function>bcompiler_write_header</function>,
   <function>bcompiler_write_file</function> и
   <function>bcompiler_write_footer</function>.
   Файлы с байткодом могут быть как обычными, так и сжатыми.
   Для использования сгенерированного байткода его достаточно
   подключить с помощью инструкций include и require.
  </para>
  <para>
   Вторая достигается использованием функций
   <function>bcompiler_write_header</function>,
   <function>bcompiler_write_class</function>,
   <function>bcompiler_write_footer</function>,
   <function>bcompiler_read</function> и
   <function>bcompiler_load</function>. 
   Файлы с байткодом могут быть как обычными, так и сжатыми..
   <function>bcompiler_load</function> читает сжатый алгоритмом bzip файл,
   который может ужиматься до 1/3 от оригинального размера.
  </para>
  <para>
   Для создания исполняемых (EXE) файлов, bcompiler должен использоваться с 
   модифицированным файлом sapi, либо с версией PHP, скомпилированным как
   разделяемая библиотека. В подобном сценарии, bcompiler будет читать байткод
   из конца исполняемого файла.
  </para>
  <para>
   bcompiler может повысить производительность до 30% только если используется с
   несжатым байткодом. Но помните, что несжатый байткод может достигать
   размера в 5 раз большего, чем оригинальный код. Использование сжатия
   байткода позволит сэкономить место на диске, но сильно просадит производительность.
   Также, еbcompiler не производит никакой оптимизации байткода, но может быть в будущем...
  </para>
  <para>
   Что касается защиты кода, то можно с уверенностью сказать, что
   восстановить из байткода в точности такой же код на PHP, какой был
   изначально - невозможно. Также в нем отсутствуют любые комментарии.
   Совершенно бесполезно использовать байткод для пересоздания и
   модификации класса. Но в любом случае помните, что файл с байткодом
   можно легко просмотреть любым текстовым редактором, так что хранить
   в нем, например, пароли - не самая лучшая идея.
  </para>
 </preface>
 
 &reference.bcompiler.setup;
 &reference.bcompiler.constants;
 &reference.bcompiler.reference;
 
</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

