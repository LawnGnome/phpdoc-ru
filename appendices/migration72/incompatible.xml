<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343247 Maintainer: lex Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration72.incompatible">
 <title>Изменения, ломающие обратную совместимость</title>

 <sect2 xml:id="migration72.incompatible.number_format-no-neg-zero">
  <title>Предотвращение возврата отрицательного нуля из <function>number_format</function></title>

  <para>
   Раньше функция <function>number_format</function> возвращала <literal>-0</literal>.
   Хотя это совершенно правильно в соответствии со спецификацией чисел с плавающей точкой IEEE 754,
   эта странность нежелательна для отображения отформатированных чисел в удобочитаемой форме.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(number_format(-0.01)); // теперь выводит string(1) "0" вместо string(2) "-0"
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.object-array-casts">
  <title>Преобразование числовых ключей при приведении объектов и массивов</title>

  <para>
   Теперь числовые ключи лучше обрабатываются при приведении массивов к объектам и
   объектов к массивам (через явное приведение, либо используя <function>settype</function>).
  </para>

  <para>
   Это означает, что числовые (или числа в виде строк) ключи из массивов, конвертированные 
   в объекты теперь будут доступны:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// приведение массива к объекту
$arr = [0 => 1];
$obj = (object)$arr;
var_dump(
    $obj,
    $obj->{'0'}, // теперь работает
    $obj->{0} // теперь работает
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["0"]=>    // теперь это строковый ключ, а не числовой
  int(1)
}
int(1)
int(1)
]]>
   </screen>
  </informalexample>

  <para>
   И теперь числовые (или числа в виде строк) ключи объектов доступны при конвертации в массивы:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// приведение объекта в массив
$obj = new class {
    public function __construct()
    {
        $this->{0} = 1;
    }
};
$arr = (array)$obj;
var_dump(
    $arr,
    $arr[0], // теперь работает
    $arr['0'] // теперь работает
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(1) {
  [0]=>    // теперь это числовой ключ, а не строковый
  int(1)
}
int(1)
int(1)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.no-null-to-get_class">
  <title>Запрещена передача &null; в <function>get_class</function></title>

  <para>
   Раньше передача &null; в функцию <function>get_class</function> возвращала
   имя класса, из которого был сделан вызов. Это поведение было удалено и теперь вместо
   этого будет будет вызвана ошибка уровня <constant>E_WARNING</constant>. Для
   достижения того же поведения, что и раньше, следует просто опустить параметр.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.warn-on-non-countable-types">
  <title>Предупреждение при подсчёте неисчисляемых типов</title>

  <para>
   Теперь при использовании <function>count</function> с параметром,
   который нельзя посчитать будет возникать ошибка уровня <constant>E_WARNING</constant>
   (это также касается <function>sizeof</function> как псевдонима этой функции).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(
    count(1), // числа нельзя подсчитать
    count('abc'), // строки нельзя подсчитать
    count(new stdclass), // объекты, не реализующие интерфейс Countable, нельзя подсчитать 
    count([1,2]) // массивы можно подсчитать
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d
int(1)
int(1)
int(1)
int(2)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.hash-ext-to-objects">
  <title>Переход от ресурсов к объектам в расширении Hash</title>

  <para>
   В рамках долгосрочной миграции из ресурсов, расширение Hash было обновлено
   для использования объектов вместо ресурсов. Это изменение должно быть беспрепятственным
   для PHP-разработчиков, за исключением случаев, когда используются проверки <function>is_resource</function>
   (которые нужно заменить на использование <function>is_object</function>).
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.ssl-tls-defaults">
  <title>Улучшены значения по умолчанию в SSL/TLS</title>

  <para>
   Были сделаны следующие изменения в значения по умолчанию:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <literal>tls://</literal> теперь по умолчанию используется TLSv1.0 или TLSv1.1 или TLSv1.2
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>ssl://</literal> псевдоним <literal>tls://</literal>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Константы <literal>STREAM_CRYPTO_METHOD_TLS_*</literal> по умолчанию равны TLSv1.0
     или TLSv1.1 + TLSv1.2, вместо TLSv1.0
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
