<?xml version="1.0" encoding="windows-1251"?>
<!-- $Revision: 1.3 $ -->
<!-- 
   TODO:
   
     The command line options not in the
     list, but in the -h output below:
   
       -f, -e, -z, -l
    
     It would be best to document these, and
     collect more info about -c and -d!
-->
<appendix id="commandline">
 <title>Использование PHP из командной строки</title>
 <para>
  Использование PHP из командной строки обычно применяется
  в тех случаях, когда вам нужно отладить или протестировать
  настройку PHP; также оно используется, если вам нужно
  использовать PHP в других целях, нежели создание веб-скриптов.
 </para>
 <para>
  Обратите внимание, что вы всегда можете перенаправить
  вывод результатов выполнения скрипта во внешний файл,
  используя символ the &gt;, например,
  <literal>php -q test.php > test.html</literal> перенаправит
  вывод результатов выполнения скрипта <filename>test.php</filename>
  без HTTP-заголовков в файл <filename>test.html</filename>,
  находящийся в текущем каталоге.
 </para>
 <para>
  Вы можете использовать PHP из командной строки только в том случае,
  если вы обладаете PHP в формате исполняемого файла. Если вы
  собрали PHP в виде серверного модуля и на вашей машине
  недоступна CGI, использовать PHP таким образом вы не сможете.
  Для пользователей Windows как исполняемый файл, так и
  серверный модуль PHP находятся в одном файле с именем
  <filename>php.exe</filename>.
 </para>
 <para>
  Список параметров командной строки соответствует PHP 4.0.6.
  Вы можете получить список параметров вместе с однострочными
  описаниями с помощью параметра <literal>-h</literal> option.
  Результат выполнения <literal>php -h</literal> может выглядеть
  примерно так:
  <screen>
<![CDATA[
Usage: php [-q] [-h] [-s [-v] [-i] [-f <file>] |  {<file> [args...]}
  -q             Quiet-mode.  Suppress HTTP Header output.
  -s             Display colour syntax highlighted source.
  -f <file>      Parse <file>.  Implies `-q'
  -v             Version number
  -C             Do not chdir to the script's directory
  -c <path>      Look for php.ini file in this directory
  -d foo[=bar]   Define INI entry foo with value 'bar'
  -e             Generate extended information for debugger/profiler
  -z <file>      Load Zend extension <file>.
  -l             Syntax check only (lint)
  -m             Show compiled in modules
  -i             PHP information
  -h             This help
]]>
  </screen>
 </para>
 <para>
  Здесь мы приводим список наиболее важных параметов командной
  строки с детальными пояснениями.
 </para>
 <para>
  <table>
   <title>Параметры командной строки</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Параметр</entry>
      <entry>Описание</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>-q</entry>
      <entry>
       Запрещает вывод HTTP-заголовков. Обычно PHP выводит
       HTTP-заголовки для обработки их браузером. Во время
       создания скриптов для командной строки эти заголовки
       бесполезны.
      </entry>
     </row>
     <row>
      <entry>-s</entry>
      <entry>
       Выводит исходный код заданного файла с подсветкой
       синтаксиса. Это равнозначно использованию  функции
       <function>highlight_file</function> в PHP-скрипте.
      </entry>
     </row>
     <row>
      <entry>-v</entry>
      <entry>
       Запустив PHP с этим параметром, вы сможете
       узнать текущую версию PHP, например, 4.0.6.
      </entry>
     </row>
     <row>
      <entry>-C</entry>
      <entry>
       Обычно PHP изменяет текущий каталог на каталог,
       в котором находится выполняемый скрипт. Это делает
       возможным, например, открытие файлов из скрипта
       в том же каталоге, с указанием только имени файла.
       Если вы хотите отключить эту возможность, используйте
       указанный параметр.
      </entry>
     </row>
     <row>
      <entry>-c</entry>
      <entry>
       Используя этот параметр, вы можете указать альтернативный
       путь к файлу <filename>php.ini</filename>, чтобы PHP
       искал конфигурационные файлы в указанном каталоге вместо
       каталога по умолчанию.
      </entry>
     </row>
     <row>
      <entry>-d</entry>
      <entry>
       С помощью этого параметра вы можете
       установить отдельные настройки <filename>php.ini</filename>
       во время выполнения скрипта.
      </entry>
     </row>
     <row>
      <entry>-m</entry>
      <entry>
       Using this option, PHP prints out the built in
       (and loaded) PHP and Zend modules, the PHP
       and Zend version numbers, and a short Zend
       copyright notice.
      </entry>
     </row>
     <row>
      <entry>-i</entry>
      <entry>
       This command line option calls
       <function>phpinfo</function>, and prints
       out the results. If PHP is not working well,
       it is advisable to make a <literal>php -i</literal>
       and see if any error messages are printed out
       before or in place of the information tables.
      </entry>
     </row>
     <row>
      <entry>-h</entry>
      <entry>
       With this option, you can get information about
       the actual list of command line options and some
       one line descriptions about what they do.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
 <para>
  The PHP executable can be used to run PHP scripts absolutely
  independent from the web server. If you are on a Unix system,
  you should add a special first line to your PHP script, and
  make it executable, so the system will know, what program
  should run the script. On a Windows platform you can associate
  <literal>php.exe -q</literal> with the double click option of
  the <literal>.php</literal> files, or you can make a batch file
  to run the script through PHP. The first line added to the
  script to work on Unix won't hurt on Windows, so you can write
  cross platform programs this way. A simple example of writing
  a command line PHP program can be found below.
 </para>
 <example>
  <title>Script intended to be run from command line (script.php)</title>
  <programlisting role="php">
<![CDATA[
#!/usr/bin/php -q
<?php

if ($argc != 2 || in_array($argv[1], array('--help', '-help', '-h', '-?'))) {
?>

This is a command line PHP script with one option.

  Usage:
  <?php echo $argv[0]; ?> <option>

  <option> can be some word you would like
  to print out. With the --help, -help, -h,
  or -? options, you can get this help.

<?php
} else {
    echo $argv[1];
}
?>
]]>
  </programlisting>
 </example>
 <para>
  In the script above, we used the special first line to indicate,
  that this file should be run by PHP and should not print out HTTP
  headers. There are two variables you can use while writing command
  line applications with PHP: <varname>$argc</varname> and
  <varname>$argv</varname>. The first is the number of arguments plus
  one (the name of the script running). The second is an array
  containing the arguments, starting with the script name as number
  zero (<varname>$argv[0]</varname>).
 </para>
 <para>
  In the program above we checked if there are less or more than one
  arguments. Also if the argument was <literal>--help</literal>,
  <literal>-help</literal>, <literal>-h</literal> or <literal>-?</literal>,
  we printed out the help message, printing the script name dynamically.
  If we received some other argument we echoed that out.
 </para>
 <para>
  If you would like to run the above script on Unix, you need to
  make it executable, and simply call it as
  <literal>script.php echothis</literal> or
  <literal>script.php -h</literal>. On Windows, you can make a
  batch file for this task:
 </para>
 <example>
  <title>Batch file to run a command line PHP script (script.bat)</title>
  <programlisting role="winbat">
@c:\php\php.exe -q script.php %1 %2 %3 %4
  </programlisting>
 </example>
 <para>
  Assuming, you named the above program as
  <filename>script.php</filename>, and you have your
  <filename>php.exe</filename> in
  <filename>c:\php\php.exe</filename> this batch file
  will run it for you with your added options:
  <literal>script.bat echothis</literal> or
  <literal>script.bat -h</literal>.
 </para>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
