<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: n/a Maintainer: tronic Status: ready -->
<!-- $Revision$ -->
 <appendix xml:id="debugger" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Отладка PHP</title>

  <sect1 xml:id="debugger-about">
   <title>Об отладчике</title>
   <simpara>
    PHP 3 имеет поддержку сетевого отладчика.
   </simpara>
   <simpara>
    PHP 4 не имеет встроенной системы отладки. Тем не менее, вы
    можете использовать внешние отладчики. <link xlink:href="&url.zend.ide;">Zend IDE</link>
    имеет встроенный отладчик, кроме того, существует несколько свободно
    распространяемых расширений для отладки, например, DBG, находящееся по
    адресу <link xlink:href="&url.dbg;">&url.dbg;</link> или <link xlink:href="&url.apd;">Advanced PHP
    Debugger</link> (APD).
   </simpara>
  </sect1>

  <sect1 xml:id="debugger-using">
   <title>Использование отладчика</title>

   <para>
    Встроенный в PHP 3 отладчик бывает полезным для отслеживания
    скрытых ошибок. Отладчик начинает работать на порту <acronym>TCP</acronym>
    каждый раз, когда запускается PHP. Все сообщения об ошибках отсылаются
    по TCP соединению. Эта информация предназначается для "сервера отладки",
    который может работать как в <acronym>IDE</acronym>, так и в программируемом
    редакторе (таком, как Emacs).
   </para>
   <para>
    Как настроить отладчик:
    <orderedlist>
     <listitem>
      <simpara> 
       Установите TCP порт для отладчика в <link
       linkend="configuration.file">файле конфигурации</link> (опция <link
       linkend="ini.debugger.port">debugger.port</link>) и включите его
       (опция <link linkend="ini.debugger.enabled">debugger.enabled</link>).
      </simpara>
     </listitem>
     <listitem>
      <simpara> 
       Настройте на этот порт TCP listener (например, так: <command>socket -l -s 1400</command>
       для платформ UNIX).
      </simpara>
     </listitem>
     <listitem>
      <simpara> 
       В код скрипта внесите вызов функции "debugger_on(<replaceable>хост</replaceable>)", где
       <replaceable>хост</replaceable> - IP адрес или имя машины, на которой
       запущен <acronym>TCP</acronym> listener.
      </simpara>
     </listitem>
    </orderedlist>
    Теперь все предупреждения, замечания и т.д. будут отсылаться на сокет, 
    используемый listener'ом, <emphasis>даже если вы отключили вывод сообщений об
    ошибках с помощью функции <function>error_reporting</function></emphasis>.  
   </para>
  </sect1>

  <sect1 xml:id="debugger-protocol">
   <title>Протокол отладчика</title>
   <para>
    Протокол отладчика PHP 3 является построчным. Каждая строка
    состоит из <emphasis>типа</emphasis> и нескольких строк, составляющих
    <emphasis>сообщение</emphasis>. Каждое сообщение начинается строкой, имеющей тип
    <literal>start</literal> и завершается строкой, имеющей тип <literal>end</literal>.
    PHP 3 имеет возможность одновременной посылки строк, предназначенных для
    разных сообщений.
   </para>
   <para>
    Каждая строка имеет следующий формат:
    <informalexample>
     <literallayout>
<replaceable>дата</replaceable> <replaceable>время</replaceable>
<replaceable>хост</replaceable>(<replaceable>pid</replaceable>)
<replaceable>тип</replaceable>:
<replaceable>данные сообщения</replaceable>
     </literallayout>
    </informalexample>
    <variablelist>
     <varlistentry>
      <term><replaceable>дата</replaceable></term>
      <listitem>
       <simpara>
  Дата в формате ISO 8601
	(<replaceable>гггг</replaceable>-<replaceable>мм</replaceable>-<replaceable>чч</replaceable>)
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>время</replaceable></term>
      <listitem>
       <simpara>Время с указанием микросекунд:
	<replaceable>чч</replaceable>:<replaceable>мм</replaceable>:<replaceable>мсмсмс</replaceable>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>хост</replaceable></term>
      <listitem>
       <simpara>
  Имя DNS или IP адрес хоста, на котором возникла ошибка при выполнении скрипта.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>pid</replaceable></term>
      <listitem>
       <simpara>
	PID (идентификатор процесса) на <replaceable>хосте</replaceable>, в процессе работы
  которого возникла ошибка в скрипте PHP 3.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>тип</replaceable></term>
      <listitem>
       <para>
  Тип строки. Сообщает принимающей программе, как та должна
  интерпретировать последующие данные:
	<table>
	 <title>Типы строк отладчика</title>
	 <tgroup cols="2">
	  <thead>
	   <row>
	    <entry>Имя</entry>
	    <entry>Значение</entry>
	   </row>
	  </thead>
	  <tbody>
	   <row>
	    <entry><literal>start</literal></entry> 
	    <entry>
       Сообщает принимающей программе о начале отладочного сообщения.
       Содержащиеся в <replaceable>данных</replaceable> сведения являютя одним из типов
       ошибки, перечисленных ниже.
	    </entry>
	   </row>
	   <row>
	    <entry><literal>message</literal></entry>
	    <entry>Сообщение PHP 3 об ошибке.</entry>
	   </row>
	   <row>
	    <entry><literal>location</literal></entry>
	    <entry>
       Имя файла и номер строки, где возникла ошибка. Первая строка
	     <literal>location</literal> всегда содержит указание на
       верхний уровень.
	     <replaceable>данные</replaceable> будут содержать строку вида
	     <literal><replaceable>файл</replaceable>:<replaceable>строка</replaceable></literal>.
       После каждой строки <literal>message</literal> и после
       каждой строки <literal>function</literal> всегда будет
       следовать строка <literal>location</literal>.
	    </entry>
	   </row>
	   <row>
	    <entry>
	     <literal>frames</literal></entry> <entry>Количество кадров
       в последующем дампе стека. Если, например, передаются сведения
       о четырех кадрах, следует ожидать, что последует информация
       о четырех уровнях вложенности вызова функций. Если строка
	     "frames" отсутствует, глубина вложенности принимается за нулевую.
	    </entry>
	   </row>
	   <row>
	    <entry>
	     <literal>function</literal></entry> 
	    <entry>
       Имя функции, в которой произошла ошибка. Для каждого
       уровня вложенности в стеке вызовов функций это имя
       будет повторяться только однажды.
	    </entry>
	   </row>
	   <row>
	    <entry><literal>end</literal></entry> 
	    <entry>
       Сообщает об окончании отладочного сообщения.
	    </entry>
	   </row>
	  </tbody>
	 </tgroup>
	</table>
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>data</replaceable></term>
      <listitem>
       <simpara>Данные в строке.</simpara>
      </listitem>
     </varlistentry>
    </variablelist>

    <table>
     <title>Типы ошибок отладчика</title>
     <tgroup cols="2">
      <thead>
       <row>
	<entry>Отладчик</entry>
	<entry>Внутреннее представление в PHP 3</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry><errortype>warning</errortype></entry>
	<entry><errortype>E_WARNING</errortype></entry>
       </row>
       <row>
	<entry><errortype>error</errortype></entry>
	<entry><errortype>E_ERROR</errortype></entry>
       </row>
       <row>
	<entry><errortype>parse</errortype></entry>
	<entry><errortype>E_PARSE</errortype></entry>
       </row>
       <row>
	<entry><errortype>notice</errortype></entry>
	<entry><errortype>E_NOTICE</errortype></entry>
       </row>
       <row>
	<entry><errortype>core-error</errortype></entry>
	<entry><errortype>E_CORE_ERROR</errortype></entry>
       </row>
       <row>
	<entry><errortype>core-warning</errortype></entry>
	<entry><errortype>E_CORE_WARNING</errortype></entry>
       </row>
       <row>
	<entry><errortype>unknown</errortype></entry>
	<entry>(any other)</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    
    <example>
     <title>Пример отладочного сообщения</title>
     <literallayout>
1998-04-05 23:27:400966 lucifer.guardian.no(20481) start: notice
1998-04-05 23:27:400966 lucifer.guardian.no(20481) message: Uninitialized variable
1998-04-05 23:27:400966 lucifer.guardian.no(20481) location: (&null;):7
1998-04-05 23:27:400966 lucifer.guardian.no(20481) frames: 1
1998-04-05 23:27:400966 lucifer.guardian.no(20481) function: display
1998-04-05 23:27:400966 lucifer.guardian.no(20481) location: /home/ssb/public_html/test.php3:10
1998-04-05 23:27:400966 lucifer.guardian.no(20481) end: notice
     </literallayout>
    </example>
   </para>
  </sect1>

 </appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
