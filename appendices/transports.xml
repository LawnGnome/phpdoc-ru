<?xml version="1.0" encoding="windows-1251"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.4 Maintainer: lovchy Status: ready -->

<appendix id="transports">
 <title>Список поддерживаемых транспортных протоколов</title>
 <para>
  Нижеследующий список содержит информацию о протоколах передачи встроенных в
  PHP и готовых для использования в функциями работы с сокетами, такими как
  <function>fsockopen</function> и
  <function>stream_socket_client</function>. Эти протоколы 
  <emphasis>не</emphasis> применяются в 
  <link linkend="ref.sockets">Расширении для работы с Сокетами</link>.
 </para>

 <para>
  Для получения списка поддерживаемых протоколов передачи, встроенных в вашу версию
  <literal>PHP</literal>, используйте функцию <function>stream_get_transports</function>.
 </para>

 <section id="transports.inet">
  <title>Интернет-сокеты: TCP, UDP, SSL, and TLS</title>
  <simpara>PHP 3, PHP 4. <literal>ssl://</literal> и <literal>tls://</literal> начиная с PHP 4.3</simpara>

  <note>
   <simpara>
    Если транспортный протокол не указан, будет использован <literal>tcp://</literal>.
   </simpara>
  </note>

  <itemizedlist>
   <listitem><simpara><literal>127.0.0.1</literal></simpara></listitem>
   <listitem><simpara><literal>fe80::1</literal></simpara></listitem>
   <listitem><simpara><literal>www.example.com</literal></simpara></listitem>
   <listitem><simpara><literal>tcp://127.0.0.1</literal></simpara></listitem>
   <listitem><simpara><literal>tcp://fe80::1</literal></simpara></listitem>
   <listitem><simpara><literal>tcp://www.example.com</literal></simpara></listitem>
   <listitem><simpara><literal>udp://www.example.com</literal></simpara></listitem>
   <listitem><simpara><literal>ssl://www.example.com</literal></simpara></listitem>
   <listitem><simpara><literal>tls://www.example.com</literal></simpara></listitem>
  </itemizedlist>

  <simpara>
   Интернет-сокеты требуют указания порта в дополнение к адресу. В
   случае <function>fsockopen</function>, порт передаётся вторым параметром и
   не затрагивает строку адреса. При работе с 
   <function>stream_socket_client</function> и другими близкими функциями, как
   и в случае со стандартными URL, порт указывается в конце адреса, отделённый
   двоеточием.
  </simpara>

  <itemizedlist>
   <listitem><simpara><literal>tcp://127.0.0.1:80</literal></simpara></listitem>
   <listitem><simpara><literal>tcp://[fe80::1]:80</literal></simpara></listitem>
   <listitem><simpara><literal>tcp://www.example.com:80</literal></simpara></listitem>
  </itemizedlist>

  <note>
   <title>IPv6 численные адреса с указанием порта</title>
   <simpara>
    Во втором примере выше, IPv6 адрес, заключён в квадратные скобки:
    <literal>[fe80::1]</literal>. Это сделано для того, чтобы отличить
    двоеточие в адресе от двоеточия при указании порта.
   </simpara>
  </note>

  <simpara>
   Протоколы <literal>ssl://</literal> and <literal>tls://</literal>
   (доступные только если поддержка openssl включена в PHP) являются
   расширениями <literal>tcp://</literal>, дополняющими его SSL-шифрованием.
   Начиная с <literal>PHP 4.3.0</literal>, для работы с ssl-протоколами,
   <literal>PHP</literal>
   должен быть собран с поддержкой OpenSSL, в <literal>PHP 5.0.0</literal>
   он может быть представлен как модуль. 
  </simpara>

  <para>
   <table>
    <title>
     Параметры для протоколов <literal>ssl://</literal> и <literal>tls://</literal> 
     (начиная с <literal>PHP 4.3.2</literal>)
    </title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>Имя</entry>
       <entry>Использование</entry>
       <entry>По умолчанию</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><literal>verify_peer</literal></entry>
       <entry>
        &true; или &false;.
        Требует проверки SSL-сертификата.
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>allow_self_signed</literal></entry>
       <entry>
        &true; или &false;.
        Позволяет использовать само-подписанные сертификаты.
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>cafile</literal></entry>
       <entry>
        Расположение в локальной файловой системе файла сертификата, который
        будет использовать <literal>verify_peer</literal> для
        аутентифицирования идентификатора удалённого сервера(клиента).
       </entry>
       <entry></entry>
      </row>
      <row>
       <entry><literal>capath</literal></entry>
       <entry>
        Если <literal>cafile</literal> не указан, или сертификат не найден,
        поиск подходящего сертификата продолжается в директории <literal>capath</literal>.
        Значением директивы должен быть путь к директории, содержащей сертификаты.
       </entry>
       <entry></entry>
      </row>
      <row>
       <entry><literal>local_cert</literal></entry>
       <entry>
        Путь к локальному файлу сертификата. Это должен быть
        PEM-энкодированный файл, содержащий ваш сертификат и частный ключ.
        Опционально он может содержать цепочку сертфиикатов издателей.
       </entry>
       <entry></entry>
      </row>
      <row>
       <entry><literal>passphrase</literal></entry>
       <entry>
        Ключевое слово, по которому был энкодирован ваш <literal>local_cert</literal>.
       </entry>
       <entry></entry>
      </row>
      <row>
       <entry><literal>CN_match</literal></entry>
       <entry>
        Общее название (Common Name), которого мы ожидаем. PHP будет сравнивать, используя
        вайлд-карды. Если общее название не подходит, соединение будет
        разорвано.
       </entry>
       <entry></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <note>
   <simpara>
    Постольку поскольку <literal>ssl://</literal> протокол является базисом
    для 
    <link linkend="wrappers.http"><literal>https://</literal></link> и
    <link linkend="wrappers.ftp"><literal>ftps://</literal></link> врапперов, 
    все директивы <literal>ssl://</literal> применяются как для
    <literal>https://</literal>, так и для <literal>ftps://</literal>.
   </simpara>
  </note>
 </section>

 <section id="transports.unix">
  <title>Unix-сокеты: UNIX и UDG</title>
  <simpara>
   <literal>unix://</literal> начиная с <literal>PHP 3</literal>, 
   <literal>udg://</literal> начиная с <literal>PHP 5</literal>
  </simpara>

  <itemizedlist>
   <listitem><simpara><literal>unix:///tmp/mysock</literal></simpara></listitem>
   <listitem><simpara><literal>udg:///tmp/mysock</literal></simpara></listitem>
  </itemizedlist>

  <simpara>
   <literal>unix://</literal> даёт возможность использовать unix-сокеты, а 
   <literal>udg://</literal> предоставляет альтернативный способ передачи
   данных в них, с использованием датаграм.
  </simpara>

  <simpara>
   Unix-сокеты, в отличие от Интернет-сокетов не требуют указания порта.
   В случае <function>fsockopen</function> параметр
   <parameter>portno</parameter> должен быть равен 0.
  </simpara>
 </section>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
